#pragma once
#include <d3d11.h>

namespace zonetool::iw6
{
	typedef float vec_t;
	typedef vec_t vec2_t[2];
	typedef vec_t vec3_t[3];
	typedef vec_t vec4_t[4];

	typedef std::int32_t scr_string_t;

	enum XAssetType : std::int32_t
	{
		ASSET_TYPE_PHYSPRESET = 0x0,
		ASSET_TYPE_PHYSCOLLMAP = 0x1,
		ASSET_TYPE_XANIMPARTS = 0x2,
		ASSET_TYPE_XMODEL_SURFS = 0x3,
		ASSET_TYPE_XMODEL = 0x4,
		ASSET_TYPE_MATERIAL = 0x5,
		ASSET_TYPE_COMPUTESHADER = 0x6,
		ASSET_TYPE_VERTEXSHADER = 0x7,
		ASSET_TYPE_HULLSHADER = 0x8,
		ASSET_TYPE_DOMAINSHADER = 0x9,
		ASSET_TYPE_PIXELSHADER = 0xA,
		ASSET_TYPE_VERTEXDECL = 0xB,
		ASSET_TYPE_TECHNIQUE_SET = 0xC,
		ASSET_TYPE_IMAGE = 0xD,
		ASSET_TYPE_SOUND = 0xE,
		ASSET_TYPE_SOUND_CURVE = 0xF,
		ASSET_TYPE_LPF_CURVE = 0x10,
		ASSET_TYPE_REVERB_CURVE = 0x11,
		ASSET_TYPE_LOADED_SOUND = 0x12,
		ASSET_TYPE_CLIPMAP = 0x13,
		ASSET_TYPE_COMWORLD = 0x14,
		ASSET_TYPE_GLASSWORLD = 0x15,
		ASSET_TYPE_PATHDATA = 0x16,
		ASSET_TYPE_VEHICLE_TRACK = 0x17,
		ASSET_TYPE_MAP_ENTS = 0x18,
		ASSET_TYPE_FXWORLD = 0x19,
		ASSET_TYPE_GFXWORLD = 0x1A,
		ASSET_TYPE_LIGHT_DEF = 0x1B,
		ASSET_TYPE_UI_MAP = 0x1C,
		ASSET_TYPE_FONT = 0x1D,
		ASSET_TYPE_MENULIST = 0x1E,
		ASSET_TYPE_MENU = 0x1F,
		ASSET_TYPE_ANIMCLASS = 0x20,
		ASSET_TYPE_LOCALIZE_ENTRY = 0x21,
		ASSET_TYPE_ATTACHMENT = 0x22,
		ASSET_TYPE_WEAPON = 0x23,
		ASSET_TYPE_SNDDRIVER_GLOBALS = 0x24,
		ASSET_TYPE_FX = 0x25,
		ASSET_TYPE_IMPACT_FX = 0x26,
		ASSET_TYPE_SURFACE_FX = 0x27,
		ASSET_TYPE_AITYPE = 0x28,
		ASSET_TYPE_MPTYPE = 0x29,
		ASSET_TYPE_CHARACTER = 0x2A,
		ASSET_TYPE_XMODELALIAS = 0x2B,
		ASSET_TYPE_RAWFILE = 0x2C,
		ASSET_TYPE_SCRIPTFILE = 0x2D,
		ASSET_TYPE_STRINGTABLE = 0x2E,
		ASSET_TYPE_LEADERBOARD = 0x2F,
		ASSET_TYPE_STRUCTURED_DATA_DEF = 0x30,
		ASSET_TYPE_TRACER = 0x31,
		ASSET_TYPE_VEHICLE = 0x32,
		ASSET_TYPE_ADDON_MAP_ENTS = 0x33,
		ASSET_TYPE_NET_CONST_STRINGS = 0x34,
		ASSET_TYPE_REVERB_PRESET = 0x35,
		ASSET_TYPE_LUA_FILE = 0x36,
		ASSET_TYPE_SCRIPTABLE = 0x37,
		ASSET_TYPE_COLORIZATION = 0x38,
		ASSET_TYPE_COLORIZATIONSET = 0x39,
		ASSET_TYPE_TONEMAPPING = 0x3A,
		ASSET_TYPE_EQUIPMENT_SND_TABLE = 0x3B,
		ASSET_TYPE_VECTORFIELD = 0x3C,
		ASSET_TYPE_DOPPLER_PRESET = 0x3D,
		ASSET_TYPE_PARTICLE_SIM_ANIMATION = 0x3E,
		ASSET_TYPE_COUNT = 0x3F,
		ASSET_TYPE_STRING = 0x3F,
		ASSET_TYPE_ASSETLIST = 0x40,
		max = 0x3F
	};

	enum PhysPresetScaling
	{
		PHYSPRESET_SCALING_LINEAR = 0x0,
		PHYSPRESET_SCALING_QUADRATIC = 0x1,
		PHYSPRESET_SCALING_COUNT = 0x2,
	};

	struct PhysPreset
	{
		const char* name;
		int type;
		float mass;
		float bounce;
		float friction;
		float bulletForceScale;
		float explosiveForceScale;
		const char* sndAliasPrefix;
		float piecesSpreadFraction;
		float piecesUpwardVelocity;
		float minMomentum;
		float maxMomentum;
		float minVolume;
		float maxVolume;
		float minPitch;
		float maxPitch;
		PhysPresetScaling volumeType;
		PhysPresetScaling pitchType;
		bool tempDefaultToCylinder;
		bool perSurfaceSndAlias;
	};

	struct Bounds
	{
		vec3_t midPoint;
		vec3_t halfSize;
	};

	struct GfxDrawSurfFields
	{
		unsigned __int64 objectId : 16;
		unsigned __int64 reflectionProbeIndex : 8;
		unsigned __int64 hasGfxEntIndex : 1;
		unsigned __int64 customIndex : 5;
		unsigned __int64 materialSortedIndex : 13;
		unsigned __int64 tessellation : 3;
		unsigned __int64 prepass : 2;
		unsigned __int64 useHeroLighting : 1;
		unsigned __int64 sceneLightEnvIndex : 16;
		unsigned __int64 viewModelRender : 1;
		unsigned __int64 surfType : 4;
		unsigned __int64 primarySortKey : 6;
		unsigned __int64 unused : 30;
	};

	struct Packed128
	{
		unsigned __int64 p0;
		unsigned __int64 p1;
	};

	union GfxDrawSurf
	{
		GfxDrawSurfFields fields;
		Packed128 packed;
	};

	enum MaterialTechniqueType : std::int32_t
	{
		TECHNIQUE_DEPTH_PREPASS = 0x0,
		TECHNIQUE_BUILD_SHADOWMAP_DEPTH = 0x1,
		TECHNIQUE_UNLIT = 0x2,
		TECHNIQUE_EMISSIVE = 0x3,
		TECHNIQUE_EMISSIVE_DFOG = 0x4,
		TECHNIQUE_EMISSIVE_SHADOW = 0x5,
		TECHNIQUE_EMISSIVE_SHADOW_DFOG = 0x6,
		TECHNIQUE_LIT = 0x7,
		TECHNIQUE_LIT_DIR = 0x8,
		TECHNIQUE_LIT_DIR_SHADOW = 0x9,
		TECHNIQUE_LIT_SPOT = 0xA,
		TECHNIQUE_LIT_SPOT_SHADOW = 0xB,
		TECHNIQUE_LIT_SPOT_SHADOW_CUCOLORIS = 0xC,
		TECHNIQUE_LIT_OMNI = 0xD,
		TECHNIQUE_LIT_OMNI_SHADOW = 0xE,
		TECHNIQUE_LIT_DIR_SPOT = 0xF,
		TECHNIQUE_LIT_DIR_SPOT_SHADOW = 0x10,
		TECHNIQUE_LIT_DIR_SPOT_SHADOW_CUCOLORIS = 0x11,
		TECHNIQUE_LIT_DIR_OMNI = 0x12,
		TECHNIQUE_LIT_DIR_OMNI_SHADOW = 0x13,
		TECHNIQUE_LIT_DIR_SHADOW_SPOT = 0x14,
		TECHNIQUE_LIT_DIR_SHADOW_SPOT_SHADOW = 0x15,
		TECHNIQUE_LIT_DIR_SHADOW_SPOT_SHADOW_CUCOLORIS = 0x16,
		TECHNIQUE_LIT_DIR_SHADOW_OMNI = 0x17,
		TECHNIQUE_LIT_DIR_SHADOW_OMNI_SHADOW = 0x18,
		TECHNIQUE_LIT_SPOT_SPOT = 0x19,
		TECHNIQUE_LIT_SPOT_SPOT_SHADOW = 0x1A,
		TECHNIQUE_LIT_SPOT_SPOT_SHADOW_CUCOLORIS = 0x1B,
		TECHNIQUE_LIT_SPOT_OMNI = 0x1C,
		TECHNIQUE_LIT_SPOT_OMNI_SHADOW = 0x1D,
		TECHNIQUE_LIT_SPOT_SHADOW_SPOT = 0x1E,
		TECHNIQUE_LIT_SPOT_SHADOW_SPOT_SHADOW = 0x1F,
		TECHNIQUE_LIT_SPOT_SHADOW_SPOT_SHADOW_CUCOLORIS = 0x20,
		TECHNIQUE_LIT_SPOT_SHADOW_OMNI = 0x21,
		TECHNIQUE_LIT_SPOT_SHADOW_OMNI_SHADOW = 0x22,
		TECHNIQUE_LIT_SPOT_SHADOW_CUCOLORIS_SPOT = 0x23,
		TECHNIQUE_LIT_SPOT_SHADOW_CUCOLORIS_SPOT_SHADOW = 0x24,
		TECHNIQUE_LIT_SPOT_SHADOW_CUCOLORIS_SPOT_SHADOW_CUCOLORIS = 0x25,
		TECHNIQUE_LIT_SPOT_SHADOW_CUCOLORIS_OMNI = 0x26,
		TECHNIQUE_LIT_SPOT_SHADOW_CUCOLORIS_OMNI_SHADOW = 0x27,
		TECHNIQUE_LIT_OMNI_OMNI = 0x28,
		TECHNIQUE_LIT_OMNI_OMNI_SHADOW = 0x29,
		TECHNIQUE_LIT_OMNI_SHADOW_OMNI = 0x2A,
		TECHNIQUE_LIT_OMNI_SHADOW_OMNI_SHADOW = 0x2B,
		TECHNIQUE_LIT_DYNAMIC_BRANCHING_CUCOLORIS = 0x2C,
		TECHNIQUE_LIT_SUN_DYNAMIC_BRANCHING_CUCOLORIS = 0x2D,
		TECHNIQUE_LIT_DYNAMIC_BRANCHING = 0x2E,
		TECHNIQUE_LIT_SUN_DYNAMIC_BRANCHING = 0x2F,
		TECHNIQUE_LIT_DFOG = 0x30,
		TECHNIQUE_LIT_DIR_DFOG = 0x31,
		TECHNIQUE_LIT_DIR_SHADOW_DFOG = 0x32,
		TECHNIQUE_LIT_SPOT_DFOG = 0x33,
		TECHNIQUE_LIT_SPOT_SHADOW_DFOG = 0x34,
		TECHNIQUE_LIT_SPOT_SHADOW_CUCOLORIS_DFOG = 0x35,
		TECHNIQUE_LIT_OMNI_DFOG = 0x36,
		TECHNIQUE_LIT_OMNI_SHADOW_DFOG = 0x37,
		TECHNIQUE_LIT_DIR_SPOT_DFOG = 0x38,
		TECHNIQUE_LIT_DIR_SPOT_SHADOW_DFOG = 0x39,
		TECHNIQUE_LIT_DIR_SPOT_SHADOW_CUCOLORIS_DFOG = 0x3A,
		TECHNIQUE_LIT_DIR_OMNI_DFOG = 0x3B,
		TECHNIQUE_LIT_DIR_OMNI_SHADOW_DFOG = 0x3C,
		TECHNIQUE_LIT_DIR_SHADOW_SPOT_DFOG = 0x3D,
		TECHNIQUE_LIT_DIR_SHADOW_SPOT_SHADOW_DFOG = 0x3E,
		TECHNIQUE_LIT_DIR_SHADOW_SPOT_SHADOW_CUCOLORIS_DFOG = 0x3F,
		TECHNIQUE_LIT_DIR_SHADOW_OMNI_DFOG = 0x40,
		TECHNIQUE_LIT_DIR_SHADOW_OMNI_SHADOW_DFOG = 0x41,
		TECHNIQUE_LIT_SPOT_SPOT_DFOG = 0x42,
		TECHNIQUE_LIT_SPOT_SPOT_SHADOW_DFOG = 0x43,
		TECHNIQUE_LIT_SPOT_SPOT_SHADOW_CUCOLORIS_DFOG = 0x44,
		TECHNIQUE_LIT_SPOT_OMNI_DFOG = 0x45,
		TECHNIQUE_LIT_SPOT_OMNI_SHADOW_DFOG = 0x46,
		TECHNIQUE_LIT_SPOT_SHADOW_SPOT_DFOG = 0x47,
		TECHNIQUE_LIT_SPOT_SHADOW_SPOT_SHADOW_DFOG = 0x48,
		TECHNIQUE_LIT_SPOT_SHADOW_SPOT_SHADOW_CUCOLORIS_DFOG = 0x49,
		TECHNIQUE_LIT_SPOT_SHADOW_OMNI_DFOG = 0x4A,
		TECHNIQUE_LIT_SPOT_SHADOW_OMNI_SHADOW_DFOG = 0x4B,
		TECHNIQUE_LIT_SPOT_SHADOW_CUCOLORIS_SPOT_DFOG = 0x4C,
		TECHNIQUE_LIT_SPOT_SHADOW_CUCOLORIS_SPOT_SHADOW_DFOG = 0x4D,
		TECHNIQUE_LIT_SPOT_SHADOW_CUCOLORIS_SPOT_SHADOW_CUCOLORIS_DFOG = 0x4E,
		TECHNIQUE_LIT_SPOT_SHADOW_CUCOLORIS_OMNI_DFOG = 0x4F,
		TECHNIQUE_LIT_SPOT_SHADOW_CUCOLORIS_OMNI_SHADOW_DFOG = 0x50,
		TECHNIQUE_LIT_OMNI_OMNI_DFOG = 0x51,
		TECHNIQUE_LIT_OMNI_OMNI_SHADOW_DFOG = 0x52,
		TECHNIQUE_LIT_OMNI_SHADOW_OMNI_DFOG = 0x53,
		TECHNIQUE_LIT_OMNI_SHADOW_OMNI_SHADOW_DFOG = 0x54,
		TECHNIQUE_LIT_DYNAMIC_BRANCHING_CUCOLORIS_DFOG = 0x55,
		TECHNIQUE_LIT_SUN_DYNAMIC_BRANCHING_CUCOLORIS_DFOG = 0x56,
		TECHNIQUE_LIT_DYNAMIC_BRANCHING_DFOG = 0x57,
		TECHNIQUE_LIT_SUN_DYNAMIC_BRANCHING_DFOG = 0x58,
		TECHNIQUE_LIGHT_SPOT = 0x59,
		TECHNIQUE_LIGHT_OMNI = 0x5A,
		TECHNIQUE_LIGHT_SPOT_SHADOW = 0x5B,
		TECHNIQUE_LIGHT_SPOT_SHADOW_CUCOLORIS = 0x5C,
		TECHNIQUE_FAKELIGHT_NORMAL = 0x5D,
		TECHNIQUE_FAKELIGHT_VIEW = 0x5E,
		TECHNIQUE_SUNLIGHT_PREVIEW = 0x5F,
		TECHNIQUE_CASE_TEXTURE = 0x60,
		TECHNIQUE_WIREFRAME_SOLID = 0x61,
		TECHNIQUE_WIREFRAME_SHADED = 0x62,
		TECHNIQUE_THERMAL = 0x63,
		TECHNIQUE_VELOCITY_RIGID = 0x64,
		TECHNIQUE_VELOCITY_SKINNED = 0x65,
		TECHNIQUE_DEBUG_BUMPMAP = 0x66,
		TECHNIQUE_INSTANCED_DEPTH_PREPASS = 0x67,
		TECHNIQUE_INSTANCED_BUILD_SHADOWMAP_DEPTH = 0x68,
		TECHNIQUE_INSTANCED_UNLIT = 0x69,
		TECHNIQUE_INSTANCED_EMISSIVE = 0x6A,
		TECHNIQUE_INSTANCED_EMISSIVE_DFOG = 0x6B,
		TECHNIQUE_INSTANCED_EMISSIVE_SHADOW = 0x6C,
		TECHNIQUE_INSTANCED_EMISSIVE_SHADOW_DFOG = 0x6D,
		TECHNIQUE_INSTANCED_LIT = 0x6E,
		TECHNIQUE_INSTANCED_LIT_DIR = 0x6F,
		TECHNIQUE_INSTANCED_LIT_DIR_SHADOW = 0x70,
		TECHNIQUE_INSTANCED_LIT_SPOT = 0x71,
		TECHNIQUE_INSTANCED_LIT_SPOT_SHADOW = 0x72,
		TECHNIQUE_INSTANCED_LIT_SPOT_SHADOW_CUCOLORIS = 0x73,
		TECHNIQUE_INSTANCED_LIT_OMNI = 0x74,
		TECHNIQUE_INSTANCED_LIT_OMNI_SHADOW = 0x75,
		TECHNIQUE_INSTANCED_LIT_DIR_SPOT = 0x76,
		TECHNIQUE_INSTANCED_LIT_DIR_SPOT_SHADOW = 0x77,
		TECHNIQUE_INSTANCED_LIT_DIR_SPOT_SHADOW_CUCOLORIS = 0x78,
		TECHNIQUE_INSTANCED_LIT_DIR_OMNI = 0x79,
		TECHNIQUE_INSTANCED_LIT_DIR_OMNI_SHADOW = 0x7A,
		TECHNIQUE_INSTANCED_LIT_DIR_SHADOW_SPOT = 0x7B,
		TECHNIQUE_INSTANCED_LIT_DIR_SHADOW_SPOT_SHADOW = 0x7C,
		TECHNIQUE_INSTANCED_LIT_DIR_SHADOW_SPOT_SHADOW_CUCOLORIS = 0x7D,
		TECHNIQUE_INSTANCED_LIT_DIR_SHADOW_OMNI = 0x7E,
		TECHNIQUE_INSTANCED_LIT_DIR_SHADOW_OMNI_SHADOW = 0x7F,
		TECHNIQUE_INSTANCED_LIT_SPOT_SPOT = 0x80,
		TECHNIQUE_INSTANCED_LIT_SPOT_SPOT_SHADOW = 0x81,
		TECHNIQUE_INSTANCED_LIT_SPOT_SPOT_SHADOW_CUCOLORIS = 0x82,
		TECHNIQUE_INSTANCED_LIT_SPOT_OMNI = 0x83,
		TECHNIQUE_INSTANCED_LIT_SPOT_OMNI_SHADOW = 0x84,
		TECHNIQUE_INSTANCED_LIT_SPOT_SHADOW_SPOT = 0x85,
		TECHNIQUE_INSTANCED_LIT_SPOT_SHADOW_SPOT_SHADOW = 0x86,
		TECHNIQUE_INSTANCED_LIT_SPOT_SHADOW_SPOT_SHADOW_CUCOLORIS = 0x87,
		TECHNIQUE_INSTANCED_LIT_SPOT_SHADOW_OMNI = 0x88,
		TECHNIQUE_INSTANCED_LIT_SPOT_SHADOW_OMNI_SHADOW = 0x89,
		TECHNIQUE_INSTANCED_LIT_SPOT_SHADOW_CUCOLORIS_SPOT = 0x8A,
		TECHNIQUE_INSTANCED_LIT_SPOT_SHADOW_CUCOLORIS_SPOT_SHADOW = 0x8B,
		TECHNIQUE_INSTANCED_LIT_SPOT_SHADOW_CUCOLORIS_SPOT_SHADOW_CUCOLORIS = 0x8C,
		TECHNIQUE_INSTANCED_LIT_SPOT_SHADOW_CUCOLORIS_OMNI = 0x8D,
		TECHNIQUE_INSTANCED_LIT_SPOT_SHADOW_CUCOLORIS_OMNI_SHADOW = 0x8E,
		TECHNIQUE_INSTANCED_LIT_OMNI_OMNI = 0x8F,
		TECHNIQUE_INSTANCED_LIT_OMNI_OMNI_SHADOW = 0x90,
		TECHNIQUE_INSTANCED_LIT_OMNI_SHADOW_OMNI = 0x91,
		TECHNIQUE_INSTANCED_LIT_OMNI_SHADOW_OMNI_SHADOW = 0x92,
		TECHNIQUE_INSTANCED_LIT_DYNAMIC_BRANCHING_CUCOLORIS = 0x93,
		TECHNIQUE_INSTANCED_LIT_SUN_DYNAMIC_BRANCHING_CUCOLORIS = 0x94,
		TECHNIQUE_INSTANCED_LIT_DYNAMIC_BRANCHING = 0x95,
		TECHNIQUE_INSTANCED_LIT_SUN_DYNAMIC_BRANCHING = 0x96,
		TECHNIQUE_INSTANCED_LIT_DFOG = 0x97,
		TECHNIQUE_INSTANCED_LIT_DIR_DFOG = 0x98,
		TECHNIQUE_INSTANCED_LIT_DIR_SHADOW_DFOG = 0x99,
		TECHNIQUE_INSTANCED_LIT_SPOT_DFOG = 0x9A,
		TECHNIQUE_INSTANCED_LIT_SPOT_SHADOW_DFOG = 0x9B,
		TECHNIQUE_INSTANCED_LIT_SPOT_SHADOW_CUCOLORIS_DFOG = 0x9C,
		TECHNIQUE_INSTANCED_LIT_OMNI_DFOG = 0x9D,
		TECHNIQUE_INSTANCED_LIT_OMNI_SHADOW_DFOG = 0x9E,
		TECHNIQUE_INSTANCED_LIT_DIR_SPOT_DFOG = 0x9F,
		TECHNIQUE_INSTANCED_LIT_DIR_SPOT_SHADOW_DFOG = 0xA0,
		TECHNIQUE_INSTANCED_LIT_DIR_SPOT_SHADOW_CUCOLORIS_DFOG = 0xA1,
		TECHNIQUE_INSTANCED_LIT_DIR_OMNI_DFOG = 0xA2,
		TECHNIQUE_INSTANCED_LIT_DIR_OMNI_SHADOW_DFOG = 0xA3,
		TECHNIQUE_INSTANCED_LIT_DIR_SHADOW_SPOT_DFOG = 0xA4,
		TECHNIQUE_INSTANCED_LIT_DIR_SHADOW_SPOT_SHADOW_DFOG = 0xA5,
		TECHNIQUE_INSTANCED_LIT_DIR_SHADOW_SPOT_SHADOW_CUCOLORIS_DFOG = 0xA6,
		TECHNIQUE_INSTANCED_LIT_DIR_SHADOW_OMNI_DFOG = 0xA7,
		TECHNIQUE_INSTANCED_LIT_DIR_SHADOW_OMNI_SHADOW_DFOG = 0xA8,
		TECHNIQUE_INSTANCED_LIT_SPOT_SPOT_DFOG = 0xA9,
		TECHNIQUE_INSTANCED_LIT_SPOT_SPOT_SHADOW_DFOG = 0xAA,
		TECHNIQUE_INSTANCED_LIT_SPOT_SPOT_SHADOW_CUCOLORIS_DFOG = 0xAB,
		TECHNIQUE_INSTANCED_LIT_SPOT_OMNI_DFOG = 0xAC,
		TECHNIQUE_INSTANCED_LIT_SPOT_OMNI_SHADOW_DFOG = 0xAD,
		TECHNIQUE_INSTANCED_LIT_SPOT_SHADOW_SPOT_DFOG = 0xAE,
		TECHNIQUE_INSTANCED_LIT_SPOT_SHADOW_SPOT_SHADOW_DFOG = 0xAF,
		TECHNIQUE_INSTANCED_LIT_SPOT_SHADOW_SPOT_SHADOW_CUCOLORIS_DFOG = 0xB0,
		TECHNIQUE_INSTANCED_LIT_SPOT_SHADOW_OMNI_DFOG = 0xB1,
		TECHNIQUE_INSTANCED_LIT_SPOT_SHADOW_OMNI_SHADOW_DFOG = 0xB2,
		TECHNIQUE_INSTANCED_LIT_SPOT_SHADOW_CUCOLORIS_SPOT_DFOG = 0xB3,
		TECHNIQUE_INSTANCED_LIT_SPOT_SHADOW_CUCOLORIS_SPOT_SHADOW_DFOG = 0xB4,
		TECHNIQUE_INSTANCED_LIT_SPOT_SHADOW_CUCOLORIS_SPOT_SHADOW_CUCOLORIS_DFOG = 0xB5,
		TECHNIQUE_INSTANCED_LIT_SPOT_SHADOW_CUCOLORIS_OMNI_DFOG = 0xB6,
		TECHNIQUE_INSTANCED_LIT_SPOT_SHADOW_CUCOLORIS_OMNI_SHADOW_DFOG = 0xB7,
		TECHNIQUE_INSTANCED_LIT_OMNI_OMNI_DFOG = 0xB8,
		TECHNIQUE_INSTANCED_LIT_OMNI_OMNI_SHADOW_DFOG = 0xB9,
		TECHNIQUE_INSTANCED_LIT_OMNI_SHADOW_OMNI_DFOG = 0xBA,
		TECHNIQUE_INSTANCED_LIT_OMNI_SHADOW_OMNI_SHADOW_DFOG = 0xBB,
		TECHNIQUE_INSTANCED_LIT_DYNAMIC_BRANCHING_CUCOLORIS_DFOG = 0xBC,
		TECHNIQUE_INSTANCED_LIT_SUN_DYNAMIC_BRANCHING_CUCOLORIS_DFOG = 0xBD,
		TECHNIQUE_INSTANCED_LIT_DYNAMIC_BRANCHING_DFOG = 0xBE,
		TECHNIQUE_INSTANCED_LIT_SUN_DYNAMIC_BRANCHING_DFOG = 0xBF,
		TECHNIQUE_INSTANCED_LIGHT_SPOT = 0xC0,
		TECHNIQUE_INSTANCED_LIGHT_OMNI = 0xC1,
		TECHNIQUE_INSTANCED_LIGHT_SPOT_SHADOW = 0xC2,
		TECHNIQUE_INSTANCED_LIGHT_SPOT_SHADOW_CUCOLORIS = 0xC3,
		TECHNIQUE_INSTANCED_FAKELIGHT_NORMAL = 0xC4,
		TECHNIQUE_INSTANCED_FAKELIGHT_VIEW = 0xC5,
		TECHNIQUE_INSTANCED_SUNLIGHT_PREVIEW = 0xC6,
		TECHNIQUE_INSTANCED_CASE_TEXTURE = 0xC7,
		TECHNIQUE_INSTANCED_WIREFRAME_SOLID = 0xC8,
		TECHNIQUE_INSTANCED_WIREFRAME_SHADED = 0xC9,
		TECHNIQUE_INSTANCED_THERMAL = 0xCA,
		TECHNIQUE_INSTANCED_VELOCITY_RIGID = 0xCB,
		TECHNIQUE_INSTANCED_VELOCITY_SKINNED = 0xCC,
		TECHNIQUE_INSTANCED_DEBUG_BUMPMAP = 0xCD,
		TECHNIQUE_SUBDIV_PATCH_DEPTH_PREPASS = 0xCE,
		TECHNIQUE_SUBDIV_PATCH_BUILD_SHADOWMAP_DEPTH = 0xCF,
		TECHNIQUE_SUBDIV_PATCH_UNLIT = 0xD0,
		TECHNIQUE_SUBDIV_PATCH_EMISSIVE = 0xD1,
		TECHNIQUE_SUBDIV_PATCH_EMISSIVE_DFOG = 0xD2,
		TECHNIQUE_SUBDIV_PATCH_EMISSIVE_SHADOW = 0xD3,
		TECHNIQUE_SUBDIV_PATCH_EMISSIVE_SHADOW_DFOG = 0xD4,
		TECHNIQUE_SUBDIV_PATCH_LIT = 0xD5,
		TECHNIQUE_SUBDIV_PATCH_LIT_DIR = 0xD6,
		TECHNIQUE_SUBDIV_PATCH_LIT_DIR_SHADOW = 0xD7,
		TECHNIQUE_SUBDIV_PATCH_LIT_SPOT = 0xD8,
		TECHNIQUE_SUBDIV_PATCH_LIT_SPOT_SHADOW = 0xD9,
		TECHNIQUE_SUBDIV_PATCH_LIT_SPOT_SHADOW_CUCOLORIS = 0xDA,
		TECHNIQUE_SUBDIV_PATCH_LIT_OMNI = 0xDB,
		TECHNIQUE_SUBDIV_PATCH_LIT_OMNI_SHADOW = 0xDC,
		TECHNIQUE_SUBDIV_PATCH_LIT_DIR_SPOT = 0xDD,
		TECHNIQUE_SUBDIV_PATCH_LIT_DIR_SPOT_SHADOW = 0xDE,
		TECHNIQUE_SUBDIV_PATCH_LIT_DIR_SPOT_SHADOW_CUCOLORIS = 0xDF,
		TECHNIQUE_SUBDIV_PATCH_LIT_DIR_OMNI = 0xE0,
		TECHNIQUE_SUBDIV_PATCH_LIT_DIR_OMNI_SHADOW = 0xE1,
		TECHNIQUE_SUBDIV_PATCH_LIT_DIR_SHADOW_SPOT = 0xE2,
		TECHNIQUE_SUBDIV_PATCH_LIT_DIR_SHADOW_SPOT_SHADOW = 0xE3,
		TECHNIQUE_SUBDIV_PATCH_LIT_DIR_SHADOW_SPOT_SHADOW_CUCOLORIS = 0xE4,
		TECHNIQUE_SUBDIV_PATCH_LIT_DIR_SHADOW_OMNI = 0xE5,
		TECHNIQUE_SUBDIV_PATCH_LIT_DIR_SHADOW_OMNI_SHADOW = 0xE6,
		TECHNIQUE_SUBDIV_PATCH_LIT_SPOT_SPOT = 0xE7,
		TECHNIQUE_SUBDIV_PATCH_LIT_SPOT_SPOT_SHADOW = 0xE8,
		TECHNIQUE_SUBDIV_PATCH_LIT_SPOT_SPOT_SHADOW_CUCOLORIS = 0xE9,
		TECHNIQUE_SUBDIV_PATCH_LIT_SPOT_OMNI = 0xEA,
		TECHNIQUE_SUBDIV_PATCH_LIT_SPOT_OMNI_SHADOW = 0xEB,
		TECHNIQUE_SUBDIV_PATCH_LIT_SPOT_SHADOW_SPOT = 0xEC,
		TECHNIQUE_SUBDIV_PATCH_LIT_SPOT_SHADOW_SPOT_SHADOW = 0xED,
		TECHNIQUE_SUBDIV_PATCH_LIT_SPOT_SHADOW_SPOT_SHADOW_CUCOLORIS = 0xEE,
		TECHNIQUE_SUBDIV_PATCH_LIT_SPOT_SHADOW_OMNI = 0xEF,
		TECHNIQUE_SUBDIV_PATCH_LIT_SPOT_SHADOW_OMNI_SHADOW = 0xF0,
		TECHNIQUE_SUBDIV_PATCH_LIT_SPOT_SHADOW_CUCOLORIS_SPOT = 0xF1,
		TECHNIQUE_SUBDIV_PATCH_LIT_SPOT_SHADOW_CUCOLORIS_SPOT_SHADOW = 0xF2,
		TECHNIQUE_SUBDIV_PATCH_LIT_SPOT_SHADOW_CUCOLORIS_SPOT_SHADOW_CUCOLORIS = 0xF3,
		TECHNIQUE_SUBDIV_PATCH_LIT_SPOT_SHADOW_CUCOLORIS_OMNI = 0xF4,
		TECHNIQUE_SUBDIV_PATCH_LIT_SPOT_SHADOW_CUCOLORIS_OMNI_SHADOW = 0xF5,
		TECHNIQUE_SUBDIV_PATCH_LIT_OMNI_OMNI = 0xF6,
		TECHNIQUE_SUBDIV_PATCH_LIT_OMNI_OMNI_SHADOW = 0xF7,
		TECHNIQUE_SUBDIV_PATCH_LIT_OMNI_SHADOW_OMNI = 0xF8,
		TECHNIQUE_SUBDIV_PATCH_LIT_OMNI_SHADOW_OMNI_SHADOW = 0xF9,
		TECHNIQUE_SUBDIV_PATCH_LIT_DYNAMIC_BRANCHING_CUCOLORIS = 0xFA,
		TECHNIQUE_SUBDIV_PATCH_LIT_SUN_DYNAMIC_BRANCHING_CUCOLORIS = 0xFB,
		TECHNIQUE_SUBDIV_PATCH_LIT_DYNAMIC_BRANCHING = 0xFC,
		TECHNIQUE_SUBDIV_PATCH_LIT_SUN_DYNAMIC_BRANCHING = 0xFD,
		TECHNIQUE_SUBDIV_PATCH_LIT_DFOG = 0xFE,
		TECHNIQUE_SUBDIV_PATCH_LIT_DIR_DFOG = 0xFF,
		TECHNIQUE_SUBDIV_PATCH_LIT_DIR_SHADOW_DFOG = 0x100,
		TECHNIQUE_SUBDIV_PATCH_LIT_SPOT_DFOG = 0x101,
		TECHNIQUE_SUBDIV_PATCH_LIT_SPOT_SHADOW_DFOG = 0x102,
		TECHNIQUE_SUBDIV_PATCH_LIT_SPOT_SHADOW_CUCOLORIS_DFOG = 0x103,
		TECHNIQUE_SUBDIV_PATCH_LIT_OMNI_DFOG = 0x104,
		TECHNIQUE_SUBDIV_PATCH_LIT_OMNI_SHADOW_DFOG = 0x105,
		TECHNIQUE_SUBDIV_PATCH_LIT_DIR_SPOT_DFOG = 0x106,
		TECHNIQUE_SUBDIV_PATCH_LIT_DIR_SPOT_SHADOW_DFOG = 0x107,
		TECHNIQUE_SUBDIV_PATCH_LIT_DIR_SPOT_SHADOW_CUCOLORIS_DFOG = 0x108,
		TECHNIQUE_SUBDIV_PATCH_LIT_DIR_OMNI_DFOG = 0x109,
		TECHNIQUE_SUBDIV_PATCH_LIT_DIR_OMNI_SHADOW_DFOG = 0x10A,
		TECHNIQUE_SUBDIV_PATCH_LIT_DIR_SHADOW_SPOT_DFOG = 0x10B,
		TECHNIQUE_SUBDIV_PATCH_LIT_DIR_SHADOW_SPOT_SHADOW_DFOG = 0x10C,
		TECHNIQUE_SUBDIV_PATCH_LIT_DIR_SHADOW_SPOT_SHADOW_CUCOLORIS_DFOG = 0x10D,
		TECHNIQUE_SUBDIV_PATCH_LIT_DIR_SHADOW_OMNI_DFOG = 0x10E,
		TECHNIQUE_SUBDIV_PATCH_LIT_DIR_SHADOW_OMNI_SHADOW_DFOG = 0x10F,
		TECHNIQUE_SUBDIV_PATCH_LIT_SPOT_SPOT_DFOG = 0x110,
		TECHNIQUE_SUBDIV_PATCH_LIT_SPOT_SPOT_SHADOW_DFOG = 0x111,
		TECHNIQUE_SUBDIV_PATCH_LIT_SPOT_SPOT_SHADOW_CUCOLORIS_DFOG = 0x112,
		TECHNIQUE_SUBDIV_PATCH_LIT_SPOT_OMNI_DFOG = 0x113,
		TECHNIQUE_SUBDIV_PATCH_LIT_SPOT_OMNI_SHADOW_DFOG = 0x114,
		TECHNIQUE_SUBDIV_PATCH_LIT_SPOT_SHADOW_SPOT_DFOG = 0x115,
		TECHNIQUE_SUBDIV_PATCH_LIT_SPOT_SHADOW_SPOT_SHADOW_DFOG = 0x116,
		TECHNIQUE_SUBDIV_PATCH_LIT_SPOT_SHADOW_SPOT_SHADOW_CUCOLORIS_DFOG = 0x117,
		TECHNIQUE_SUBDIV_PATCH_LIT_SPOT_SHADOW_OMNI_DFOG = 0x118,
		TECHNIQUE_SUBDIV_PATCH_LIT_SPOT_SHADOW_OMNI_SHADOW_DFOG = 0x119,
		TECHNIQUE_SUBDIV_PATCH_LIT_SPOT_SHADOW_CUCOLORIS_SPOT_DFOG = 0x11A,
		TECHNIQUE_SUBDIV_PATCH_LIT_SPOT_SHADOW_CUCOLORIS_SPOT_SHADOW_DFOG = 0x11B,
		TECHNIQUE_SUBDIV_PATCH_LIT_SPOT_SHADOW_CUCOLORIS_SPOT_SHADOW_CUCOLORIS_DFOG = 0x11C,
		TECHNIQUE_SUBDIV_PATCH_LIT_SPOT_SHADOW_CUCOLORIS_OMNI_DFOG = 0x11D,
		TECHNIQUE_SUBDIV_PATCH_LIT_SPOT_SHADOW_CUCOLORIS_OMNI_SHADOW_DFOG = 0x11E,
		TECHNIQUE_SUBDIV_PATCH_LIT_OMNI_OMNI_DFOG = 0x11F,
		TECHNIQUE_SUBDIV_PATCH_LIT_OMNI_OMNI_SHADOW_DFOG = 0x120,
		TECHNIQUE_SUBDIV_PATCH_LIT_OMNI_SHADOW_OMNI_DFOG = 0x121,
		TECHNIQUE_SUBDIV_PATCH_LIT_OMNI_SHADOW_OMNI_SHADOW_DFOG = 0x122,
		TECHNIQUE_SUBDIV_PATCH_LIT_DYNAMIC_BRANCHING_CUCOLORIS_DFOG = 0x123,
		TECHNIQUE_SUBDIV_PATCH_LIT_SUN_DYNAMIC_BRANCHING_CUCOLORIS_DFOG = 0x124,
		TECHNIQUE_SUBDIV_PATCH_LIT_DYNAMIC_BRANCHING_DFOG = 0x125,
		TECHNIQUE_SUBDIV_PATCH_LIT_SUN_DYNAMIC_BRANCHING_DFOG = 0x126,
		TECHNIQUE_SUBDIV_PATCH_LIGHT_SPOT = 0x127,
		TECHNIQUE_SUBDIV_PATCH_LIGHT_OMNI = 0x128,
		TECHNIQUE_SUBDIV_PATCH_LIGHT_SPOT_SHADOW = 0x129,
		TECHNIQUE_SUBDIV_PATCH_LIGHT_SPOT_SHADOW_CUCOLORIS = 0x12A,
		TECHNIQUE_SUBDIV_PATCH_FAKELIGHT_NORMAL = 0x12B,
		TECHNIQUE_SUBDIV_PATCH_FAKELIGHT_VIEW = 0x12C,
		TECHNIQUE_SUBDIV_PATCH_SUNLIGHT_PREVIEW = 0x12D,
		TECHNIQUE_SUBDIV_PATCH_CASE_TEXTURE = 0x12E,
		TECHNIQUE_SUBDIV_PATCH_WIREFRAME_SOLID = 0x12F,
		TECHNIQUE_SUBDIV_PATCH_WIREFRAME_SHADED = 0x130,
		TECHNIQUE_SUBDIV_PATCH_THERMAL = 0x131,
		TECHNIQUE_SUBDIV_PATCH_VELOCITY_RIGID = 0x132,
		TECHNIQUE_SUBDIV_PATCH_VELOCITY_SKINNED = 0x133,
		TECHNIQUE_SUBDIV_PATCH_DEBUG_BUMPMAP = 0x134,
		TECHNIQUE_NO_DISPLACEMENT_DEPTH_PREPASS = 0x135,
		TECHNIQUE_NO_DISPLACEMENT_BUILD_SHADOWMAP_DEPTH = 0x136,
		TECHNIQUE_NO_DISPLACEMENT_UNLIT = 0x137,
		TECHNIQUE_NO_DISPLACEMENT_EMISSIVE = 0x138,
		TECHNIQUE_NO_DISPLACEMENT_EMISSIVE_DFOG = 0x139,
		TECHNIQUE_NO_DISPLACEMENT_EMISSIVE_SHADOW = 0x13A,
		TECHNIQUE_NO_DISPLACEMENT_EMISSIVE_SHADOW_DFOG = 0x13B,
		TECHNIQUE_NO_DISPLACEMENT_LIT = 0x13C,
		TECHNIQUE_NO_DISPLACEMENT_LIT_DIR = 0x13D,
		TECHNIQUE_NO_DISPLACEMENT_LIT_DIR_SHADOW = 0x13E,
		TECHNIQUE_NO_DISPLACEMENT_LIT_SPOT = 0x13F,
		TECHNIQUE_NO_DISPLACEMENT_LIT_SPOT_SHADOW = 0x140,
		TECHNIQUE_NO_DISPLACEMENT_LIT_SPOT_SHADOW_CUCOLORIS = 0x141,
		TECHNIQUE_NO_DISPLACEMENT_LIT_OMNI = 0x142,
		TECHNIQUE_NO_DISPLACEMENT_LIT_OMNI_SHADOW = 0x143,
		TECHNIQUE_NO_DISPLACEMENT_LIT_DIR_SPOT = 0x144,
		TECHNIQUE_NO_DISPLACEMENT_LIT_DIR_SPOT_SHADOW = 0x145,
		TECHNIQUE_NO_DISPLACEMENT_LIT_DIR_SPOT_SHADOW_CUCOLORIS = 0x146,
		TECHNIQUE_NO_DISPLACEMENT_LIT_DIR_OMNI = 0x147,
		TECHNIQUE_NO_DISPLACEMENT_LIT_DIR_OMNI_SHADOW = 0x148,
		TECHNIQUE_NO_DISPLACEMENT_LIT_DIR_SHADOW_SPOT = 0x149,
		TECHNIQUE_NO_DISPLACEMENT_LIT_DIR_SHADOW_SPOT_SHADOW = 0x14A,
		TECHNIQUE_NO_DISPLACEMENT_LIT_DIR_SHADOW_SPOT_SHADOW_CUCOLORIS = 0x14B,
		TECHNIQUE_NO_DISPLACEMENT_LIT_DIR_SHADOW_OMNI = 0x14C,
		TECHNIQUE_NO_DISPLACEMENT_LIT_DIR_SHADOW_OMNI_SHADOW = 0x14D,
		TECHNIQUE_NO_DISPLACEMENT_LIT_SPOT_SPOT = 0x14E,
		TECHNIQUE_NO_DISPLACEMENT_LIT_SPOT_SPOT_SHADOW = 0x14F,
		TECHNIQUE_NO_DISPLACEMENT_LIT_SPOT_SPOT_SHADOW_CUCOLORIS = 0x150,
		TECHNIQUE_NO_DISPLACEMENT_LIT_SPOT_OMNI = 0x151,
		TECHNIQUE_NO_DISPLACEMENT_LIT_SPOT_OMNI_SHADOW = 0x152,
		TECHNIQUE_NO_DISPLACEMENT_LIT_SPOT_SHADOW_SPOT = 0x153,
		TECHNIQUE_NO_DISPLACEMENT_LIT_SPOT_SHADOW_SPOT_SHADOW = 0x154,
		TECHNIQUE_NO_DISPLACEMENT_LIT_SPOT_SHADOW_SPOT_SHADOW_CUCOLORIS = 0x155,
		TECHNIQUE_NO_DISPLACEMENT_LIT_SPOT_SHADOW_OMNI = 0x156,
		TECHNIQUE_NO_DISPLACEMENT_LIT_SPOT_SHADOW_OMNI_SHADOW = 0x157,
		TECHNIQUE_NO_DISPLACEMENT_LIT_SPOT_SHADOW_CUCOLORIS_SPOT = 0x158,
		TECHNIQUE_NO_DISPLACEMENT_LIT_SPOT_SHADOW_CUCOLORIS_SPOT_SHADOW = 0x159,
		TECHNIQUE_NO_DISPLACEMENT_LIT_SPOT_SHADOW_CUCOLORIS_SPOT_SHADOW_CUCOLORIS = 0x15A,
		TECHNIQUE_NO_DISPLACEMENT_LIT_SPOT_SHADOW_CUCOLORIS_OMNI = 0x15B,
		TECHNIQUE_NO_DISPLACEMENT_LIT_SPOT_SHADOW_CUCOLORIS_OMNI_SHADOW = 0x15C,
		TECHNIQUE_NO_DISPLACEMENT_LIT_OMNI_OMNI = 0x15D,
		TECHNIQUE_NO_DISPLACEMENT_LIT_OMNI_OMNI_SHADOW = 0x15E,
		TECHNIQUE_NO_DISPLACEMENT_LIT_OMNI_SHADOW_OMNI = 0x15F,
		TECHNIQUE_NO_DISPLACEMENT_LIT_OMNI_SHADOW_OMNI_SHADOW = 0x160,
		TECHNIQUE_NO_DISPLACEMENT_LIT_DYNAMIC_BRANCHING_CUCOLORIS = 0x161,
		TECHNIQUE_NO_DISPLACEMENT_LIT_SUN_DYNAMIC_BRANCHING_CUCOLORIS = 0x162,
		TECHNIQUE_NO_DISPLACEMENT_LIT_DYNAMIC_BRANCHING = 0x163,
		TECHNIQUE_NO_DISPLACEMENT_LIT_SUN_DYNAMIC_BRANCHING = 0x164,
		TECHNIQUE_NO_DISPLACEMENT_LIT_DFOG = 0x165,
		TECHNIQUE_NO_DISPLACEMENT_LIT_DIR_DFOG = 0x166,
		TECHNIQUE_NO_DISPLACEMENT_LIT_DIR_SHADOW_DFOG = 0x167,
		TECHNIQUE_NO_DISPLACEMENT_LIT_SPOT_DFOG = 0x168,
		TECHNIQUE_NO_DISPLACEMENT_LIT_SPOT_SHADOW_DFOG = 0x169,
		TECHNIQUE_NO_DISPLACEMENT_LIT_SPOT_SHADOW_CUCOLORIS_DFOG = 0x16A,
		TECHNIQUE_NO_DISPLACEMENT_LIT_OMNI_DFOG = 0x16B,
		TECHNIQUE_NO_DISPLACEMENT_LIT_OMNI_SHADOW_DFOG = 0x16C,
		TECHNIQUE_NO_DISPLACEMENT_LIT_DIR_SPOT_DFOG = 0x16D,
		TECHNIQUE_NO_DISPLACEMENT_LIT_DIR_SPOT_SHADOW_DFOG = 0x16E,
		TECHNIQUE_NO_DISPLACEMENT_LIT_DIR_SPOT_SHADOW_CUCOLORIS_DFOG = 0x16F,
		TECHNIQUE_NO_DISPLACEMENT_LIT_DIR_OMNI_DFOG = 0x170,
		TECHNIQUE_NO_DISPLACEMENT_LIT_DIR_OMNI_SHADOW_DFOG = 0x171,
		TECHNIQUE_NO_DISPLACEMENT_LIT_DIR_SHADOW_SPOT_DFOG = 0x172,
		TECHNIQUE_NO_DISPLACEMENT_LIT_DIR_SHADOW_SPOT_SHADOW_DFOG = 0x173,
		TECHNIQUE_NO_DISPLACEMENT_LIT_DIR_SHADOW_SPOT_SHADOW_CUCOLORIS_DFOG = 0x174,
		TECHNIQUE_NO_DISPLACEMENT_LIT_DIR_SHADOW_OMNI_DFOG = 0x175,
		TECHNIQUE_NO_DISPLACEMENT_LIT_DIR_SHADOW_OMNI_SHADOW_DFOG = 0x176,
		TECHNIQUE_NO_DISPLACEMENT_LIT_SPOT_SPOT_DFOG = 0x177,
		TECHNIQUE_NO_DISPLACEMENT_LIT_SPOT_SPOT_SHADOW_DFOG = 0x178,
		TECHNIQUE_NO_DISPLACEMENT_LIT_SPOT_SPOT_SHADOW_CUCOLORIS_DFOG = 0x179,
		TECHNIQUE_NO_DISPLACEMENT_LIT_SPOT_OMNI_DFOG = 0x17A,
		TECHNIQUE_NO_DISPLACEMENT_LIT_SPOT_OMNI_SHADOW_DFOG = 0x17B,
		TECHNIQUE_NO_DISPLACEMENT_LIT_SPOT_SHADOW_SPOT_DFOG = 0x17C,
		TECHNIQUE_NO_DISPLACEMENT_LIT_SPOT_SHADOW_SPOT_SHADOW_DFOG = 0x17D,
		TECHNIQUE_NO_DISPLACEMENT_LIT_SPOT_SHADOW_SPOT_SHADOW_CUCOLORIS_DFOG = 0x17E,
		TECHNIQUE_NO_DISPLACEMENT_LIT_SPOT_SHADOW_OMNI_DFOG = 0x17F,
		TECHNIQUE_NO_DISPLACEMENT_LIT_SPOT_SHADOW_OMNI_SHADOW_DFOG = 0x180,
		TECHNIQUE_NO_DISPLACEMENT_LIT_SPOT_SHADOW_CUCOLORIS_SPOT_DFOG = 0x181,
		TECHNIQUE_NO_DISPLACEMENT_LIT_SPOT_SHADOW_CUCOLORIS_SPOT_SHADOW_DFOG = 0x182,
		TECHNIQUE_NO_DISPLACEMENT_LIT_SPOT_SHADOW_CUCOLORIS_SPOT_SHADOW_CUCOLORIS_DFOG = 0x183,
		TECHNIQUE_NO_DISPLACEMENT_LIT_SPOT_SHADOW_CUCOLORIS_OMNI_DFOG = 0x184,
		TECHNIQUE_NO_DISPLACEMENT_LIT_SPOT_SHADOW_CUCOLORIS_OMNI_SHADOW_DFOG = 0x185,
		TECHNIQUE_NO_DISPLACEMENT_LIT_OMNI_OMNI_DFOG = 0x186,
		TECHNIQUE_NO_DISPLACEMENT_LIT_OMNI_OMNI_SHADOW_DFOG = 0x187,
		TECHNIQUE_NO_DISPLACEMENT_LIT_OMNI_SHADOW_OMNI_DFOG = 0x188,
		TECHNIQUE_NO_DISPLACEMENT_LIT_OMNI_SHADOW_OMNI_SHADOW_DFOG = 0x189,
		TECHNIQUE_NO_DISPLACEMENT_LIT_DYNAMIC_BRANCHING_CUCOLORIS_DFOG = 0x18A,
		TECHNIQUE_NO_DISPLACEMENT_LIT_SUN_DYNAMIC_BRANCHING_CUCOLORIS_DFOG = 0x18B,
		TECHNIQUE_NO_DISPLACEMENT_LIT_DYNAMIC_BRANCHING_DFOG = 0x18C,
		TECHNIQUE_NO_DISPLACEMENT_LIT_SUN_DYNAMIC_BRANCHING_DFOG = 0x18D,
		TECHNIQUE_NO_DISPLACEMENT_LIGHT_SPOT = 0x18E,
		TECHNIQUE_NO_DISPLACEMENT_LIGHT_OMNI = 0x18F,
		TECHNIQUE_NO_DISPLACEMENT_LIGHT_SPOT_SHADOW = 0x190,
		TECHNIQUE_NO_DISPLACEMENT_LIGHT_SPOT_SHADOW_CUCOLORIS = 0x191,
		TECHNIQUE_NO_DISPLACEMENT_FAKELIGHT_NORMAL = 0x192,
		TECHNIQUE_NO_DISPLACEMENT_FAKELIGHT_VIEW = 0x193,
		TECHNIQUE_NO_DISPLACEMENT_SUNLIGHT_PREVIEW = 0x194,
		TECHNIQUE_NO_DISPLACEMENT_CASE_TEXTURE = 0x195,
		TECHNIQUE_NO_DISPLACEMENT_WIREFRAME_SOLID = 0x196,
		TECHNIQUE_NO_DISPLACEMENT_WIREFRAME_SHADED = 0x197,
		TECHNIQUE_NO_DISPLACEMENT_THERMAL = 0x198,
		TECHNIQUE_NO_DISPLACEMENT_VELOCITY_RIGID = 0x199,
		TECHNIQUE_NO_DISPLACEMENT_VELOCITY_SKINNED = 0x19A,
		TECHNIQUE_NO_DISPLACEMENT_DEBUG_BUMPMAP = 0x19B,
		TECHNIQUE_COUNT = 412,
		TECHNIQUE_TOTAL_COUNT = 413,
		TECHNIQUE_NONE = 414,
	};

	enum MaterialGameFlags : std::uint8_t
	{
		MTL_GAMEFLAG_NONE = 0x0,
	};

	enum MaterialSortKey : std::uint8_t
	{

	};

	enum SurfaceTypeBits : std::uint32_t
	{

	};

	struct MaterialInfo
	{
		const char* name; // 0
		unsigned char gameFlags; // 8
		unsigned char sortKey; // 9
		unsigned char textureAtlasRowCount; // 10
		unsigned char textureAtlasColumnCount; // 11
		unsigned char textureAtlasFrameBlend; // 12
		unsigned char textureAtlasAsArray; /// 13
		unsigned char renderFlags; // 14
		GfxDrawSurf drawSurf; // 16
		unsigned int surfaceTypeBits; // 32
		unsigned short hashIndex; // 36
	};

	enum MaterialConstSource : std::int32_t
	{
		CONST_SRC_CODE_LIGHT_POSITION,
		CONST_SRC_CODE_LIGHT_DIFFUSE,
		CONST_SRC_CODE_LIGHT_SPECULAR,
		CONST_SRC_CODE_LIGHT_SPOTDIR,
		CONST_SRC_CODE_LIGHT_SPOTFACTORS,
		CONST_SRC_CODE_LIGHT_FALLOFF_PLACEMENT,
		CONST_SRC_CODE_LIGHT_CUCOLORIS_ANIM,
		CONST_SRC_CODE_LIGHT_POSITION1,
		CONST_SRC_CODE_LIGHT_DIFFUSE1,
		CONST_SRC_CODE_LIGHT_SPECULAR1,
		CONST_SRC_CODE_LIGHT_SPOTDIR1,
		CONST_SRC_CODE_LIGHT_SPOTFACTORS1,
		CONST_SRC_CODE_LIGHT_FALLOFF_PLACEMENT1,
		CONST_SRC_CODE_LIGHT_CUCOLORIS_ANIM1,
		CONST_SRC_CODE_LIGHT_POSITION2,
		CONST_SRC_CODE_LIGHT_DIFFUSE2,
		CONST_SRC_CODE_LIGHT_SPECULAR2,
		CONST_SRC_CODE_LIGHT_SPOTDIR2,
		CONST_SRC_CODE_LIGHT_SPOTFACTORS2,
		CONST_SRC_CODE_LIGHT_FALLOFF_PLACEMENT2,
		CONST_SRC_CODE_LIGHT_CUCOLORIS_ANIM2,
		CONST_SRC_CODE_LIGHT_POSITION3,
		CONST_SRC_CODE_LIGHT_DIFFUSE3,
		CONST_SRC_CODE_LIGHT_SPECULAR3,
		CONST_SRC_CODE_LIGHT_SPOTDIR3,
		CONST_SRC_CODE_LIGHT_SPOTFACTORS3,
		CONST_SRC_CODE_LIGHT_FALLOFF_PLACEMENT3,
		CONST_SRC_CODE_LIGHT_CUCOLORIS_ANIM3,
		CONST_SRC_CODE_LIGHT_POSITION_DB_ARRAY_0,
		CONST_SRC_CODE_LIGHT_POSITION_DB_ARRAY_1,
		CONST_SRC_CODE_LIGHT_POSITION_DB_ARRAY_2,
		CONST_SRC_CODE_LIGHT_POSITION_DB_ARRAY_3,
		CONST_SRC_CODE_LIGHT_DIFFUSE_DB_ARRAY_0,
		CONST_SRC_CODE_LIGHT_DIFFUSE_DB_ARRAY_1,
		CONST_SRC_CODE_LIGHT_DIFFUSE_DB_ARRAY_2,
		CONST_SRC_CODE_LIGHT_DIFFUSE_DB_ARRAY_3,
		CONST_SRC_CODE_LIGHT_SPECULAR_DB_ARRAY_0,
		CONST_SRC_CODE_LIGHT_SPECULAR_DB_ARRAY_1,
		CONST_SRC_CODE_LIGHT_SPECULAR_DB_ARRAY_2,
		CONST_SRC_CODE_LIGHT_SPECULAR_DB_ARRAY_3,
		CONST_SRC_CODE_LIGHT_SPOTDIR_DB_ARRAY_0,
		CONST_SRC_CODE_LIGHT_SPOTDIR_DB_ARRAY_1,
		CONST_SRC_CODE_LIGHT_SPOTDIR_DB_ARRAY_2,
		CONST_SRC_CODE_LIGHT_SPOTDIR_DB_ARRAY_3,
		CONST_SRC_CODE_LIGHT_SPOTFACTORS_DB_ARRAY_0,
		CONST_SRC_CODE_LIGHT_SPOTFACTORS_DB_ARRAY_1,
		CONST_SRC_CODE_LIGHT_SPOTFACTORS_DB_ARRAY_2,
		CONST_SRC_CODE_LIGHT_SPOTFACTORS_DB_ARRAY_3,
		CONST_SRC_CODE_LIGHT_CUCOLORIS_ANIM_DB_ARRAY_0,
		CONST_SRC_CODE_LIGHT_CUCOLORIS_ANIM_DB_ARRAY_1,
		CONST_SRC_CODE_LIGHT_CUCOLORIS_ANIM_DB_ARRAY_2,
		CONST_SRC_CODE_LIGHT_CUCOLORIS_ANIM_DB_ARRAY_3,
		CONST_SRC_CODE_LIGHT_FALLOFF_PLACEMENT_DB_ARRAY_0,
		CONST_SRC_CODE_LIGHT_FALLOFF_PLACEMENT_DB_ARRAY_1,
		CONST_SRC_CODE_LIGHT_FALLOFF_PLACEMENT_DB_ARRAY_2,
		CONST_SRC_CODE_LIGHT_FALLOFF_PLACEMENT_DB_ARRAY_3,
		CONST_SRC_CODE_LIGHT_DYN_COUNT,
		CONST_SRC_CODE_LIGHT_DYN_TYPES,
		CONST_SRC_CODE_LIGHT_DYN_SHADOW_TYPES,
		CONST_SRC_CODE_PARTICLE_CLOUD_COLOR,
		CONST_SRC_CODE_GAMETIME,
		CONST_SRC_CODE_GENERIC_MATERIAL_DATA,
		CONST_SRC_CODE_EYEOFFSET,
		CONST_SRC_CODE_MODEL_MOTIONBLUR_VELOCITY_PARMS,
		CONST_SRC_CODE_HUD_OUTLINE_PARMS,
		CONST_SRC_CODE_POSTFX_CONTROL0,
		CONST_SRC_CODE_POSTFX_CONTROL1,
		CONST_SRC_CODE_POSTFX_CONTROL2,
		CONST_SRC_CODE_POSTFX_CONTROL3,
		CONST_SRC_CODE_POSTFX_CONTROL4,
		CONST_SRC_CODE_POSTFX_CONTROL5,
		CONST_SRC_CODE_POSTFX_CONTROL6,
		CONST_SRC_CODE_POSTFX_CONTROL7,
		CONST_SRC_CODE_POSTFX_CONTROL8,
		CONST_SRC_CODE_POSTFX_CONTROL9,
		CONST_SRC_CODE_POSTFX_CONTROLA,
		CONST_SRC_CODE_POSTFX_CONTROLB,
		CONST_SRC_CODE_POSTFX_CONTROLC,
		CONST_SRC_CODE_POSTFX_CONTROLD,
		CONST_SRC_CODE_POSTFX_CONTROLE,
		CONST_SRC_CODE_POSTFX_CONTROLF,
		CONST_SRC_CODE_FILTER_TAP_0,
		CONST_SRC_CODE_FILTER_TAP_1,
		CONST_SRC_CODE_FILTER_TAP_2,
		CONST_SRC_CODE_FILTER_TAP_3,
		CONST_SRC_CODE_FILTER_TAP_4,
		CONST_SRC_CODE_FILTER_TAP_5,
		CONST_SRC_CODE_FILTER_TAP_6,
		CONST_SRC_CODE_FILTER_TAP_7,
		CONST_SRC_CODE_FILTER_TAP_8,
		CONST_SRC_CODE_FILTER_TAP_9,
		CONST_SRC_CODE_FILTER_TAP_10,
		CONST_SRC_CODE_FILTER_TAP_11,
		CONST_SRC_CODE_COLOR_MATRIX_R,
		CONST_SRC_CODE_COLOR_MATRIX_G,
		CONST_SRC_CODE_COLOR_MATRIX_B,
		CONST_SRC_CODE_RENDER_TARGET_SIZE,
		CONST_SRC_CODE_RENDER_SOURCE_SIZE,
		CONST_SRC_CODE_BLOOM_HQ_RADIUS,
		CONST_SRC_CODE_BLOOM_HQ_METERING_SENSITIVITY,
		CONST_SRC_CODE_BLOOM_HQ_IRIS_PARAMS,
		CONST_SRC_CODE_BLOOM_HQ_FALLOFF_1,
		CONST_SRC_CODE_BLOOM_HQ_FALLOFF_2,
		CONST_SRC_CODE_FXAA_RCPFRAMEOPT,
		CONST_SRC_CODE_VOLUME_LIGHT_SCATTER_1,
		CONST_SRC_CODE_VOLUME_LIGHT_SCATTER_2,
		CONST_SRC_CODE_VOLUME_LIGHT_SCATTER_3,
		CONST_SRC_CODE_MODEL_LIGHTMAP_PARAMS,
		CONST_SRC_CODE_AVG_LUMINANCE_PARAMS,
		CONST_SRC_CODE_SSAO_POWER_BB_SHARPNESS_STEP,
		CONST_SRC_CODE_SSAO_COLOR_COEFF,
		CONST_SRC_CODE_SSAO_FALLOFF_DEPTH_SCALE,
		CONST_SRC_CODE_SSAO_UV_TO_ROT_SCALE_AND_FADE,
		CONST_SRC_CODE_SSAO_SAMPLE_MAT_SCALE,
		CONST_SRC_CODE_SSAO_DEPTH_OFFSET_REJECT,
		CONST_SRC_CODE_LIT2D_LIGHTDIRX2,
		CONST_SRC_CODE_LIT2D_SPECHALFANGLEDIRX2,
		CONST_SRC_CODE_LIT2D_AMBIENTCOLOR,
		CONST_SRC_CODE_LIT2D_DIFFUSECOLOR,
		CONST_SRC_CODE_LIT2D_SPECCOLOR_SPECEXPONENT,
		CONST_SRC_CODE_LIT2D_ADDITIVECOLOR,
		CONST_SRC_CODE_LIT2D_BLOODSPATTER_AMBIENTCOLOR,
		CONST_SRC_CODE_LIT2D_BLOODSPATTER_DIFFUSECOLOR,
		CONST_SRC_CODE_LIT2D_BLOODSPATTER_SPECCOLOR_SPECEXPONENT,
		CONST_SRC_CODE_LIT2D_BLOODSPATTER_ADDITIVECOLOR,
		CONST_SRC_CODE_DOF_EQUATION_VIEWMODEL_AND_FAR_BLUR,
		CONST_SRC_CODE_DOF_EQUATION_SCENE,
		CONST_SRC_CODE_DOF_LERP_SCALE,
		CONST_SRC_CODE_DOF_LERP_BIAS,
		CONST_SRC_CODE_DOF_ROW_DELTA,
		CONST_SRC_CODE_MOTION_MATRIX_X,
		CONST_SRC_CODE_MOTION_MATRIX_Y,
		CONST_SRC_CODE_MOTION_MATRIX_W,
		CONST_SRC_CODE_SSR_PREV_FRAME_VIEWPROJECTION_MATRIX_R0,
		CONST_SRC_CODE_SSR_PREV_FRAME_VIEWPROJECTION_MATRIX_R1,
		CONST_SRC_CODE_SSR_PREV_FRAME_VIEWPROJECTION_MATRIX_R2,
		CONST_SRC_CODE_SSR_PREV_FRAME_VIEWPROJECTION_MATRIX_R3,
		CONST_SRC_CODE_PREV_EYEPOSITION_TRANSFORM,
		CONST_SRC_CODE_SCREEN_SPACE_REFLECTION_FADE,
		CONST_SRC_CODE_CLIP_SPACE_LOOKUP_SCALE_AND_OFFSET,
		CONST_SRC_CODE_SSR_CLIP_TO_FADE_SCALE_OFFSET_PS,
		CONST_SRC_CODE_MSAA_ALPHA_TEST_OFFSETS_PS,
		CONST_SRC_CODE_DISTORTION_SAMPLE_LIMITS_PS,
		CONST_SRC_CODE_SCOPE_SAMPLE_LIMITS_PS,
		CONST_SRC_CODE_MB_UV_TO_PREV_SCALED_CLIP_MAT_C0_PS,
		CONST_SRC_CODE_MB_UV_TO_PREV_SCALED_CLIP_MAT_C1_PS,
		CONST_SRC_CODE_MB_UV_TO_PREV_SCALED_CLIP_MAT_C3_PS,
		CONST_SRC_CODE_PREV_FRAME_VIEWPROJECTION_MATRIX_R0,
		CONST_SRC_CODE_PREV_FRAME_VIEWPROJECTION_MATRIX_R1,
		CONST_SRC_CODE_PREV_FRAME_VIEWPROJECTION_MATRIX_R2,
		CONST_SRC_CODE_PREV_FRAME_VIEWPROJECTION_MATRIX_R3,
		CONST_SRC_CODE_SCENE_EYEOFFSET,
		CONST_SRC_CODE_PREV_FRAME_EYEOFFSET,
		CONST_SRC_CODE_MOTION_BLUR_HQ_PARAMS,
		CONST_SRC_CODE_MOTION_BLUR_HQ_TILE_MAX_PARAMS,
		CONST_SRC_CODE_MOTION_BLUR_HQ_DECODE_SCALE_BIAS,
		CONST_SRC_CODE_STATIC_MOTIONBLUR_VELOCITY_PARMS,
		CONST_SRC_CODE_SHADOWMAP_SWITCH_PARTITION,
		CONST_SRC_CODE_SHADOWMAP_SCALE,
		CONST_SRC_CODE_ZNEAR,
		CONST_SRC_CODE_LIGHTING_LOOKUP_SCALE,
		CONST_SRC_CODE_INV_SCENE_PROJECTION,
		CONST_SRC_CODE_RIM_LIGHT_0_DIR,
		CONST_SRC_CODE_RIM_LIGHT_0_COLOR,
		CONST_SRC_CODE_RIM_LIGHT_1_DIR,
		CONST_SRC_CODE_RIM_LIGHT_1_COLOR,
		CONST_SRC_CODE_RIM_LIGHT_TECHNIQUE,
		CONST_SCR_CODE_HDR_SKY_INTENSITY,
		CONST_SRC_CODE_DEBUG_BUMPMAP,
		CONST_SRC_CODE_MATERIAL_COLOR,
		CONST_SRC_CODE_FOG,
		CONST_SRC_CODE_FOG_COLOR_LINEAR,
		CONST_SRC_CODE_FOG_COLOR_GAMMA,
		CONST_SRC_CODE_FOG_SUN_CONSTS,
		CONST_SRC_CODE_FOG_SUN_COLOR_LINEAR,
		CONST_SRC_CODE_FOG_SUN_COLOR_GAMMA,
		CONST_SRC_CODE_FOG_SUN_DIR,
		CONST_SRC_CODE_FOG_HEIGHT,
		CONST_SRC_CODE_FOG_SKY_DIR,
		CONST_SRC_CODE_FOG_DEPTHHACK,
		CONST_SRC_CODE_GLOW_SETUP,
		CONST_SRC_CODE_GLOW_APPLY,
		CONST_SRC_CODE_GLOW_SETUP_ALT_COLOR_SCALE,
		CONST_SRC_CODE_COLOR_BIAS,
		CONST_SRC_CODE_COLOR_TINT_BASE,
		CONST_SRC_CODE_COLOR_TINT_DELTA,
		CONST_SRC_CODE_COLOR_TINT_QUADRATIC_DELTA,
		CONST_SRC_CODE_MCOLOR_BIAS_AND_RANGE1,
		CONST_SRC_CODE_MCOLOR_CONTRAST_SCALE1,
		CONST_SRC_CODE_MCOLOR_CONTRAST_POW_AND_SAT1,
		CONST_SRC_CODE_MCOLOR_BIAS2_AND_RANGE_SCALE,
		CONST_SRC_CODE_MCOLOR_CONTRAST_SCALE2,
		CONST_SRC_CODE_MCOLOR_CONTRAST_POW_AND_SAT2,
		CONST_SRC_CODE_COLORIZATION_POWER_AND_DESATURATION,
		CONST_SRC_CODE_COLORIZATION_SCALE,
		CONST_SRC_CODE_COLORIZATION_BIAS,
		CONST_SRC_CODE_COLORIZATION_POWER_AND_DESATURATION_ARRAY,
		CONST_SRC_CODE_COLORIZATION_SCALE_ARRAY,
		CONST_SRC_CODE_COLORIZATION_BIAS_ARRAY,
		CONST_SRC_CODE_COLORIZATION_DEPTH_SCALE_AND_BIAS,
		CONST_SRC_CODE_COLORIZATION_POWER_AND_DESATURATION_ALTERNATE,
		CONST_SRC_CODE_COLORIZATION_SCALE_ALTERNATE,
		CONST_SRC_CODE_COLORIZATION_BIAS_ALTERNATE,
		CONST_SRC_CODE_COLORIZATION_POWER_AND_DESATURATION_ALTERNATE_ARRAY,
		CONST_SRC_CODE_COLORIZATION_SCALE_ALTERNATE_ARRAY,
		CONST_SRC_CODE_COLORIZATION_BIAS_ALTERNATE_ARRAY,
		CONST_SRC_CODE_COLORIZATION_LOW_AND_HIGH_END_POINTS,
		CONST_SRC_CODE_COLORIZATION_MID_END_POINTS,
		CONST_SRC_CODE_COLORIZATION_POWER_AND_DESATURATION_LOW,
		CONST_SRC_CODE_COLORIZATION_SCALE_LOW,
		CONST_SRC_CODE_COLORIZATION_BIAS_LOW,
		CONST_SRC_CODE_COLORIZATION_POWER_AND_DESATURATION_MID,
		CONST_SRC_CODE_COLORIZATION_SCALE_MID,
		CONST_SRC_CODE_COLORIZATION_BIAS_MID,
		CONST_SRC_CODE_COLORIZATION_POWER_AND_DESATURATION_HIGH,
		CONST_SRC_CODE_COLORIZATION_SCALE_HIGH,
		CONST_SRC_CODE_COLORIZATION_BIAS_HIGH,
		CONST_SRC_CODE_TONE_MAPPING_TOE_STRENGTH_TOE_NUMERATOR,
		CONST_SRC_CODE_TONE_MAPPING_TOE_STRENGTH_TOE_DENOMINATOR,
		CONST_SRC_CODE_TONE_MAPPING_TOE_ANGLE,
		CONST_SRC_CODE_TONE_MAPPING_LINEAR_STRENGTH,
		CONST_SRC_CODE_TONE_MAPPING_LINEAR_ANGLE,
		CONST_SRC_CODE_TONE_MAPPING_TOE_SHOULDER_STRENGTH,
		CONST_SRC_CODE_TONE_MAPPING_WHITE_POINT,
		CONST_SRC_CODE_TONE_MAPPING_EXPOSURE,
		CONST_SRC_CODE_TONE_MAPPING_WHITE_ADAPTATION_RATES,
		CONST_SRC_CODE_MSAA_RESOLVE_INV_TONE_MAP_C0_PS,
		CONST_SRC_CODE_MSAA_RESOLVE_INV_TONE_MAP_C1_PS,
		CONST_SRC_CODE_MSAA_RESOLVE_INV_TONE_MAP_C2_PS,
		CONST_SRC_CODE_MSAA_RESOLVE_INV_TONE_MAP_C3_PS,
		CONST_SRC_CODE_MSAA_RESOLVE_INV_TONE_MAP_C4_PS,
		CONST_SRC_CODE_MSAA_RESOLVE_INV_TONE_MAP_C5_PS,
		CONST_SRC_CODE_MSAA_RESOLVE_INV_TONE_MAP_C6_PS,
		CONST_SRC_CODE_OUTDOOR_FEATHER_PARMS,
		CONST_SRC_CODE_ENVMAP_PARMS,
		CONST_SRC_CODE_SUN_SHADOWMAP_PIXEL_ADJUST,
		CONST_SRC_CODE_SPOT_SHADOWMAP_PIXEL_ADJUST,
		CONST_SRC_CODE_SPOT_SHADOWMAP_PIXEL_ADJUST_1,
		CONST_SRC_CODE_SPOT_SHADOWMAP_PIXEL_ADJUST_2,
		CONST_SRC_CODE_SPOT_SHADOWMAP_PIXEL_ADJUST_ARRAY_0,
		CONST_SRC_CODE_SPOT_SHADOWMAP_PIXEL_ADJUST_ARRAY_1,
		CONST_SRC_CODE_SPOT_SHADOWMAP_PIXEL_ADJUST_ARRAY_2,
		CONST_SRC_CODE_SPOT_SHADOWMAP_PIXEL_ADJUST_ARRAY_3,
		CONST_SRC_CODE_COMPOSITE_FX_DISTORTION,
		CONST_SRC_CODE_POSTFX_FADE_EFFECT,
		CONST_SRC_CODE_SNOWAMBIENTCOLOR,
		CONST_SRC_CODE_VIEWPORT_DIMENSIONS,
		CONST_SRC_CODE_FRAMEBUFFER_READ,
		CONST_SRC_CODE_THERMAL_COLOR_OFFSET,
		CONST_SRC_CODE_THERMAL_FADE_CONTROL,
		CONST_SRC_CODE_THERMAL_FADE_COLOR,
		CONST_SRC_CODE_PLAYLIST_POPULATION_PARAMS,
		CONST_SRC_CODE_TESSELLATION_PARMS,
		CONST_SRC_CODE_TESSELLATION_PARMS2,
		CONST_SRC_CODE_BLACK_LEVEL,
		CONST_SRC_CODE_BASE_LIGHTING_COORDS,
		CONST_SRC_CODE_LIGHT_PROBE_AMBIENT,
		CONST_SRC_CODE_NEARPLANE_ORG,
		CONST_SRC_CODE_NEARPLANE_DX,
		CONST_SRC_CODE_NEARPLANE_DY,
		CONST_SRC_CODE_CLIP_SPACE_LOOKUP_SCALE,
		CONST_SRC_CODE_CLIP_SPACE_LOOKUP_OFFSET,
		CONST_SRC_CODE_PARTICLE_CLOUD_MATRIX0,
		CONST_SRC_CODE_PARTICLE_CLOUD_MATRIX1,
		CONST_SRC_CODE_PARTICLE_CLOUD_MATRIX2,
		CONST_SRC_CODE_PARTICLE_CLOUD_SPARK_COLOR0,
		CONST_SRC_CODE_PARTICLE_CLOUD_SPARK_COLOR1,
		CONST_SRC_CODE_PARTICLE_CLOUD_SPARK_COLOR2,
		CONST_SRC_CODE_PARTICLE_FOUNTAIN_PARM0,
		CONST_SRC_CODE_PARTICLE_FOUNTAIN_PARM1,
		CONST_SRC_CODE_LIT2D_BLOODSPATTER_FADESHARPNESS,
		CONST_SRC_CODE_BLUR_SCENE_PIXEL_POS_TO_UV,
		CONST_SRC_CODE_REACTIVEMOTION_CENTERS_0,
		CONST_SRC_CODE_REACTIVEMOTION_CENTERS_1,
		CONST_SRC_CODE_REACTIVEMOTION_CENTERS_2,
		CONST_SRC_CODE_REACTIVEMOTION_CENTERS_3,
		CONST_SRC_CODE_REACTIVEMOTION_CENTERS_4,
		CONST_SRC_CODE_REACTIVEMOTION_CENTERS_5,
		CONST_SRC_CODE_REACTIVEMOTION_CENTERS_6,
		CONST_SRC_CODE_REACTIVEMOTION_CENTERS_7,
		CONST_SRC_CODE_REACTIVEMOTION_CENTERS_8,
		CONST_SRC_CODE_REACTIVEMOTION_CENTERS_9,
		CONST_SRC_CODE_REACTIVEMOTION_CENTERS_10,
		CONST_SRC_CODE_REACTIVEMOTION_CENTERS_11,
		CONST_SRC_CODE_REACTIVEMOTION_CENTERS_12,
		CONST_SRC_CODE_REACTIVEMOTION_CENTERS_13,
		CONST_SRC_CODE_REACTIVEMOTION_CENTERS_14,
		CONST_SRC_CODE_REACTIVEMOTION_CENTERS_15,
		CONST_SRC_CODE_DEPTH_FROM_CLIP,
		CONST_SRC_CODE_CODE_MESH_ARG_0,
		CONST_SRC_CODE_CODE_MESH_ARG_1,
		CONST_SRC_CODE_VIEW_MATRIX,
		CONST_SRC_CODE_INVERSE_VIEW_MATRIX,
		CONST_SRC_CODE_TRANSPOSE_VIEW_MATRIX,
		CONST_SRC_CODE_INVERSE_TRANSPOSE_VIEW_MATRIX,
		CONST_SRC_CODE_PROJECTION_MATRIX,
		CONST_SRC_CODE_INVERSE_PROJECTION_MATRIX,
		CONST_SRC_CODE_TRANSPOSE_PROJECTION_MATRIX,
		CONST_SRC_CODE_INVERSE_TRANSPOSE_PROJECTION_MATRIX,
		CONST_SRC_CODE_VIEW_PROJECTION_MATRIX,
		CONST_SRC_CODE_INVERSE_VIEW_PROJECTION_MATRIX,
		CONST_SRC_CODE_TRANSPOSE_VIEW_PROJECTION_MATRIX,
		CONST_SRC_CODE_INVERSE_TRANSPOSE_VIEW_PROJECTION_MATRIX,
		CONST_SRC_CODE_SHADOW_LOOKUP_MATRIX,
		CONST_SRC_CODE_INVERSE_SHADOW_LOOKUP_MATRIX,
		CONST_SRC_CODE_TRANSPOSE_SHADOW_LOOKUP_MATRIX,
		CONST_SRC_CODE_INVERSE_TRANSPOSE_SHADOW_LOOKUP_MATRIX,
		CONST_SRC_CODE_SHADOW_LOOKUP_MATRIX1,
		CONST_SRC_CODE_INVERSE_SHADOW_LOOKUP_MATRIX1,
		CONST_SRC_CODE_TRANSPOSE_SHADOW_LOOKUP_MATRIX1,
		CONST_SRC_CODE_INVERSE_TRANSPOSE_SHADOW_LOOKUP_MATRIX1,
		CONST_SRC_CODE_SHADOW_LOOKUP_MATRIX2,
		CONST_SRC_CODE_INVERSE_SHADOW_LOOKUP_MATRIX2,
		CONST_SRC_CODE_TRANSPOSE_SHADOW_LOOKUP_MATRIX2,
		CONST_SRC_CODE_INVERSE_TRANSPOSE_SHADOW_LOOKUP_MATRIX2,
		CONST_SRC_CODE_SHADOW_LOOKUP_MATRIX3,
		CONST_SRC_CODE_INVERSE_SHADOW_LOOKUP_MATRIX3,
		CONST_SRC_CODE_TRANSPOSE_SHADOW_LOOKUP_MATRIX3,
		CONST_SRC_CODE_INVERSE_TRANSPOSE_SHADOW_LOOKUP_MATRIX3,
		CONST_SRC_CODE_WORLD_OUTDOOR_LOOKUP_MATRIX,
		CONST_SRC_CODE_INVERSE_WORLD_OUTDOOR_LOOKUP_MATRIX,
		CONST_SRC_CODE_TRANSPOSE_WORLD_OUTDOOR_LOOKUP_MATRIX,
		CONST_SRC_CODE_INVERSE_TRANSPOSE_WORLD_OUTDOOR_LOOKUP_MATRIX,
		CONST_SRC_CODE_PREV_FRAME_WORLD_MATRIX,
		CONST_SRC_CODE_PREV_FRAME_INVERSE_WORLD_MATRIX,
		CONST_SRC_CODE_PREV_FRAME_TRANSPOSE_WORLD_MATRIX,
		CONST_SRC_CODE_PREV_FRAME_INVERSE_TRANSPOSE_WORLD_MATRIX,
		CONST_SRC_CODE_WORLD_MATRIX0,
		CONST_SRC_CODE_INVERSE_WORLD_MATRIX0,
		CONST_SRC_CODE_TRANSPOSE_WORLD_MATRIX0,
		CONST_SRC_CODE_INVERSE_TRANSPOSE_WORLD_MATRIX0,
		CONST_SRC_CODE_WORLD_VIEW_MATRIX0,
		CONST_SRC_CODE_INVERSE_WORLD_VIEW_MATRIX0,
		CONST_SRC_CODE_TRANSPOSE_WORLD_VIEW_MATRIX0,
		CONST_SRC_CODE_INVERSE_TRANSPOSE_WORLD_VIEW_MATRIX0,
		CONST_SRC_CODE_WORLD_VIEW_PROJECTION_MATRIX0,
		CONST_SRC_CODE_INVERSE_WORLD_VIEW_PROJECTION_MATRIX0,
		CONST_SRC_CODE_TRANSPOSE_WORLD_VIEW_PROJECTION_MATRIX0,
		CONST_SRC_CODE_INVERSE_TRANSPOSE_WORLD_VIEW_PROJECTION_MATRIX0,
		CONST_SRC_CODE_WORLD_MATRIX1,
		CONST_SRC_CODE_INVERSE_WORLD_MATRIX1,
		CONST_SRC_CODE_TRANSPOSE_WORLD_MATRIX1,
		CONST_SRC_CODE_INVERSE_TRANSPOSE_WORLD_MATRIX1,
		CONST_SRC_CODE_WORLD_VIEW_MATRIX1,
		CONST_SRC_CODE_INVERSE_WORLD_VIEW_MATRIX1,
		CONST_SRC_CODE_TRANSPOSE_WORLD_VIEW_MATRIX1,
		CONST_SRC_CODE_INVERSE_TRANSPOSE_WORLD_VIEW_MATRIX1,
		CONST_SRC_CODE_WORLD_VIEW_PROJECTION_MATRIX1,
		CONST_SRC_CODE_INVERSE_WORLD_VIEW_PROJECTION_MATRIX1,
		CONST_SRC_CODE_TRANSPOSE_WORLD_VIEW_PROJECTION_MATRIX1,
		CONST_SRC_CODE_INVERSE_TRANSPOSE_WORLD_VIEW_PROJECTION_MATRIX1,
		CONST_SRC_CODE_WORLD_MATRIX2,
		CONST_SRC_CODE_INVERSE_WORLD_MATRIX2,
		CONST_SRC_CODE_TRANSPOSE_WORLD_MATRIX2,
		CONST_SRC_CODE_INVERSE_TRANSPOSE_WORLD_MATRIX2,
		CONST_SRC_CODE_WORLD_VIEW_MATRIX2,
		CONST_SRC_CODE_INVERSE_WORLD_VIEW_MATRIX2,
		CONST_SRC_CODE_TRANSPOSE_WORLD_VIEW_MATRIX2,
		CONST_SRC_CODE_INVERSE_TRANSPOSE_WORLD_VIEW_MATRIX2,
		CONST_SRC_CODE_WORLD_VIEW_PROJECTION_MATRIX2,
		CONST_SRC_CODE_INVERSE_WORLD_VIEW_PROJECTION_MATRIX2,
		CONST_SRC_CODE_TRANSPOSE_WORLD_VIEW_PROJECTION_MATRIX2,
		CONST_SRC_CODE_INVERSE_TRANSPOSE_WORLD_VIEW_PROJECTION_MATRIX2,
		CONST_SRC_TOTAL_COUNT,
		CONST_SRC_NONE,
	};

	enum MaterialTextureSource : std::int32_t
	{
		TEXTURE_SRC_CODE_BLACK,
		TEXTURE_SRC_CODE_WHITE,
		TEXTURE_SRC_CODE_IDENTITY_NORMAL_MAP,
		TEXTURE_SRC_CODE_MODEL_LIGHTING,
		TEXTURE_SRC_CODE_LIGHTMAP_PRIMARY,
		TEXTURE_SRC_CODE_LIGHTMAP_SECONDARY,
		TEXTURE_SRC_CODE_SHADOWMAP_SUN,
		TEXTURE_SRC_CODE_SHADOWMAP_SPOT,
		TEXTURE_SRC_CODE_SHADOWMAP_SPOT_1,
		TEXTURE_SRC_CODE_SHADOWMAP_SPOT_2,
		TEXTURE_SRC_CODE_SHADOWMAP_SPOT_3,
		TEXTURE_SRC_CODE_FEEDBACK,
		TEXTURE_SRC_CODE_RESOLVED_POST_SUN,
		TEXTURE_SRC_CODE_RESOLVED_SCENE,
		TEXTURE_SRC_CODE_HDR_SCENE_R11G11B10_MIPMAP,
		TEXTURE_SRC_CODE_POST_EFFECT_0,
		TEXTURE_SRC_CODE_POST_EFFECT_1,
		TEXTURE_SRC_CODE_LIGHT_ATTENUATION,
		TEXTURE_SRC_CODE_LIGHT_CUCOLORIS,
		TEXTURE_SRC_CODE_LIGHT_ATTENUATION1,
		TEXTURE_SRC_CODE_LIGHT_CUCOLORIS1,
		TEXTURE_SRC_CODE_LIGHT_ATTENUATION2,
		TEXTURE_SRC_CODE_LIGHT_CUCOLORIS2,
		TEXTURE_SRC_CODE_LIGHT_ATTENUATION3,
		TEXTURE_SRC_CODE_LIGHT_CUCOLORIS3,
		TEXTURE_SRC_CODE_OUTDOOR,
		TEXTURE_SRC_CODE_FLOATZ,
		TEXTURE_SRC_CODE_PROCESSED_FLOATZ,
		TEXTURE_SRC_CODE_RAW_FLOATZ,
		TEXTURE_SRC_CODE_FLOATZ_STENCIL,
		TEXTURE_SRC_CODE_RAW_STENCIL,
		TEXTURE_SRC_CODE_HALF_PARTICLES,
		TEXTURE_SRC_CODE_HALF_PARTICLES_Z,
		TEXTURE_SRC_CODE_CASE_TEXTURE,
		TEXTURE_SRC_CODE_CINEMATIC_Y,
		TEXTURE_SRC_CODE_CINEMATIC_CR,
		TEXTURE_SRC_CODE_CINEMATIC_CB,
		TEXTURE_SRC_CODE_CINEMATIC_A,
		TEXTURE_SRC_CODE_REFLECTION_PROBE,
		TEXTURE_SRC_CODE_DALTONIZE_CLUT,
		TEXTURE_SRC_CODE_MACROCLUT,
		TEXTURE_SRC_CODE_PIP_SCENE,
		TEXTURE_SRC_CODE_BLUR_SCENE_SAVE,
		TEXTURE_SRC_CODE_CHARACTER_SCENE,
		TEXTURE_SRC_CODE_RANDOM_ROTATIONS,
		TEXTURE_SRC_CODE_SSAO,
		TEXTURE_SRC_CODE_POSTFX_TEXTURE_0,
		TEXTURE_SRC_CODE_POSTFX_TEXTURE_1,
		TEXTURE_SRC_CODE_POSTFX_TEXTURE_2,
		TEXTURE_SRC_CODE_POSTFX_TEXTURE_3,
		TEXTURE_SRC_CODE_COLORIZATION_ALTERNATE_MASK,
		TEXTURE_SRC_CODE_COLOR_GRADING_CLUT,
		TEXTURE_SRC_CODE_DEPTH_BLUR_0,
		TEXTURE_SRC_CODE_DEPTH_BLUR_1,
		TEXTURE_SRC_CODE_SCENE_LUMINANCE,
		TEXTURES_SRC_CODE_DEFAULT_DEPTH,
		TEXTURE_SRC_CODE_DYNAMIC_IRIS_EXPOSURE,
		TEXTURE_SRC_CODE_SCENE_VELOCITY,
		TEXTURE_SRC_CODE_SCENE_VELOCITY_PASS0,
		TEXTURE_SRC_CODE_SCENE_VELOCITY_PASS1,
		TEXTURE_SRC_CODE_GENERIC_FLOAT_DATA,
		TEXTURE_SRC_CODE_APEX0_DATA,
		TEXTURE_SRC_CODE_APEX1_DATA,
		TEXTURE_SRC_CODE_APEX2_DATA,
		TEXTURE_SRC_CODE_VOXEL_DATA,
		TEXTURE_SRC_CODE_COUNT,
	};

	enum MaterialWorldVertexFormat : std::int32_t
	{
		MTL_WORLDVERT_T1 = 0x0,
		MTL_WORLDVERT_T2N1D0 = 0x1,
		MTL_WORLDVERT_T2N1D1 = 0x2,
		MTL_WORLDVERT_T2N1D2 = 0x3,
		MTL_WORLDVERT_T2N2D0 = 0x4,
		MTL_WORLDVERT_T2N2D1 = 0x5,
		MTL_WORLDVERT_T2N2D2 = 0x6,
		MTL_WORLDVERT_T3N1D0 = 0x7,
		MTL_WORLDVERT_T3N1D1 = 0x8,
		MTL_WORLDVERT_T3N1D2 = 0x9,
		MTL_WORLDVERT_T3N1D3 = 0xA,
		MTL_WORLDVERT_T3N2D0 = 0xB,
		MTL_WORLDVERT_T3N2D1 = 0xC,
		MTL_WORLDVERT_T3N2D2 = 0xD,
		MTL_WORLDVERT_T3N2D3 = 0xE,
		MTL_WORLDVERT_T3N3D0 = 0xF,
		MTL_WORLDVERT_T3N3D1 = 0x10,
		MTL_WORLDVERT_T3N3D2 = 0x11,
		MTL_WORLDVERT_T3N3D3 = 0x12,
		MTL_WORLDVERT_T4N1D0 = 0x13,
		MTL_WORLDVERT_T4N1D1 = 0x14,
		MTL_WORLDVERT_T4N1D2 = 0x15,
		MTL_WORLDVERT_T4N1D3 = 0x16,
		MTL_WORLDVERT_T4N1D4 = 0x17,
		MTL_WORLDVERT_T4N2D0 = 0x18,
		MTL_WORLDVERT_T4N2D1 = 0x19,
		MTL_WORLDVERT_T4N2D2 = 0x1A,
		MTL_WORLDVERT_T4N2D3 = 0x1B,
		MTL_WORLDVERT_T4N2D4 = 0x1C,
		MTL_WORLDVERT_T4N3D0 = 0x1D,
		MTL_WORLDVERT_T4N3D1 = 0x1E,
		MTL_WORLDVERT_T4N3D2 = 0x1F,
		MTL_WORLDVERT_T4N3D3 = 0x20,
		MTL_WORLDVERT_T4N3D4 = 0x21,
		MTL_WORLDVERT_T4N4D0 = 0x22,
		MTL_WORLDVERT_T4N4D1 = 0x23,
		MTL_WORLDVERT_T4N4D2 = 0x24,
		MTL_WORLDVERT_T4N4D3 = 0x25,
		MTL_WORLDVERT_T4N4D4 = 0x26,
		MTL_WORLDVERT_T5N1D0 = 0x27,
		MTL_WORLDVERT_T5N1D1 = 0x28,
		MTL_WORLDVERT_T5N1D2 = 0x29,
		MTL_WORLDVERT_T5N1D3 = 0x2A,
		MTL_WORLDVERT_T5N1D4 = 0x2B,
		MTL_WORLDVERT_T5N1D5 = 0x2C,
		MTL_WORLDVERT_T5N2D0 = 0x2D,
		MTL_WORLDVERT_T5N2D1 = 0x2E,
		MTL_WORLDVERT_T5N2D2 = 0x2F,
		MTL_WORLDVERT_T5N2D3 = 0x30,
		MTL_WORLDVERT_T5N2D4 = 0x31,
		MTL_WORLDVERT_T5N2D5 = 0x32,
		MTL_WORLDVERT_T5N3D0 = 0x33,
		MTL_WORLDVERT_T5N3D1 = 0x34,
		MTL_WORLDVERT_T5N3D2 = 0x35,
		MTL_WORLDVERT_T5N3D3 = 0x36,
		MTL_WORLDVERT_T5N3D4 = 0x37,
		MTL_WORLDVERT_T5N3D5 = 0x38,
		MTL_WORLDVERT_T5N4D0 = 0x39,
		MTL_WORLDVERT_T5N4D1 = 0x3A,
		MTL_WORLDVERT_T5N4D2 = 0x3B,
		MTL_WORLDVERT_T5N4D3 = 0x3C,
		MTL_WORLDVERT_T5N4D4 = 0x3D,
		MTL_WORLDVERT_T5N4D5 = 0x3E,
		MTL_WORLDVERT_T5N5D0 = 0x3F,
		MTL_WORLDVERT_T5N5D1 = 0x40,
		MTL_WORLDVERT_T5N5D2 = 0x41,
		MTL_WORLDVERT_T5N5D3 = 0x42,
		MTL_WORLDVERT_T5N5D4 = 0x43,
		MTL_WORLDVERT_T5N5D5 = 0x44,
		MTL_WORLDVERT_T6N1D0 = 0x45,
		MTL_WORLDVERT_T6N1D1 = 0x46,
		MTL_WORLDVERT_T6N1D2 = 0x47,
		MTL_WORLDVERT_T6N1D3 = 0x48,
		MTL_WORLDVERT_T6N1D4 = 0x49,
		MTL_WORLDVERT_T6N1D5 = 0x4A,
		MTL_WORLDVERT_T6N1D6 = 0x4B,
		MTL_WORLDVERT_T6N2D0 = 0x4C,
		MTL_WORLDVERT_T6N2D1 = 0x4D,
		MTL_WORLDVERT_T6N2D2 = 0x4E,
		MTL_WORLDVERT_T6N2D3 = 0x4F,
		MTL_WORLDVERT_T6N2D4 = 0x50,
		MTL_WORLDVERT_T6N2D5 = 0x51,
		MTL_WORLDVERT_T6N2D6 = 0x52,
		MTL_WORLDVERT_T6N3D0 = 0x53,
		MTL_WORLDVERT_T6N3D1 = 0x54,
		MTL_WORLDVERT_T6N3D2 = 0x55,
		MTL_WORLDVERT_T6N3D3 = 0x56,
		MTL_WORLDVERT_T6N3D4 = 0x57,
		MTL_WORLDVERT_T6N3D5 = 0x58,
		MTL_WORLDVERT_T6N3D6 = 0x59,
		MTL_WORLDVERT_T6N4D0 = 0x5A,
		MTL_WORLDVERT_T6N4D1 = 0x5B,
		MTL_WORLDVERT_T6N4D2 = 0x5C,
		MTL_WORLDVERT_T6N4D3 = 0x5D,
		MTL_WORLDVERT_T6N4D4 = 0x5E,
		MTL_WORLDVERT_T6N4D5 = 0x5F,
		MTL_WORLDVERT_T6N4D6 = 0x60,
		MTL_WORLDVERT_T6N5D0 = 0x61,
		MTL_WORLDVERT_T6N5D1 = 0x62,
		MTL_WORLDVERT_T6N5D2 = 0x63,
		MTL_WORLDVERT_T6N5D3 = 0x64,
		MTL_WORLDVERT_T6N5D4 = 0x65,
		MTL_WORLDVERT_T6N5D5 = 0x66,
		MTL_WORLDVERT_T6N5D6 = 0x67,
		MTL_WORLDVERT_T7N1D0 = 0x68,
		MTL_WORLDVERT_T7N1D1 = 0x69,
		MTL_WORLDVERT_T7N1D2 = 0x6A,
		MTL_WORLDVERT_T7N1D3 = 0x6B,
		MTL_WORLDVERT_T7N1D4 = 0x6C,
		MTL_WORLDVERT_T7N1D5 = 0x6D,
		MTL_WORLDVERT_T7N1D6 = 0x6E,
		MTL_WORLDVERT_T7N1D7 = 0x6F,
		MTL_WORLDVERT_T7N2D0 = 0x70,
		MTL_WORLDVERT_T7N2D1 = 0x71,
		MTL_WORLDVERT_T7N2D2 = 0x72,
		MTL_WORLDVERT_T7N2D3 = 0x73,
		MTL_WORLDVERT_T7N2D4 = 0x74,
		MTL_WORLDVERT_T7N2D5 = 0x75,
		MTL_WORLDVERT_T7N2D6 = 0x76,
		MTL_WORLDVERT_T7N2D7 = 0x77,
		MTL_WORLDVERT_T7N3D0 = 0x78,
		MTL_WORLDVERT_T7N3D1 = 0x79,
		MTL_WORLDVERT_T7N3D2 = 0x7A,
		MTL_WORLDVERT_T7N3D3 = 0x7B,
		MTL_WORLDVERT_T7N3D4 = 0x7C,
		MTL_WORLDVERT_T7N3D5 = 0x7D,
		MTL_WORLDVERT_T7N3D6 = 0x7E,
		MTL_WORLDVERT_T7N3D7 = 0x7F,
		MTL_WORLDVERT_T7N4D0 = 0x80,
		MTL_WORLDVERT_T7N4D1 = 0x81,
		MTL_WORLDVERT_T7N4D2 = 0x82,
		MTL_WORLDVERT_T7N4D3 = 0x83,
		MTL_WORLDVERT_T7N4D4 = 0x84,
		MTL_WORLDVERT_T7N4D5 = 0x85,
		MTL_WORLDVERT_T7N4D6 = 0x86,
		MTL_WORLDVERT_T7N4D7 = 0x87,
		MTL_WORLDVERT_T7N5D0 = 0x88,
		MTL_WORLDVERT_T7N5D1 = 0x89,
		MTL_WORLDVERT_T7N5D2 = 0x8A,
		MTL_WORLDVERT_T7N5D3 = 0x8B,
		MTL_WORLDVERT_T7N5D4 = 0x8C,
		MTL_WORLDVERT_T7N5D5 = 0x8D,
		MTL_WORLDVERT_T7N5D6 = 0x8E,
		MTL_WORLDVERT_T7N5D7 = 0x8F,
		MTL_WORLDVERT_T8N1D0 = 0x90,
		MTL_WORLDVERT_T8N1D1 = 0x91,
		MTL_WORLDVERT_T8N1D2 = 0x92,
		MTL_WORLDVERT_T8N1D3 = 0x93,
		MTL_WORLDVERT_T8N1D4 = 0x94,
		MTL_WORLDVERT_T8N1D5 = 0x95,
		MTL_WORLDVERT_T8N1D6 = 0x96,
		MTL_WORLDVERT_T8N1D7 = 0x97,
		MTL_WORLDVERT_T8N1D8 = 0x98,
		MTL_WORLDVERT_T8N2D0 = 0x99,
		MTL_WORLDVERT_T8N2D1 = 0x9A,
		MTL_WORLDVERT_T8N2D2 = 0x9B,
		MTL_WORLDVERT_T8N2D3 = 0x9C,
		MTL_WORLDVERT_T8N2D4 = 0x9D,
		MTL_WORLDVERT_T8N2D5 = 0x9E,
		MTL_WORLDVERT_T8N2D6 = 0x9F,
		MTL_WORLDVERT_T8N2D7 = 0xA0,
		MTL_WORLDVERT_T8N2D8 = 0xA1,
		MTL_WORLDVERT_T8N3D0 = 0xA2,
		MTL_WORLDVERT_T8N3D1 = 0xA3,
		MTL_WORLDVERT_T8N3D2 = 0xA4,
		MTL_WORLDVERT_T8N3D3 = 0xA5,
		MTL_WORLDVERT_T8N3D4 = 0xA6,
		MTL_WORLDVERT_T8N3D5 = 0xA7,
		MTL_WORLDVERT_T8N3D6 = 0xA8,
		MTL_WORLDVERT_T8N3D7 = 0xA9,
		MTL_WORLDVERT_T8N3D8 = 0xAA,
		MTL_WORLDVERT_T8N4D0 = 0xAB,
		MTL_WORLDVERT_T8N4D1 = 0xAC,
		MTL_WORLDVERT_T8N4D2 = 0xAD,
		MTL_WORLDVERT_T8N4D3 = 0xAE,
		MTL_WORLDVERT_T8N4D4 = 0xAF,
		MTL_WORLDVERT_T8N4D5 = 0xB0,
		MTL_WORLDVERT_T8N4D6 = 0xB1,
		MTL_WORLDVERT_T8N4D7 = 0xB2,
		MTL_WORLDVERT_T8N4D8 = 0xB3,
		MTL_WORLDVERT_T8N5D0 = 0xB4,
		MTL_WORLDVERT_T8N5D1 = 0xB5,
		MTL_WORLDVERT_T8N5D2 = 0xB6,
		MTL_WORLDVERT_T8N5D3 = 0xB7,
		MTL_WORLDVERT_T8N5D4 = 0xB8,
		MTL_WORLDVERT_T8N5D5 = 0xB9,
		MTL_WORLDVERT_T8N5D6 = 0xBA,
		MTL_WORLDVERT_T8N5D7 = 0xBB,
		MTL_WORLDVERT_T8N5D8 = 0xBC,
		MTL_WORLDVERT_T9N1D0 = 0xBD,
		MTL_WORLDVERT_T9N1D1 = 0xBE,
		MTL_WORLDVERT_T9N1D2 = 0xBF,
		MTL_WORLDVERT_T9N1D3 = 0xC0,
		MTL_WORLDVERT_T9N1D4 = 0xC1,
		MTL_WORLDVERT_T9N1D5 = 0xC2,
		MTL_WORLDVERT_T9N1D6 = 0xC3,
		MTL_WORLDVERT_T9N1D7 = 0xC4,
		MTL_WORLDVERT_T9N1D8 = 0xC5,
		MTL_WORLDVERT_T9N2D0 = 0xC6,
		MTL_WORLDVERT_T9N2D1 = 0xC7,
		MTL_WORLDVERT_T9N2D2 = 0xC8,
		MTL_WORLDVERT_T9N2D3 = 0xC9,
		MTL_WORLDVERT_T9N2D4 = 0xCA,
		MTL_WORLDVERT_T9N2D5 = 0xCB,
		MTL_WORLDVERT_T9N2D6 = 0xCC,
		MTL_WORLDVERT_T9N2D7 = 0xCD,
		MTL_WORLDVERT_T9N2D8 = 0xCE,
		MTL_WORLDVERT_T9N3D0 = 0xCF,
		MTL_WORLDVERT_T9N3D1 = 0xD0,
		MTL_WORLDVERT_T9N3D2 = 0xD1,
		MTL_WORLDVERT_T9N3D3 = 0xD2,
		MTL_WORLDVERT_T9N3D4 = 0xD3,
		MTL_WORLDVERT_T9N3D5 = 0xD4,
		MTL_WORLDVERT_T9N3D6 = 0xD5,
		MTL_WORLDVERT_T9N3D7 = 0xD6,
		MTL_WORLDVERT_T9N3D8 = 0xD7,
		MTL_WORLDVERT_T9N4D0 = 0xD8,
		MTL_WORLDVERT_T9N4D1 = 0xD9,
		MTL_WORLDVERT_T9N4D2 = 0xDA,
		MTL_WORLDVERT_T9N4D3 = 0xDB,
		MTL_WORLDVERT_T9N4D4 = 0xDC,
		MTL_WORLDVERT_T9N4D5 = 0xDD,
		MTL_WORLDVERT_T9N4D6 = 0xDE,
		MTL_WORLDVERT_T9N4D7 = 0xDF,
		MTL_WORLDVERT_T9N4D8 = 0xE0,
		MTL_WORLDVERT_T9N5D0 = 0xE1,
		MTL_WORLDVERT_T9N5D1 = 0xE2,
		MTL_WORLDVERT_T9N5D2 = 0xE3,
		MTL_WORLDVERT_T9N5D3 = 0xE4,
		MTL_WORLDVERT_T9N5D4 = 0xE5,
		MTL_WORLDVERT_T9N5D5 = 0xE6,
		MTL_WORLDVERT_T9N5D6 = 0xE7,
		MTL_WORLDVERT_T9N5D7 = 0xE8,
		MTL_WORLDVERT_T9N5D8 = 0xE9,
		MTL_WORLDVERT_COUNT = 0xEA,
	};

	enum MaterialVertexDeclType : std::int32_t
	{
		VERTDECL_GENERIC = 0,
		VERTDECL_PACKED = 1,
		VERTDECL_PACKED_VERTLIT = 4,
		VERTDECL_PACKED_MLMAP = 5,
		VERTDECL_COUNT = 249,
	};

	enum MaterialStreamRoutingSource : std::int32_t
	{
		STREAM_SRC_POSITION = 0x0,
		STREAM_SRC_COLOR = 0x1,
		STREAM_SRC_TEXCOORD_0 = 0x2,
		STREAM_SRC_NORMAL = 0x3,
		STREAM_SRC_TANGENT = 0x4,
		STREAM_SRC_OPTIONAL_BEGIN = 0x5,
		STREAM_SRC_PRE_OPTIONAL_BEGIN = 0x4,
		STREAM_SRC_TEXCOORD_1 = 0x5,
		STREAM_SRC_TEXCOORD_2 = 0x6,
		STREAM_SRC_TEXCOORD_3 = 0x7,
		STREAM_SRC_TEXCOORD_4 = 0x8,
		STREAM_SRC_VERTEX_LIT_0 = 0x9,
		STREAM_SRC_VERTEX_LIT_1 = 0xA,
		STREAM_SRC_VERTEX_LIT_2 = 0xB,
		STREAM_SRC_MODEL_LMAP_COORDS = 0xC,
		STREAM_SRC_NORMAL_TRANSFORM_0 = 0xD,
		STREAM_SRC_NORMAL_TRANSFORM_1 = 0xE,
		STREAM_SRC_NORMAL_TRANSFORM_2 = 0xF,
		STREAM_SRC_NORMAL_TRANSFORM_3 = 0x10,
		STREAM_SRC_COLOR2 = 0x11,
		STREAM_SRC_TEXEL_DENSITY_0 = 0x12,
		STREAM_SRC_TEXEL_DENSITY_1 = 0x13,
		STREAM_SRC_DISPLACEMENT_WEIGHTS_0 = 0x14,
		STREAM_SRC_DISPLACEMENT_WEIGHTS_1 = 0x15,
		STREAM_SRC_COUNT = 0x16,
	};

	struct GfxComputeShaderLoadDef
	{
		unsigned char* program;
		unsigned int programSize;
	};

	struct ComputeShaderProgram
	{
		ID3D11ComputeShader* cs;
		GfxComputeShaderLoadDef loadDef;
	};

	struct ComputeShader
	{
		const char* name;
		ComputeShaderProgram prog;
	};

	struct GfxVertexShaderLoadDef
	{
		unsigned char* program;
		unsigned int programSize;
		unsigned short loadForRenderer;
		unsigned int microCodeCrc;
	};

	struct MaterialVertexShaderProgram
	{
		ID3D11VertexShader* vs;
		GfxVertexShaderLoadDef loadDef;
	};

	struct MaterialVertexShader
	{
		const char* name;
		MaterialVertexShaderProgram prog;
	};

	struct MaterialStreamRouting
	{
		unsigned char source;
		unsigned char dest;
		unsigned char mask;
	};

	struct MaterialVertexStreamRouting
	{
		MaterialStreamRouting data[32];
		ID3D11InputLayout* decl[249];
	};

	struct MaterialVertexDeclaration
	{
		const char* name;
		unsigned char streamCount;
		bool hasOptionalSource;
		MaterialVertexStreamRouting routing;
	};

	struct GfxHullShaderLoadDef
	{
		unsigned char* program;
		unsigned int programSize;
		unsigned short loadForRenderer;
	};

	struct MaterialHullShaderProgram
	{
		ID3D11HullShader* hs;
		GfxHullShaderLoadDef loadDef;
	};

	struct MaterialHullShader
	{
		const char* name;
		MaterialHullShaderProgram prog;
	};

	struct GfxDomainShaderLoadDef
	{
		unsigned char* program;
		unsigned int programSize;
		unsigned short loadForRenderer;
	};

	struct MaterialDomainShaderProgram
	{
		ID3D11DomainShader* ds;
		GfxDomainShaderLoadDef loadDef;
	};

	struct MaterialDomainShader
	{
		const char* name;
		MaterialDomainShaderProgram prog;
	};

	struct GfxPixelShaderLoadDef
	{
		unsigned char* program;
		unsigned int programSize;
		unsigned short loadForRenderer;
		unsigned int microCodeCrc;
	};

	struct MaterialPixelShaderProgram
	{
		ID3D11PixelShader* ps;
		GfxPixelShaderLoadDef loadDef;
	};

	struct MaterialPixelShader
	{
		const char* name;
		MaterialPixelShaderProgram prog;
	};

	struct MaterialArgumentCodeConst
	{
		unsigned short index;
		unsigned char firstRow;
		unsigned char rowCount;
	};

	union MaterialArgumentDef
	{
		const float* literalConst;
		MaterialArgumentCodeConst codeConst;
		unsigned int codeSampler;
		unsigned int nameHash;
	};

	enum MaterialShaderArgumentType : std::uint8_t
	{
		MTL_ARG_CODE_CONST = 0x0,
		MTL_ARG_CODE_TEXTURE = 0x1,
		MTL_ARG_CODE_SAMPLER = 0x2,
		MTL_ARG_MATERIAL_CONST = 0x3,
		MTL_ARG_LITERAL_CONST = 0x4,
		MTL_ARG_MATERIAL_TEXTURE = 0x5,
		MTL_ARG_MATERIAL_SAMPLER = 0x6,
		MTL_ARG_COUNT = 0x7,
	};

	struct MaterialShaderArgument
	{
		unsigned char type;
		unsigned char shader;
		unsigned short dest;
		MaterialArgumentDef u;
	};

	struct MaterialPass
	{
		MaterialVertexShader* vertexShader;
		MaterialVertexDeclaration* vertexDecl;
		MaterialHullShader* hullShader;
		MaterialDomainShader* domainShader;
		MaterialPixelShader* pixelShader;
		unsigned char pixelOutputMask;
		unsigned char perPrimArgCount;
		unsigned char perObjArgCount;
		unsigned char stableArgCount;
		unsigned short perPrimArgSize;
		unsigned short perObjArgSize;
		unsigned short stableArgSize;
		unsigned char zone;
		unsigned char perPrimConstantBuffer;
		unsigned char perObjConstantBuffer;
		unsigned char stableConstantBuffer;
		unsigned int customBufferFlags;
		unsigned char customSamplerFlags;
		unsigned char precompiledIndex;
		unsigned char stageConfig;
		MaterialShaderArgument* args;
	};

	struct MaterialTechniqueHeader
	{
		const char* name;
		unsigned short flags;
		unsigned short passCount;
	};

	struct MaterialTechnique
	{
		MaterialTechniqueHeader hdr;
		MaterialPass passArray[1];
	};

	struct MaterialTechniqueSet
	{
		const char* name;
		unsigned short flags;
		unsigned char worldVertFormat;
		unsigned char preDisplacementOnlyCount;
		MaterialTechnique* techniques[412];
	};

	struct GfxImageLoadDef
	{
		char levelCount;
		char numElements;
		char pad[2];
		int flags;
		int format;
		int resourceSize;
		char data[1];
	};

	struct GfxTexture
	{
		union
		{
			ID3D11Texture1D* linemap;
			ID3D11Texture2D* map;
			ID3D11Texture3D* volmap;
			ID3D11Texture2D* cubemap;
			GfxImageLoadDef* loadDef;
		};
		ID3D11ShaderResourceView* shaderView;
		ID3D11ShaderResourceView* shaderViewAlternate;
	};

	struct Picmip
	{
		unsigned char platform[2];
	};

	struct GfxImageStreamLevelCountAndSize
	{
		int pixelSize : 26;
		int levelCount : 6;
	};

	struct GfxImageStreamData
	{
		unsigned short width;
		unsigned short height;
		GfxImageStreamLevelCountAndSize levelCountAndSize;
	};

	enum MapType : std::uint8_t
	{
		MAPTYPE_NONE = 0x0,
		MAPTYPE_INVALID1 = 0x1,
		MAPTYPE_1D = 0x2,
		MAPTYPE_2D = 0x3,
		MAPTYPE_3D = 0x4,
		MAPTYPE_CUBE = 0x5,
		MAPTYPE_ARRAY = 0x6,
		MAPTYPE_COUNT = 0x7,
	};

	struct GfxImage
	{
		GfxTexture texture;
		DXGI_FORMAT imageFormat;
		MapType mapType;
		unsigned char semantic;
		unsigned char category;
		unsigned char flags;
		Picmip picmip;
		char __pad0[2];
		unsigned int dataLen1;
		unsigned int dataLen2;
		unsigned short width;
		unsigned short height;
		unsigned short depth;
		unsigned short numElements;
		unsigned char levelCount;
		unsigned char streamed;
		char __pad1[2];
		unsigned char* pixelData;
		GfxImageStreamData streams[4];
		const char* name;
	};

	struct GfxColorFloat
	{
		float array[4];
	};

	struct GfxLightImage
	{
		GfxImage* image;
		unsigned char samplerState;
	};

	struct GfxLightDef
	{
		const char* name;
		GfxLightImage attenuation;
		GfxLightImage cucoloris;
		int lmapLookupStart;
	};

	struct WaterWritable
	{
		float floatTime;
	};

	struct water_t
	{
		WaterWritable writable;
		float* H0X;
		float* H0Y;
		float* wTerm;
		int M;
		int N;
		float Lx;
		float Lz;
		float gravity;
		float windvel;
		float winddir[2];
		float amplitude;
		GfxImage* image;
		GfxImage* stagingImage;
	};

	union MaterialTextureDefInfo
	{
		GfxImage* image;
		water_t* water;
	};

	struct MaterialTextureDef
	{
		unsigned int nameHash;
		char nameStart;
		char nameEnd;
		unsigned char samplerState;
		unsigned char semantic;
		MaterialTextureDefInfo u;
	};

	struct MaterialConstantDef
	{
		unsigned int nameHash;
		char name[12];
		float literal[4];
	};

	enum GfxStateBitRawBits0 : std::uint32_t
	{
		GFXS0_ATEST_DISABLE = 0x1,
		GFXS0_ATEST_SHIFT = 0x1,
		GFXS0_ATEST_GT_0 = 0x2,
		GFXS0_ATEST_LT_128 = 0x4,
		GFXS0_ATEST_GE_128 = 0x6,
		GFXS0_ATEST_MASK = 0x6,
		GFXS0_CULL_SHIFT = 0x3,
		GFXS0_CULL_NONE = 0x8,
		GFXS0_CULL_BACK = 0x10,
		GFXS0_CULL_FRONT = 0x18,
		GFXS0_CULL_MASK = 0x18,
		GFXS0_POLYMODE_LINE = 0x20,
		GFXS0_GAMMAWRITE = 0x40,
		GFXS0_STENCIL_REF_SHIFT = 0x8,
		GFXS0_STENCIL_REF_ZERO = 0x0,
		GFXS0_STENCIL_REF_BIT_0 = 0x100,
		GFXS0_STENCIL_REF_BIT_1 = 0x200,
		GFXS0_STENCIL_REF_BIT_2 = 0x400,
		GFXS0_STENCIL_REF_BIT_3 = 0x800,
		GFXS0_STENCIL_REF_BIT_4 = 0x1000,
		GFXS0_STENCIL_REF_BIT_5 = 0x2000,
		GFXS0_STENCIL_REF_BIT_6 = 0x4000,
		GFXS0_STENCIL_REF_BIT_7 = 0x8000,
		GFXS0_STENCIL_REF_MASK = 0xFF00,
	};

	enum GfxStateBitRawBits1 : std::uint32_t
	{
		GFXS1_DEPTHWRITE = 0x1,
		GFXS1_DEPTHTEST_DISABLE = 0x2,
		GFXS1_DEPTHTEST_SHIFT = 0x2,
		GFXS1_DEPTHTEST_ALWAYS = 0x0,
		GFXS1_DEPTHTEST_LESS = 0x4,
		GFXS1_DEPTHTEST_EQUAL = 0x8,
		GFXS1_DEPTHTEST_LESSEQUAL = 0xC,
		GFXS1_DEPTHTEST_MASK = 0xC,
		GFXS1_POLYGON_OFFSET_SHIFT = 0x4,
		GFXS1_POLYGON_OFFSET_0 = 0x0,
		GFXS1_POLYGON_OFFSET_1 = 0x10,
		GFXS1_POLYGON_OFFSET_2 = 0x20,
		GFXS1_POLYGON_OFFSET_SHADOWMAP = 0x30,
		GFXS1_POLYGON_OFFSET_MASK = 0x30,
		GFXS1_STENCIL_FRONT_ENABLE = 0x40,
		GFXS1_STENCIL_BACK_ENABLE = 0x80,
		GFXS1_STENCIL_MASK = 0xC0,
		GFXS1_STENCIL_FRONT_PASS_SHIFT = 0x8,
		GFXS1_STENCIL_FRONT_FAIL_SHIFT = 0xB,
		GFXS1_STENCIL_FRONT_ZFAIL_SHIFT = 0xE,
		GFXS1_STENCIL_FRONT_FUNC_SHIFT = 0x11,
		GFXS1_STENCIL_FRONT_MASK = 0xFFF00,
		GFXS1_STENCIL_BACK_PASS_SHIFT = 0x14,
		GFXS1_STENCIL_BACK_FAIL_SHIFT = 0x17,
		GFXS1_STENCIL_BACK_ZFAIL_SHIFT = 0x1A,
		GFXS1_STENCIL_BACK_FUNC_SHIFT = 0x1D,
		GFXS1_STENCIL_BACK_MASK = 0xFFF00000,
		GFXS1_STENCILFUNC_FRONTBACK_MASK = 0xE00E0000,
		GFXS1_STENCILOP_FRONTBACK_MASK = 0x1FF1FF00,
	};

	enum GfxStateBitRawBits2 : std::uint32_t
	{
		GFXS_SRCBLEND_RGB_SHIFT = 0x0,
		GFXS_SRCBLEND_RGB_MASK = 0xF,
		GFXS_DSTBLEND_RGB_SHIFT = 0x4,
		GFXS_DSTBLEND_RGB_MASK = 0xF0,
		GFXS_BLENDOP_RGB_SHIFT = 0x8,
		GFXS_BLENDOP_RGB_MASK = 0x700,
		GFXS_BLEND_RGB_MASK = 0x7FF,
		GFXS_SRCBLEND_ALPHA_SHIFT = 0xC,
		GFXS_SRCBLEND_ALPHA_MASK = 0xF000,
		GFXS_DSTBLEND_ALPHA_SHIFT = 0x10,
		GFXS_DSTBLEND_ALPHA_MASK = 0xF0000,
		GFXS_BLENDOP_ALPHA_SHIFT = 0x14,
		GFXS_BLENDOP_ALPHA_MASK = 0x700000,
		GFXS_BLEND_ALPHA_MASK = 0x7FF000,
		GFXS_BLEND_COLORWRITE_SHIFT = 0x18,
		GFXS_BLEND_COLORWRITE_R = 0x1000000,
		GFXS_BLEND_COLORWRITE_G = 0x2000000,
		GFXS_BLEND_COLORWRITE_B = 0x4000000,
		GFXS_BLEND_COLORWRITE_A = 0x8000000,
		GFXS_BLEND_COLORWRITE_RGB = 0x7000000,
		GFXS_BLEND_COLORWRITE_MASK = 0xF000000,
		GFXS2_DEPTHWRITE_OPAQUE = 0x10000000,
	};

	enum GfxStencilOp
	{
		GFXS_STENCILOP_KEEP = 0x0,
		GFXS_STENCILOP_ZERO = 0x1,
		GFXS_STENCILOP_REPLACE = 0x2,
		GFXS_STENCILOP_INCRSAT = 0x3,
		GFXS_STENCILOP_DECRSAT = 0x4,
		GFXS_STENCILOP_INVERT = 0x5,
		GFXS_STENCILOP_INCR = 0x6,
		GFXS_STENCILOP_DECR = 0x7,

		GFXS_STENCILOP_COUNT = 0x8,
		GFXS_STENCILOP_MASK = 0x7
	};

	enum GfxStencilFunc
	{
		GFXS_STENCILFUNC_NEVER = 0x0,
		GFXS_STENCILFUNC_LESS = 0x1,
		GFXS_STENCILFUNC_EQUAL = 0x2,
		GFXS_STENCILFUNC_LESSEQUAL = 0x3,
		GFXS_STENCILFUNC_GREATER = 0x4,
		GFXS_STENCILFUNC_NOTEQUAL = 0x5,
		GFXS_STENCILFUNC_GREATEREQUAL = 0x6,
		GFXS_STENCILFUNC_ALWAYS = 0x7,

		GFXS_STENCILFUNC_COUNT = 0x8,
		GFXS_STENCILFUNC_MASK = 0x7,
	};

	struct GfxStatebitsFlags
	{
		GfxStateBitRawBits0 loadbit0;
		GfxStateBitRawBits1 loadbit1;
		GfxStateBitRawBits2 loadbit2;
	};

	union GfxStateBitsRaw
	{
		GfxStatebitsFlags flags;
		std::uint32_t loadBits[3];
	};

	enum GfxStateBitRawBitsIndex : std::uint32_t
	{
		GFXS_RAWBITS_CULL_INDEX = 0,
		GFXS_RAWBITS_DEPTH_STENCIL_INDEX = 1,
		GFXS_RAWBITS_BLEND_INDEX = 2,
	};

	enum GfxDepthStencilMode : std::int32_t
	{
		GFX_DEPTH_STENCIL_MODE_DEFAULT = 0x0,
		GFX_DEPTH_STENCIL_MODE_HUD_OUTLINE = 0x1,
		GFX_DEPTH_STENCIL_MODE_HUD_OUTLINE_ZFAIL = 0x2,
		GFX_DEPTH_STENCIL_MODE_MOTION_BLUR_HQ = 0x3,
		GFX_DEPTH_STENCIL_MODE_DEPTH_HACK = 0x4,
		GFX_DEPTH_STENCIL_MODE_FORCE_DEPTH_WRITE = 0x5,
		GFX_DEPTH_STENCIL_MODE_FORCE_DEPTH_WRITE_HUD_OUTLINE = 0x6,
		GFX_DEPTH_STENCIL_MODE_FORCE_DEPTH_WRITE_HUD_OUTLINE_ZFAIL = 0x7,
		GFX_DEPTH_STENCIL_MODE_CACHED_SPOT_STENCIL_INCR_SAT = 0x8,
		GFX_DEPTH_STENCIL_MODE_CACHED_SPOT_STENCIL_INCR_SAT_CLEAR_DEPTH = 0x9,
		GFX_DEPTH_STENCIL_MODE_CACHED_SPOT_STENCIL_FULL_MASK = 0xA,
		GFX_DEPTH_STENCIL_MODE_COUNT = 0xB,
		GFX_DEPTH_STENCIL_FIRST_FORCE_DEPTH = 0x5,
	};

	enum RasterizerState : std::uint8_t
	{
		RASTERIZER_STATE_CULL_SHIFT = 0x0,
		RASTERIZER_STATE_CULL_NONE = 0x1,
		RASTERIZER_STATE_CULL_BACK = 0x2,
		RASTERIZER_STATE_CULL_FRONT = 0x3,
		RASTERIZER_STATE_CULL_MASK = 0x3,
		RASTERIZER_STATE_POLYGON_OFFSET_SHIFT = 0x2,
		RASTERIZER_STATE_POLYGON_OFFSET_MASK = 0xC,
		RASTERIZER_STATE_POLYMODE_LINE_SHIFT = 0x4,
		RASTERIZER_STATE_POLYMODE_LINE_MASK = 0x10,
		RASTERIZER_STATE_INDEX_MASK = 0x1F,
		RASTERIZER_STATE_ATEST_SHIFT = 0x5,
		RASTERIZER_STATE_ATEST_MASK = 0x60,
		RASTERIZER_STATE_GAMMAWRITE_SHIFT = 0x7,
		RASTERIZER_STATE_GAMMAWRITE_MASK = 0x80,
	};

	struct GfxStateBits
	{
		unsigned int loadBits[3]; // [2] = blendState??
		unsigned char zone;
		unsigned char depthStencilState[11];
		unsigned char blendState;
		unsigned char rasterizerState;
	};

	struct MaterialConstantBufferDef
	{
		unsigned int vsDataSize;
		unsigned int hsDataSize;
		unsigned int dsDataSize;
		unsigned int psDataSize;
		unsigned int vsOffsetDataSize;
		unsigned int hsOffsetDataSize;
		unsigned int dsOffsetDataSize;
		unsigned int psOffsetDataSize;
		unsigned char* vsData;
		unsigned char* hsData;
		unsigned char* dsData;
		unsigned char* psData;
		unsigned short* vsOffsetData;
		unsigned short* hsOffsetData;
		unsigned short* dsOffsetData;
		unsigned short* psOffsetData;
		ID3D11Buffer* vsConstantBuffer;
		ID3D11Buffer* hsConstantBuffer;
		ID3D11Buffer* dsConstantBuffer;
		ID3D11Buffer* psConstantBuffer;
	};

	enum MaterialStateFlags : std::uint8_t
	{
		STATE_FLAG_CULL_BACK = 0x1,
		STATE_FLAG_CULL_FRONT = 0x2,
		STATE_FLAG_CULL_MASK = 0x3,
		STATE_FLAG_DECAL = 0x4,
		STATE_FLAG_WRITES_DEPTH = 0x8,
		STATE_FLAG_USES_DEPTH_BUFFER = 0x10,
		STATE_FLAG_USES_STENCIL_BUFFER = 0x20,
	};

	enum GfxCameraRegionType : std::uint8_t
	{
		CAMERA_REGION_LIT_OPAQUE = 0x0,
		CAMERA_REGION_LIT_DECAL = 0x1,
		CAMERA_REGION_LIT_TRANS = 0x2,
		CAMERA_REGION_EMISSIVE = 0x3,
		CAMERA_REGION_DEPTH_HACK = 0x4,
		CAMERA_REGION_LIGHT_MAP_OPAQUE = 0x5,
		CAMERA_REGION_HUD_OUTLINE = 0x6,
		CAMERA_REGION_MOTIONBLUR = 0x7,
		CAMERA_REGION_COUNT = 0x8,
		CAMERA_REGION_NONE = 0x8,
	};

	enum MaterialType : std::uint8_t
	{
		MTL_TYPE_DEFAULT = 0x0,
		MTL_TYPE_MODEL_FIRST = 0x1,
		MTL_TYPE_MODEL = 0x1,
		MTL_TYPE_MODEL_VERTCOL = 0x2,
		MTL_TYPE_MODEL_VERTCOL_GREY = 0x3,
		MTL_TYPE_MODEL_QUANTIZED = 0x4,
		MTL_TYPE_MODEL_QUANTIZED_VERTCOL = 0x5,
		MTL_TYPE_MODEL_QUANTIZED_VERTCOL_GREY = 0x6,
		MTL_TYPE_MODEL_VERTLIT = 0x7,
		MTL_TYPE_MODEL_VERTLIT_VERTCOL = 0x8,
		MTL_TYPE_MODEL_VERTLIT_VERTCOL_GREY = 0x9,
		MTL_TYPE_MODEL_VERTLIT_QUANTIZED = 0xA,
		MTL_TYPE_MODEL_VERTLIT_QUANTIZED_VERTCOL = 0xB,
		MTL_TYPE_MODEL_VERTLIT_QUANTIZED_VERTCOL_GREY = 0xC,
		MTL_TYPE_MODEL_LMAP = 0xD,
		MTL_TYPE_MODEL_LMAP_VERTCOL = 0xE,
		MTL_TYPE_MODEL_LMAP_VERTCOL_GREY = 0xF,
		MTL_TYPE_MODEL_LMAP_QUANTIZED = 0x10,
		MTL_TYPE_MODEL_LMAP_QUANTIZED_VERTCOL = 0x11,
		MTL_TYPE_MODEL_LMAP_QUANTIZED_VERTCOL_GREY = 0x12,
		MTL_TYPE_MODEL_LAST = 0x12,
		MTL_TYPE_MODEL_SUBDIV_FIRST = 0x13,
		MTL_TYPE_MODEL_SUBDIV = 0x13,
		MTL_TYPE_MODEL_SUBDIV_VERTCOL = 0x14,
		MTL_TYPE_MODEL_SUBDIV_TENSION = 0x15,
		MTL_TYPE_MODEL_SUBDIV_VERTLIT = 0x16,
		MTL_TYPE_MODEL_SUBDIV_VERTLIT_VERTCOL = 0x17,
		MTL_TYPE_MODEL_SUBDIV_LMAP = 0x18,
		MTL_TYPE_MODEL_SUBDIV_LMAP_VERTCOL = 0x19,
		MTL_TYPE_MODEL_SUBDIV_LAST = 0x19,
		MTL_TYPE_WORLD_FIRST = 0x1A,
		MTL_TYPE_WORLD = 0x1A,
		MTL_TYPE_WORLD_VERTCOL = 0x1B,
		MTL_TYPE_WORLD_LAST = 0x1B,
		MTL_TYPE_COUNT = 0x1C,
	};

	enum MaterialAssetFlags : std::uint8_t
	{
		MTL_ASSETFLAG_NONE = 0x0,
	};

	struct Material
	{
		union
		{
			const char* name;
			MaterialInfo info;
		};
		unsigned char stateBitsEntry[412]; // 40
		unsigned char textureCount; // 452
		unsigned char constantCount; // 453
		unsigned char stateBitsCount; // 454
		unsigned char stateFlags; // 455
		unsigned char cameraRegion; // 456
		unsigned char materialType; // 457
		unsigned char layerCount; // 458
		unsigned char assetFlags; // 459
		char __pad2[4]; // 460 - 464
		MaterialTechniqueSet* techniqueSet; // 464
		MaterialTextureDef* textureTable; // 472
		MaterialConstantDef* constantTable; // 480
		GfxStateBits* stateMap; // 488 (stateBitsTable)
		unsigned char constantBufferIndex[412]; // 496
		char __pad3[4]; // 500
		MaterialConstantBufferDef* constantBufferTable; // 912
		unsigned char constantBufferCount; // 920
		char __pad4[7]; // 921-928
		const char** subMaterials; // 928
	};

	union XAnimDynamicFrames
	{
		unsigned char(*_1)[3];
		unsigned short(*_2)[3];
	};

	union XAnimDynamicIndices
	{
		unsigned char _1[1];
		unsigned short _2[1];
	};

	struct XAnimPartTransFrames
	{
		float mins[3];
		float size[3];
		XAnimDynamicFrames frames;
		XAnimDynamicIndices indices;
	};

	union XAnimPartTransData
	{
		XAnimPartTransFrames frames;
		float frame0[3];
	};

	struct XAnimPartTrans
	{
		unsigned short size;
		unsigned char smallTrans;
		XAnimPartTransData u;
	};

	struct XAnimDeltaPartQuatDataFrames2
	{
		short(*frames)[2];
		XAnimDynamicIndices indices;
	};

	union XAnimDeltaPartQuatData2
	{
		XAnimDeltaPartQuatDataFrames2 frames;
		short frame0[2];
	};

	struct XAnimDeltaPartQuat2
	{
		unsigned short size;
		XAnimDeltaPartQuatData2 u;
	};

	struct XAnimDeltaPartQuatDataFrames
	{
		short(*frames)[4];
		XAnimDynamicIndices indices;
	};

	union XAnimDeltaPartQuatData
	{
		XAnimDeltaPartQuatDataFrames frames;
		short frame0[4];
	};

	struct XAnimDeltaPartQuat
	{
		unsigned short size;
		XAnimDeltaPartQuatData u;
	};

	struct XAnimDeltaPart
	{
		XAnimPartTrans* trans;
		XAnimDeltaPartQuat2* quat2;
		XAnimDeltaPartQuat* quat;
	};

	union XAnimIndices
	{
		unsigned char* _1;
		unsigned short* _2;
		void* data;
	};

	struct XAnimNotifyInfo
	{
		scr_string_t name;
		float time;
	};

	enum XAnimPartsFlags : std::int32_t
	{
		ANIM_LOOP = 0x1,
		ANIM_DELTA = 0x2,
		ANIM_DELTA_3D = 0x4,
		ANIM_DEFAULT = 0x8,
		ANIM_SHMEM = 0x10,
	};

	struct XAnimParts
	{
		const char* name; // 0
		unsigned short dataByteCount; // 8
		unsigned short dataShortCount; // 10
		unsigned short dataIntCount; // 12
		unsigned short randomDataByteCount; // 14
		unsigned short randomDataIntCount; // 16
		unsigned short numframes; // 18
		unsigned char flags; // 20
		unsigned char boneCount[10]; // 21
		unsigned char notifyCount; // 31
		unsigned char assetType; // 32
		unsigned char ikType; // 33
		unsigned int randomDataShortCount; // 36
		unsigned int indexCount; // 40
		float framerate;  // 44
		float frequency; // 48
		scr_string_t* names; // 56
		char* dataByte; // 64
		short* dataShort; // 72
		int* dataInt; // 80
		short* randomDataShort; // 88
		unsigned char* randomDataByte; // 96
		int* randomDataInt; // 104
		XAnimIndices indices; // 112
		XAnimNotifyInfo* notify; // 120
		XAnimDeltaPart* deltaPart; // 128
	};

	struct DObjAnimMat
	{
		float quat[4];
		float trans[3];
		float transWeight;
	};

	struct ReactiveMotionModelPart
	{
		float center[3];
		float stiffness;
	};

	struct XSurfaceCollisionAabb
	{
		unsigned short mins[3];
		unsigned short maxs[3];
	};

	struct XSurfaceCollisionNode
	{
		XSurfaceCollisionAabb aabb;
		unsigned short childBeginIndex;
		unsigned short childCount;
	};

	struct XSurfaceCollisionLeaf
	{
		unsigned short triangleBeginIndex;
	};

	struct XSurfaceCollisionTree
	{
		float trans[3];
		float scale[3];
		unsigned int nodeCount;
		XSurfaceCollisionNode* nodes;
		unsigned int leafCount;
		XSurfaceCollisionLeaf* leafs;
	};

	struct XRigidVertList
	{
		unsigned short boneOffset;
		unsigned short vertCount;
		unsigned short triOffset;
		unsigned short triCount;
		XSurfaceCollisionTree* collisionTree;
	};

	union PackedUnitVec
	{
		unsigned int packed;
	};

	union PackedTexCoords
	{
		unsigned int packed;
	};

	union GfxColor
	{
		unsigned char array[4];
		unsigned int packed;
	};

	struct GfxQuantizedNoColorMotionVertex
	{
		short xyz[3];
		short binormalSignAndHeight;
		PackedUnitVec normal;
		PackedUnitVec tangent;
		PackedTexCoords texCoord;
		GfxColor pieceIndex;
	};

	struct GfxQuantizedNoColorVertex
	{
		short xyz[3];
		short binormalSign;
		PackedUnitVec normal;
		PackedUnitVec tangent;
		PackedTexCoords texCoord;
	};

	struct GfxQuantizedVertex
	{
		short xyz[3];
		short binormalSign;
		PackedUnitVec normal;
		PackedUnitVec tangent;
		PackedTexCoords texCoord;
		GfxColor color;
	};

	struct GfxQuantizedMotionVertex
	{
		short xyz[3];
		short binormalSignAndHeight;
		PackedUnitVec normal;
		PackedUnitVec tangent;
		PackedTexCoords texCoord;
		GfxColor pieceIndex;
	};

	struct GfxPackedVertex
	{
		float xyz[3];
		float binormalSign;
		GfxColor color;
		PackedTexCoords texCoord;
		PackedUnitVec normal;
		PackedUnitVec tangent;
	};

	struct GfxPackedMotionVertex
	{
		float xyz[3];
		float binormalSignAndHeight;
		GfxColor pieceIndex;
		PackedTexCoords texCoord;
		PackedUnitVec normal;
		PackedUnitVec tangent;
	};

	union GfxVertexUnion0
	{
		GfxQuantizedNoColorVertex* quantizedNoColorVerts0;
		GfxQuantizedNoColorMotionVertex* quantizedNoColorMotionVerts0;
		GfxQuantizedVertex* quantizedVerts0;
		GfxQuantizedMotionVertex* quantizedMotionVerts0;
		GfxPackedVertex* packedVerts0;
		GfxPackedMotionVertex* packedMotionVerts0;
		void* verts0;
	};

	struct Face
	{
		unsigned short v1;
		unsigned short v2;
		unsigned short v3;
	};

	struct XSubdivRigidVertList
	{
		unsigned int firstFace;
		unsigned int faceCount;
		unsigned int firstRegularPatch;
		unsigned int regularPatchCount;
	};

	struct XSurfaceSubdivLevel
	{
		XSubdivRigidVertList* rigidVertLists;
		unsigned int faceCount;
		unsigned int regularPatchCount;
		unsigned int regularPatchOffset;
		unsigned int facePointCount;
		unsigned int facePointValence4Count;
		unsigned int facePointBufferSize;
		unsigned int edgePointCount;
		unsigned int edgePointSmoothEnd;
		unsigned int edgePointUVBorderEnd;
		unsigned int vertexPointCount;
		unsigned int vertexPointValence4Count;
		unsigned int vertexPointBufferSize;
		unsigned int normalCount;
		unsigned int normalBufferSize;
		unsigned int transitionPointCount;
		unsigned int vertCount;
		unsigned int vertOffset;
		unsigned short* faceIndices;
		unsigned short* regularPatchIndices;
		unsigned int* regularPatchFlags;
		unsigned int* facePoints;
		unsigned int* edgePoints;
		unsigned int* vertexPoints;
		unsigned int* normals;
		unsigned int* transitionPoints;
		float* regularPatchCones;
		ID3D11Buffer* regularPatchIndexBuffer;
		ID3D11Buffer* faceIndexBuffer;
		ID3D11ShaderResourceView* regularPatchIndexBufferView;
		ID3D11ShaderResourceView* regularPatchFlagsView;
		ID3D11ShaderResourceView* facePointsView;
		ID3D11ShaderResourceView* edgePointsView;
		ID3D11ShaderResourceView* vertexPointsView;
		ID3D11ShaderResourceView* normalsView;
		ID3D11ShaderResourceView* transitionPointsView;
		ID3D11ShaderResourceView* regularPatchConesView;
	};

	struct GfxSubdivCache
	{
		unsigned int size;
		ID3D11Buffer* subdivCacheBuffer;
		ID3D11ShaderResourceView* subdivCacheView;
	};

	struct XSurfaceSubdivInfo
	{
		XSurfaceSubdivLevel* levels;
		char __pad0[24];
		GfxSubdivCache cache;
	};

	struct BlendVertsUnknown
	{
		unsigned short b[15];
		unsigned short blendVertCountIndex; // 30
	};

	typedef unsigned short XBlendInfo;

	enum SurfaceFlags : std::int32_t
	{
		SURF_FLAG_VERTCOL_GREY = 0x1,
		SURF_FLAG_VERTCOL_NONE = 0x2,
		SURF_FLAG_SKINNED = 0x4,
		SURF_FLAG_REACTIVE_MOTION = 0x8,
		SURF_FLAG_LIGHTMAP_COORDS = 0x10,
		SURF_FLAG_TENSION = 0x20,
	};

	struct XSurface
	{
		unsigned short flags; // 0
		unsigned short vertCount; // 2
		unsigned short triCount; // 4
		unsigned char rigidVertListCount; // 6
		unsigned char subdivLevelCount; // 7
		short blendVertCounts[8]; // 8
		GfxVertexUnion0 verts0; // 24
		Face* triIndices; // 32
		ID3D11Buffer* vb0; // 40
		ID3D11ShaderResourceView* vb0View; // 48
		ID3D11Buffer* indexBuffer; // 56
		XRigidVertList* rigidVertLists; // 64
		XBlendInfo* blendVerts; // 72
		BlendVertsUnknown* blendVertsTable; // 80
		ID3D11Buffer* blendVertsBuffer; // 88
		ID3D11ShaderResourceView* blendVertsView; // 96
		float(*lmapUnwrap)[2]; // 104
		ID3D11Buffer* vblmapBuffer; // 112
		ID3D11ShaderResourceView* vblmapView; // 120
		XSurfaceSubdivInfo* subdiv; // 128
		float* tensionData; // 136
		unsigned short* tensionAccumTable; // 144
		ID3D11Buffer* tensionAccumTableBuffer; // 152
		ID3D11ShaderResourceView* tensionAccumTableView; // 160
		ID3D11Buffer* tensionDataBuffer; // 168
		ID3D11ShaderResourceView* tensionDataView; // 176
		ID3D11ShaderResourceView* indexBufferView; // 184
		unsigned int vertexLightingIndex; // 192
		int partBits[8]; // 196
	};

	struct XModelSurfs
	{
		const char* name;
		XSurface* surfs;
		unsigned short numsurfs;
		int partBits[8];
	};

	struct XModelLodInfo
	{
		float dist;
		unsigned short numsurfs;
		unsigned short surfIndex;
		XModelSurfs* modelSurfs;
		int partBits[8];
		XSurface* surfs;
		char unknown[8];
	};

	struct XModelCollSurf_s
	{
		Bounds bounds;
		int boneIdx;
		int contents;
		int surfFlags;
	};

	struct XBoneInfo
	{
		Bounds bounds;
		union
		{
			float radiusSquared;
			unsigned int radiusSquaredAsInt;
		};
	};

	struct cplane_s
	{
		float normal[3];
		float dist;
		unsigned char type;
		//unsigned char pad[3];
	};

	struct cbrushside_t
	{
		cplane_s* plane;
		unsigned short materialNum;
		unsigned char firstAdjacentSideOffset;
		unsigned char edgeCount;
	};

	typedef unsigned char cbrushedge_t;

	struct cbrush_t
	{
		unsigned short numsides;
		unsigned short glassPieceIndex;
		cbrushside_t* sides;
		cbrushedge_t* baseAdjacentSide;
		short axialMaterialNum[2][3];
		unsigned char firstAdjacentSideOffsets[2][3];
		unsigned char edgeCount[2][3];
	};

	struct BrushWrapper
	{
		Bounds bounds;
		cbrush_t brush;
		int totalEdgeCount;
		cplane_s* planes;
	};

	struct PhysGeomInfo
	{
		BrushWrapper* brushWrapper;
		int type;
		float orientation[3][3];
		Bounds bounds;
	};

	struct PhysMass
	{
		float centerOfMass[3];
		float momentsOfInertia[3];
		float productsOfInertia[3];
	};

	struct PhysCollmap
	{
		const char* name;
		unsigned int count;
		PhysGeomInfo* geoms;
		PhysMass mass;
		Bounds bounds;
	};

	struct XModelAngle
	{
		short x;
		short y;
		short z;
		short base;
	};

	struct XModelTagPos
	{
		float x;
		float y;
		float z;
	};

	struct XModel
	{
		const char* name; // 0
		unsigned char numBones; // 8
		unsigned char numRootBones; // 9
		unsigned char numsurfs; // 10
		unsigned char numReactiveMotionParts; // 11
		float scale; // 12
		char __pad0[4]; //unsigned char lodRampType; // 16
		unsigned int noScalePartBits[6]; // 20
		scr_string_t* boneNames; // 48
		unsigned char* parentList; // 56
		XModelAngle* tagAngles; // 64
		XModelTagPos* tagPositions; // 72
		unsigned char* partClassification; // 80
		DObjAnimMat* baseMat; // 88
		ReactiveMotionModelPart* reactiveMotionParts; // 96
		Material** materialHandles; // 104
		XModelLodInfo lodInfo[6]; // 112
		char maxLoadedLod; // 496
		char numLods; // 497
		char collLod; // 498
		unsigned char flags; // 499
		int numCollSurfs; // 500
		XModelCollSurf_s* collSurfs; // 504
		int contents; // 512
		XBoneInfo* boneInfo; // 520
		float radius; // 528
		Bounds bounds; // 532
		unsigned short* invHighMipRadius; // 560
		int memUsage; // 568
		PhysPreset* physPreset; // 576
		PhysCollmap* physCollmap; // 584
		float quantization; // 592
		float unk;
	};

	enum SoundChannel : std::uint32_t
	{
		SND_CHANNEL_PHYSICS,
		SND_CHANNEL_AMBDIST1,
		SND_CHANNEL_AMBDIST2,
		SND_CHANNEL_ALARM,
		SND_CHANNEL_AUTO,
		SND_CHANNEL_AUTO2,
		SND_CHANNEL_AUTO2D,
		SND_CHANNEL_AUTODOG,
		SND_CHANNEL_EXPLOSIONDIST1,
		SND_CHANNEL_EXPLOSIONDIST2,
		SND_CHANNEL_EXPLOSIVEIMPACT,
		SND_CHANNEL_ELEMENT,
		SND_CHANNEL_ELEMENT_INT,
		SND_CHANNEL_ELEMENT_EXT,
		SND_CHANNEL_FOLEY_PLR_MVMT,
		SND_CHANNEL_FOLEY_PLR_WEAP,
		SND_CHANNEL_FOLEY_NPC_MVMT,
		SND_CHANNEL_FOLEY_NPC_WEAP,
		SND_CHANNEL_FOLEY_DOG_MVMT,
		SND_CHANNEL_ELEMENT_LIM,
		SND_CHANNEL_ELEMENT2D,
		SND_CHANNEL_VOICE_DOG_DIST,
		SND_CHANNEL_BULLETFLESH1NPC_NPC,
		SND_CHANNEL_BULLETFLESH2NPC_NPC,
		SND_CHANNEL_BULLETIMPACT,
		SND_CHANNEL_BULLETFLESH1NPC,
		SND_CHANNEL_BULLETFLESH2NPC,
		SND_CHANNEL_BULLETFLESH1,
		SND_CHANNEL_BULLETFLESH2,
		SND_CHANNEL_VEHICLE,
		SND_CHANNEL_VEHICLELIMITED,
		SND_CHANNEL_MENU,
		SND_CHANNEL_MENULIM1,
		SND_CHANNEL_MENULIM2,
		SND_CHANNEL_BULLETWHIZBYIN,
		SND_CHANNEL_BULLETWHIZBYOUT,
		SND_CHANNEL_BODY,
		SND_CHANNEL_BODY2D,
		SND_CHANNEL_RELOAD,
		SND_CHANNEL_RELOAD2D,
		SND_CHANNEL_FOLEY_PLR_STEP,
		SND_CHANNEL_FOLEY_PLR_STEP_UNRES,
		SND_CHANNEL_FOLEY_NPC_STEP,
		SND_CHANNEL_FOLEY_DOG_STEP,
		SND_CHANNEL_ITEM,
		SND_CHANNEL_WEAPON_DRONE,
		SND_CHANNEL_EXPLOSION1,
		SND_CHANNEL_EXPLOSION2,
		SND_CHANNEL_EXPLOSION3,
		SND_CHANNEL_EXPLOSION4,
		SND_CHANNEL_EXPLOSION5,
		SND_CHANNEL_EFFECTS1,
		SND_CHANNEL_EFFECTS2,
		SND_CHANNEL_EFFECTS3,
		SND_CHANNEL_EFFECTS2D1,
		SND_CHANNEL_EFFECTS2D2,
		SND_CHANNEL_NORESTRICT,
		SND_CHANNEL_NORESTRICT2D,
		SND_CHANNEL_AIRCRAFT,
		SND_CHANNEL_VEHICLE2D,
		SND_CHANNEL_WEAPON_DIST,
		SND_CHANNEL_WEAPON_MID,
		SND_CHANNEL_WEAPON,
		SND_CHANNEL_WEAPON2D,
		SND_CHANNEL_NONSHOCK,
		SND_CHANNEL_NONSHOCK2,
		SND_CHANNEL_EFFECTS2DLIM,
		SND_CHANNEL_VOICE_DOG,
		SND_CHANNEL_MUSIC_EMITTER,
		SND_CHANNEL_VOICE_DOG_ATTACK,
		SND_CHANNEL_VOICE,
		SND_CHANNEL_LOCAL,
		SND_CHANNEL_LOCAL2,
		SND_CHANNEL_LOCAL3,
		SND_CHANNEL_AMBIENT,
		SND_CHANNEL_PLR_WEAP_FIRE_2D,
		SND_CHANNEL_PLR_WEAP_MECH_2D,
		SND_CHANNEL_HURT,
		SND_CHANNEL_PLAYER1,
		SND_CHANNEL_PLAYER2,
		SND_CHANNEL_MUSIC,
		SND_CHANNEL_MUSICNOPAUSE,
		SND_CHANNEL_MISSION,
		SND_CHANNEL_MISSIONFX,
		SND_CHANNEL_ANNOUNCER,
		SND_CHANNEL_SHELLSHOCK,

		SND_CHANNEL_COUNT,
	};

	union SoundAliasFlags
	{
		struct packed
		{
			unsigned int looping : 1;
			unsigned int isMaster : 1;
			unsigned int isSlave : 1;
			unsigned int fullDryLevel : 1;
			unsigned int noWetLevel : 1;
			unsigned int randomLooping : 1;
			unsigned int unknown2 : 1;
			unsigned int type : 2;
			SoundChannel channel : 7;
		} packed;
		unsigned int intValue;
	};

	enum snd_alias_type_t : std::uint8_t
	{
		SAT_UNKNOWN = 0x0,
		SAT_LOADED = 0x1,
		SAT_STREAMED = 0x2,
		SAT_PRIMED = 0x3,
		SAT_COUNT = 0x4,
	};

	enum ERiffAudioFormat : std::int8_t
	{
		SND_FORMAT_INVALID = 0x0,
		SND_FORMAT_PCM = 0x1,
		SND_FORMAT_XMA2 = 0x2,
		SND_FORMAT_ADPCM = 0x3,
		SND_FORMAT_XWMA = 0x4,
		SND_FORMAT_MP3 = 0x5,
		SND_FORMAT_WIIUDSP = 0x6,
		SND_FORMAT_FLAC = 0x7,
		SND_FORMAT_COUNT = 0x8,
	};

	struct RiffAudioInfo
	{
		unsigned int sampleRate;
		unsigned int dataByteCount;
		unsigned int numSamples;
		unsigned int avgBytesPerSec;
		unsigned short channels;
		unsigned short numBits;
		unsigned short blockAlign;
		char format;
	};

	struct XA2Sound
	{
		char* data;
		char* seekTable;
		RiffAudioInfo format;
		int loadedSize;
		int seekTableSize;
	};

	struct LoadedSound
	{
		const char* name;
		XA2Sound sound;
	};

	struct StreamFileNameRaw
	{
		const char* dir;
		const char* name;
	};

	struct StreamFileNamePacked
	{
		unsigned __int64 offset;
		unsigned __int64 length;
	};

	union StreamFileInfo
	{
		StreamFileNameRaw raw;
		StreamFileNamePacked packed;
	};

	struct StreamFileName
	{
		unsigned short isLocalized;
		unsigned short fileIndex;
		StreamFileInfo info;
	};

	struct StreamedSound
	{
		StreamFileName filename;
		unsigned int totalMsec;
	};

	struct PrimedSound
	{
		StreamFileName filename;
		LoadedSound* loadedPart;
		int dataOffset;
		int totalSize;
		unsigned int primedCrc;
	};

	union SoundFileRef
	{
		LoadedSound* loadSnd;
		StreamedSound streamSnd;
		PrimedSound primedSnd;
	};

	struct SoundFile
	{
		unsigned char type;
		unsigned char exists;
		SoundFileRef u;
	};

	struct SndCurve
	{
		bool isDefault;
		union
		{
			const char* filename;
			const char* name;
		};
		unsigned short knotCount;
		float knots[16][2];
	};

	struct SpeakerLevels
	{
		int speaker;
		int numLevels;
		float levels[2];
	};

	struct ChannelMap
	{
		int speakerCount;
		SpeakerLevels speakers[6];
	};

	struct SpeakerMap
	{
		bool isDefault;
		const char* name;
		ChannelMap channelMaps[2][2];
	};

	struct OcclusionShape
	{
		bool isDefault;
		const char* name;
		int shapeKind;
		float innerAngle;
		float outerAngle;
		float occludedVolume;
	};

	struct DopplerPreset
	{
		union
		{
			const char* p_name;
			const char* name;
		};
		float speedOfSound;
		float playerVelocityScale;
		float minPitch;
		float maxPitch;
		float smoothing;
	};

	enum SoundVolMod : std::int16_t
	{
		SND_VOLMOD_FOLEY,
		SND_VOLMOD_WPNAI,
		SND_VOLMOD_WPNPLYR,
		SND_VOLMOD_HUD,
		SND_VOLMOD_INTERFACE,
		SND_VOLMOD_INTERFACE_MUSIC,
		SND_VOLMOD_MUSIC,
		SND_VOLMOD_MUSIC_EMITTER,
		SND_VOLMOD_AMBIENCE,
		SND_VOLMOD_AMBIENCE_DIST,
		SND_VOLMOD_ELEMENT,
		SND_VOLMOD_EMITTER,
		SND_VOLMOD_PHYSICS,
		SND_VOLMOD_BODYFALL,
		SND_VOLMOD_FOLEY_PLR,
		SND_VOLMOD_FOLEYMP_PLR,
		SND_VOLMOD_FOLEY_NPC,
		SND_VOLMOD_FOLEYMP_NPC,
		SND_VOLMOD_FOLEY_WPN_PLR,
		SND_VOLMOD_FOLEY_WPN_NPC,
		SND_VOLMOD_FOOTSTEP_PLR,
		SND_VOLMOD_FOOTSTEP_NPC,
		SND_VOLMOD_FOOTSTEPMP_PLR,
		SND_VOLMOD_FOOTSTEPMP_NPC,
		SND_VOLMOD_MELEE_PLR,
		SND_VOLMOD_MELEE_NPC,
		SND_VOLMOD_CHATTERAL,
		SND_VOLMOD_CHATTERAX,
		SND_VOLMOD_REACTIONAL,
		SND_VOLMOD_REACTIONAX,
		SND_VOLMOD_VOICEOVER,
		SND_VOLMOD_VOICEOVER_RADIO,
		SND_VOLMOD_VOICEOVER_CRITICAL,
		SND_VOLMOD_VOICEOVER_AMB,
		SND_VOLMOD_DESTRUCT,
		SND_VOLMOD_EXPLOSION,
		SND_VOLMOD_EXPLOSION_GRENADE,
		SND_VOLMOD_EXPLOSION_FLASHBANG,
		SND_VOLMOD_EXPLOSION_ROCKET,
		SND_VOLMOD_EXPLOSION_CAR,
		SND_VOLMOD_REX_EMITTERS,
		SND_VOLMOD_IMPACT,
		SND_VOLMOD_IMPACT_PLR,
		SND_VOLMOD_IMPACT_NPC,
		SND_VOLMOD_IMPACTMP,
		SND_VOLMOD_IMPACTMP_PLR,
		SND_VOLMOD_IMPACTMP_NPC,
		SND_VOLMOD_WHIZBY,
		SND_VOLMOD_WHIZBYMP,
		SND_VOLMOD_VEHICLE_PLR,
		SND_VOLMOD_VEHICLE_NPC,
		SND_VOLMOD_VEHICLE_WPN_PLR,
		SND_VOLMOD_VEHICLE_WPN_NPC,
		SND_VOLMOD_VEHICLE,
		SND_VOLMOD_GRENADEBOUNCE,
		SND_VOLMOD_GRENADEBOUNCEMP,
		SND_VOLMOD_SHELLCASINGS,
		SND_VOLMOD_SHELLCASINGSMP,
		SND_VOLMOD_WPN_PLR,
		SND_VOLMOD_WPNMP_PLR,
		SND_VOLMOD_WPN_NPC,
		SND_VOLMOD_WPNMP_NPC,
		SND_VOLMOD_WPN_PROJECTILE,
		SND_VOLMOD_WPNMP_PROJECTILE,
		SND_VOLMOD_NA,
		SND_VOLMOD_MAX,
		SND_VOLMOD_SCRIPTED1,
		SND_VOLMOD_SCRIPTED2,
		SND_VOLMOD_SCRIPTED3,
		SND_VOLMOD_SCRIPTED4,
		SND_VOLMOD_SCRIPTED5,
		SND_VOLMOD_FULLVOLUME,
		SND_VOLMOD_PERKMP_QUIET,
		SND_VOLMOD_DEATHSDOOR,
		SND_VOLMOD_DEFAULT,

		SND_VOLMOD_COUNT,
	};

	struct snd_alias_t
	{
		union
		{
			const char* aliasName;
			const char* name;
		};
		const char* subtitle;
		const char* secondaryAliasName;
		const char* chainAliasName;
		const char* mixerGroup;
		SoundFile* soundFile;
		int sequence;
		float volMin;
		float volMax;
		int volModIndex;
		float pitchMin;
		float pitchMax;
		float distMin;
		float distMax;
		float velocityMin;
		int flags;
		unsigned char masterPriority;
		float masterPercentage;
		float slavePercentage;
		float probability;
		float lfePercentage;
		float centerPercentage;
		int startDelay;
		SndCurve* volumeFalloffCurve;
		SndCurve* lpfCurve;
		SndCurve* reverbSendCurve;
		float envelopMin;
		float envelopMax;
		float envelopPercentage;
		SpeakerMap* speakerMap;
		float wetMixOverride;
		OcclusionShape* occlusionShape;
		unsigned char allowDoppler;
		DopplerPreset* dopplerPreset;
	};

	struct snd_alias_list_t
	{
		union
		{
			const char* aliasName;
			const char* name;
		};
		snd_alias_t* head;
		int count;
	};

	struct ComPrimaryLight
	{
		unsigned char type;
		unsigned char canUseShadowMap;
		unsigned char exponent;
		unsigned char unused;
		float color[3];
		float dir[3];
		float up[3];
		float origin[3];
		float radius;
		float cosHalfFovOuter;
		float cosHalfFovInner;
		float cosHalfFovExpanded;
		float rotationLimit;
		float translationLimit;
		float cucRotationOffsetRad;
		float cucRotationSpeedRad;
		float cucScrollVector[2];
		float cucScaleVector[2];
		float cucTransVector[2];
		const char* defName;
	};

	struct ComPrimaryLightEnv
	{
		unsigned short primaryLightIndices[4];
		unsigned char numIndices;
	};

	struct ComWorld
	{
		const char* name;
		int isInUse;
		unsigned int primaryLightCount;
		ComPrimaryLight* primaryLights;
		unsigned int primaryLightEnvCount;
		ComPrimaryLightEnv* primaryLightEnvs;
	};

	struct G_GlassPiece
	{
		unsigned short damageTaken;
		unsigned short collapseTime;
		int lastStateChangeTime;
		unsigned char impactDir;
		unsigned char impactPos[2];
	};

	struct G_GlassName
	{
		char* nameStr;
		scr_string_t name;
		unsigned short pieceCount;
		unsigned short* pieceIndices;
	};

	struct G_GlassData
	{
		G_GlassPiece* glassPieces;
		unsigned int pieceCount;
		unsigned short damageToWeaken;
		unsigned short damageToDestroy;
		unsigned int glassNameCount;
		G_GlassName* glassNames;
		unsigned char pad[108];
	};

	struct GlassWorld
	{
		const char* name;
		G_GlassData* g_glassData;
	};

	struct TriggerModel
	{
		int contents;
		unsigned short hullCount;
		unsigned short firstHull;
	};

	struct TriggerHull
	{
		Bounds bounds;
		int contents;
		unsigned short slabCount;
		unsigned short firstSlab;
	};

	struct TriggerSlab
	{
		float dir[3];
		float midPoint;
		float halfSize;
	};

	struct MapTriggers
	{
		unsigned int count;
		TriggerModel* models;
		unsigned int hullCount;
		TriggerHull* hulls;
		unsigned int slabCount;
		TriggerSlab* slabs;
	};

	struct ClientTriggerAabbNode
	{
		Bounds bounds;
		unsigned short firstChild;
		unsigned short childCount;
	};

	enum clientTriggerType_t : std::int32_t
	{
		CLIENT_TRIGGER_NONE = 0x0,
		CLIENT_TRIGGER_VISIONSET = 0x1,
		CLIENT_TRIGGER_AUDIO = 0x2,
		CLIENT_TRIGGER_BLEND_VISION = 0x4,
		CLIENT_TRIGGER_BLEND_AUDIO = 0x8,
		CLIENT_TRIGGER_BLEND_ALL = 0xC,
		CLIENT_TRIGGER_NPC = 0x10,
	};

	struct ClientTriggers
	{
		MapTriggers trigger;
		unsigned short numClientTriggerNodes;
		ClientTriggerAabbNode* clientTriggerAabbTree;
		unsigned int triggerStringLength;
		char* triggerString;
		short* visionSetTriggers;
		char* triggerType;
		float(*origins)[3];
		float* scriptDelay;
		short* audioTriggers;
		short* blendLookup;
		short* npcTriggers;
	};

	struct ClientTriggerBlendNode
	{
		float pointA[3];
		float pointB[3];
		unsigned short triggerA;
		unsigned short triggerB;
	};

	struct ClientTriggerBlend
	{
		unsigned short numClientTriggerBlendNodes;
		ClientTriggerBlendNode* blendNodes;
	};

	struct SpawnPointEntityRecord
	{
		unsigned short index;
		scr_string_t name;
		scr_string_t target;
		scr_string_t script_noteworthy;
		float origin[3];
		float angles[3];
	};

	struct SpawnPointRecordList
	{
		unsigned short spawnsCount;
		SpawnPointEntityRecord* spawns;
	};

	struct SplinePointEntityRecord
	{
		int splineId;
		int splineNodeId;
		char* splineNodeLabel;
		float splineNodeTension;
		float origin[3];
		float corridorDims[2];
		float tangent[3];
		float distToNextNode;
		vec3_t* positionCubic;
		vec3_t* tangentQuadratic;
	};

	struct SplinePointRecordList
	{
		unsigned short splinePointCount;
		float splineLength;
		SplinePointEntityRecord* splinePoints;
	};

	struct SplineRecordList
	{
		unsigned short splineCount;
		SplinePointRecordList* splines;
	};

	struct MapEnts
	{
		const char* name;
		char* entityString;
		int numEntityChars;
		MapTriggers trigger;
		ClientTriggers clientTrigger;
		ClientTriggerBlend clientTriggerBlend;
		SpawnPointRecordList spawnList;
		SplineRecordList splineList;
	};

	struct FxEffectDef;
	struct FxGlassDef
	{
		float halfThickness;
		float texVecs[2][2];
		GfxColor color;
		Material* material;
		Material* materialShattered;
		PhysPreset* physPreset;
		FxEffectDef* pieceBreakEffect;
		FxEffectDef* shatterEffect;
		FxEffectDef* shatterSmallEffect;
		FxEffectDef* crackDecalEffect;
		snd_alias_list_t* damagedSound;
		snd_alias_list_t* destroyedSound;
		snd_alias_list_t* destroyedQuietSound;
		float invHighMipRadius;
		float shatteredInvHighMipRadius;
		int numCrackRings;
		bool isOpaque;
	};

	struct FxSpatialFrame
	{
		float quat[4];
		float origin[3];
	};

	struct $03A8A7B39FA20F64B5AB79125E07CD62
	{
		FxSpatialFrame frame;
		float radius;
	};

	union FxGlassPiecePlace
	{
		$03A8A7B39FA20F64B5AB79125E07CD62 __s0;
		unsigned int nextFree;
	};

	struct FxGlassPieceState
	{
		float texCoordOrigin[2];
		unsigned int supportMask;
		unsigned short initIndex;
		unsigned short geoDataStart;
		unsigned short lightingIndex;
		unsigned char defIndex;
		unsigned char pad[3];
		unsigned char vertCount;
		unsigned char holeDataCount;
		unsigned char crackDataCount;
		unsigned char fanDataCount;
		unsigned short flags;
		float areaX2;
	};

	struct FxGlassPieceDynamics
	{
		int fallTime;
		__int64 physObjId;
		__int64 physJointId;
		float vel[3];
		float avel[3];
	};

	struct FxGlassVertex
	{
		short x;
		short y;
	};

	struct FxGlassHoleHeader
	{
		unsigned short uniqueVertCount;
		unsigned char touchVert;
		unsigned char pad[1];
	};

	struct FxGlassCrackHeader
	{
		unsigned short uniqueVertCount;
		unsigned char beginVertIndex;
		unsigned char endVertIndex;
	};

	union FxGlassGeometryData
	{
		FxGlassVertex vert;
		FxGlassHoleHeader hole;
		FxGlassCrackHeader crack;
		unsigned char asBytes[4];
		short anonymous[2];
	};

	struct FxGlassInitPieceState
	{
		FxSpatialFrame frame;
		float radius;
		float texCoordOrigin[2];
		unsigned int supportMask;
		float areaX2;
		unsigned short lightingIndex;
		unsigned char defIndex;
		unsigned char vertCount;
		unsigned char fanDataCount;
		unsigned char pad[1];
	};

	struct FxGlassSystem
	{
		int time;
		int prevTime;
		unsigned int defCount;
		unsigned int pieceLimit;
		unsigned int pieceWordCount;
		unsigned int initPieceCount;
		unsigned int cellCount;
		unsigned int activePieceCount;
		unsigned int firstFreePiece;
		unsigned int geoDataLimit;
		unsigned int geoDataCount;
		unsigned int initGeoDataCount;
		FxGlassDef* defs;
		FxGlassPiecePlace* piecePlaces;
		FxGlassPieceState* pieceStates;
		FxGlassPieceDynamics* pieceDynamics;
		FxGlassGeometryData* geoData;
		unsigned int* isInUse;
		unsigned int* cellBits;
		unsigned char* visData;
		vec3_t* linkOrg; //float(*linkOrg)[3];
		float* halfThickness;
		unsigned short* lightingHandles;
		FxGlassInitPieceState* initPieceStates;
		FxGlassGeometryData* initGeoData;
		bool needToCompactData;
		unsigned char initCount;
		float effectChanceAccum;
		int lastPieceDeletionTime;
	};

	struct FxWorld
	{
		const char* name;
		FxGlassSystem glassSys;
	};

	struct GfxSky
	{
		int skySurfCount;
		int* skyStartSurfs;
		GfxImage* skyImage;
		unsigned char skySamplerState;
	};

	struct GfxWorldDpvsPlanes
	{
		int cellCount;
		cplane_s* planes;
		unsigned short* nodes;
		unsigned int* sceneEntCellBits;
	};

	struct GfxCellTreeCount
	{
		int aabbTreeCount;
	};

	struct GfxAabbTree
	{
		Bounds bounds;
		unsigned short childCount;
		unsigned short surfaceCount;
		unsigned int startSurfIndex;
		unsigned short smodelIndexCount;
		unsigned short* smodelIndexes;
		int childrenOffset;
	};

	struct GfxCellTree
	{
		GfxAabbTree* aabbTree;
	};

	struct GfxPortal;

	struct GfxPortalWritable
	{
		bool isQueued;
		bool isAncestor;
		unsigned char recursionDepth;
		unsigned char hullPointCount;
		float(*hullPoints)[2];
		GfxPortal* queuedParent;
	};

	struct DpvsPlane
	{
		float coeffs[4];
	};

	struct GfxPortal
	{
		GfxPortalWritable writable;
		DpvsPlane plane;
		float(*vertices)[3];
		unsigned short cellIndex;
		unsigned short closeDistance;
		unsigned char vertexCount;
		float hullAxis[2][3];
	};

	struct GfxCell
	{
		Bounds bounds;
		int portalCount;
		GfxPortal* portals;
		unsigned char reflectionProbeCount;
		unsigned char* reflectionProbes;
		unsigned char reflectionProbeReferenceCount;
		unsigned char* reflectionProbeReferences;
	};

	struct GfxReflectionProbeVolumeData
	{
		float volumePlanes[6][4];
	};

	struct GfxReflectionProbe
	{
		float origin[3];
		GfxReflectionProbeVolumeData* probeVolumes;
		unsigned int probeVolumeCount;
	};

	struct GfxReflectionProbeReferenceOrigin
	{
		float origin[3];
	};

	struct GfxReflectionProbeReference
	{
		unsigned char index;
	};

	struct GfxLightmapArray
	{
		GfxImage* primary;
		GfxImage* secondary;
	};

	struct GfxWorldVertex
	{
		float xyz[3];
		float binormalSign;
		GfxColor color;
		float texCoord[2];
		float lmapCoord[2];
		PackedUnitVec normal;
		PackedUnitVec tangent;
	};

	struct GfxWorldVertexData
	{
		GfxWorldVertex* vertices;
		ID3D11Buffer* worldVb;
	};

	struct GfxWorldVertexLayerData
	{
		unsigned char* data;
		ID3D11Buffer* layerVb;
	};

	struct GfxWorldDraw
	{
		unsigned int reflectionProbeCount;
		GfxImage** reflectionProbes;
		GfxReflectionProbe* reflectionProbeOrigins;
		GfxTexture* reflectionProbeTextures;
		unsigned int reflectionProbeReferenceCount;
		GfxReflectionProbeReferenceOrigin* reflectionProbeReferenceOrigins;
		GfxReflectionProbeReference* reflectionProbeReferences;
		int lightmapCount;
		GfxLightmapArray* lightmaps;
		GfxTexture* lightmapPrimaryTextures;
		GfxTexture* lightmapSecondaryTextures;
		GfxImage* lightmapOverridePrimary;
		GfxImage* lightmapOverrideSecondary;
		unsigned int trisType;
		unsigned int vertexCount;
		GfxWorldVertexData vd;
		unsigned int vertexLayerDataSize;
		GfxWorldVertexLayerData vld;
		unsigned int indexCount;
		unsigned short* indices;
		ID3D11Buffer* indexBuffer;
	};

	struct GfxLightGridEntry
	{
		unsigned int colorsIndex;
		unsigned short primaryLightEnvIndex;
		unsigned char unused;
		unsigned char needsTrace;
	};

	struct GfxLightGridColors
	{
		unsigned char rgb[56][3];
	};

	struct GfxLightGridColorsHDR
	{
		float rgb[56][3];
	};

	struct GfxLightGridTree
	{
		unsigned char maxDepth;
		int nodeCount;
		int leafCount;
		int coordMinGridSpace[3];
		int coordMaxGridSpace[3];
		int coordHalfSizeGridSpace[3];
		int defaultColorIndexBitCount;
		int defaultLightIndexBitCount;
		unsigned int* p_nodeTable;
		int leafTableSize;
		unsigned char* p_leafTable;
	};

	struct GfxLightGrid
	{
		bool hasLightRegions;
		bool useSkyForLowZ;
		unsigned int lastSunPrimaryLightIndex;
		unsigned short mins[3];
		unsigned short maxs[3];
		unsigned int rowAxis;
		unsigned int colAxis;
		unsigned short* rowDataStart;
		unsigned int rawRowDataSize;
		unsigned char* rawRowData;
		unsigned int entryCount;
		GfxLightGridEntry* entries;
		unsigned int colorCount;
		GfxLightGridColors* colors;
		unsigned int missingGridColorIndex;
		int tableVersion;
		int paletteVersion;
		char rangeExponent8BitsEncoding;
		char rangeExponent12BitsEncoding;
		char rangeExponent16BitsEncoding;
		unsigned char stageCount;
		float* stageLightingContrastGain;
		unsigned int paletteEntryCount;
		int* paletteEntryAddress;
		unsigned int paletteBitstreamSize;
		unsigned char* paletteBitstream;
		GfxLightGridColorsHDR skyLightGridColors;
		GfxLightGridColorsHDR defaultLightGridColors;
		GfxLightGridTree tree;
	};

	struct GfxBrushModelWritable
	{
		Bounds bounds;
	};

	struct GfxBrushModel
	{
		GfxBrushModelWritable writable;
		Bounds bounds;
		float radius;
		unsigned int startSurfIndex;
		unsigned short surfaceCount;
	};

	struct MaterialMemory
	{
		Material* material;
		int memory;
	};

	struct sunflare_t
	{
		bool hasValidData;
		Material* spriteMaterial;
		Material* flareMaterial;
		float spriteSize;
		float flareMinSize;
		float flareMinDot;
		float flareMaxSize;
		float flareMaxDot;
		float flareMaxAlpha;
		int flareFadeInTime;
		int flareFadeOutTime;
		float blindMinDot;
		float blindMaxDot;
		float blindMaxDarken;
		int blindFadeInTime;
		int blindFadeOutTime;
		float glareMinDot;
		float glareMaxDot;
		float glareMaxLighten;
		int glareFadeInTime;
		int glareFadeOutTime;
		float sunFxPosition[3];
	};

	struct XModelDrawInfo
	{
		unsigned char hasGfxEntIndex;
		unsigned char lod;
		unsigned short surfId;
	};

	struct GfxSceneDynModel
	{
		XModelDrawInfo info;
		unsigned short dynEntId;
	};

	struct BModelDrawInfo
	{
		unsigned short surfId;
	};

	struct GfxSceneDynBrush
	{
		BModelDrawInfo info;
		unsigned short dynEntId;
	};

	struct GfxShadowGeometry
	{
		unsigned short surfaceCount;
		unsigned short smodelCount;
		unsigned int* sortedSurfIndex;
		unsigned short* smodelIndex;
	};

	struct GfxLightRegionAxis
	{
		float dir[3];
		float midPoint;
		float halfSize;
	};

	struct GfxLightRegionHull
	{
		float kdopMidPoint[9];
		float kdopHalfSize[9];
		unsigned int axisCount;
		GfxLightRegionAxis* axis;
	};

	struct GfxLightRegion
	{
		unsigned int hullCount;
		GfxLightRegionHull* hulls;
	};

	struct GfxStaticModelInst
	{
		Bounds bounds;
		float lightingOrigin[3];
	};

	struct srfTriangles_t
	{
		unsigned int vertexLayerData;
		unsigned int firstVertex;
		float maxEdgeLength;
		unsigned short vertexCount;
		unsigned short triCount;
		unsigned int baseIndex;
	};

	struct GfxSurfaceLightingAndFlagsFields
	{
		unsigned char lightmapIndex;
		unsigned char reflectionProbeIndex;
		unsigned short primaryLightEnvIndex;
		unsigned char flags;
		unsigned char unused[3];
	};

	union GfxSurfaceLightingAndFlags
	{
		GfxSurfaceLightingAndFlagsFields fields;
		unsigned __int64 packed;
	};

	struct GfxSurface
	{
		srfTriangles_t tris;
		Material* material;
		GfxSurfaceLightingAndFlags laf;
	};

	struct GfxSurfaceBounds
	{
		Bounds bounds;
		unsigned char flags;
		unsigned short mipRadius;
		unsigned char invHighMipRadius[5];
	};

	struct GfxPackedPlacement
	{
		float origin[3];
		float axis[3][3];
		float scale;
	};

	struct GfxStaticModelVertexLighting
	{
		unsigned char visibility[4];
		unsigned short ambientColorFloat16[4];
		unsigned short highlightColorFloat16[4];
	};

	struct GfxStaticModelVertexLightingInfo
	{
		GfxStaticModelVertexLighting* lightingValues;
		ID3D11Buffer* lightingValuesVb;
		ID3D11Buffer* lightingValuesSb;
		unsigned int subdiv_count_maybe;
		ID3D11Buffer* subDivCacheBuffer;
		ID3D11ShaderResourceView* subDivCacheViewBuffer;
		int flags;
		unsigned int numLightingValues;
	};

	struct GfxStaticModelLightmapInfo
	{
		float offset[2];
		float scale[2];
		int lightmapIndex;
	};

	enum StaticModelFlag : std::int32_t
	{
		STATIC_MODEL_FLAG_NO_CAST_SHADOW = 0x10,
		STATIC_MODEL_FLAG_GROUND_LIGHTING = 0x20,
		STATIC_MODEL_FLAG_LIGHTGRID_LIGHTING = 0x40,
		STATIC_MODEL_FLAG_VERTEXLIT_LIGHTING = 0x80,
		STATIC_MODEL_FLAG_LIGHTMAP_LIGHTING = 0x100,
		STATIC_MODEL_FLAG_ALLOW_FXMARK = 0x200,
		STATIC_MODEL_FLAG_REACTIVEMOTION = 0x400,
		STATIC_MODEL_FLAG_ANIMATED_VERTS = 0x800,
	};

	struct GfxStaticModelDrawInst
	{
		GfxPackedPlacement placement;
		XModel* model;
		float groundLighting[4];
		GfxStaticModelVertexLightingInfo vertexLightingInfo;
		GfxStaticModelLightmapInfo modelLightmapInfo;
		unsigned short lightingHandle;
		unsigned short cullDist;
		unsigned short flags;
		unsigned short staticModelId;
		unsigned short primaryLightEnvIndex;
		unsigned char reflectionProbeIndex;
		unsigned char firstMtlSkinIndex;
		unsigned char sunShadowFlags;
	};

	struct GfxWorldDpvsStatic
	{
		unsigned int smodelCount; // 0
		unsigned int staticSurfaceCount; // 4
		unsigned int litOpaqueSurfsBegin; // 8
		unsigned int litOpaqueSurfsEnd; // 12
		unsigned int litDecalSurfsBegin; // 16
		unsigned int litDecalSurfsEnd; // 20
		unsigned int litTransSurfsBegin; // 24
		unsigned int litTransSurfsEnd; // 28
		unsigned int shadowCasterSurfsBegin; // 32
		unsigned int shadowCasterSurfsEnd; // 36
		unsigned int emissiveSurfsBegin; // 40
		unsigned int emissiveSurfsEnd; // 44
		unsigned int smodelVisDataCount; // 48
		unsigned int surfaceVisDataCount; // 52
		unsigned int* smodelVisData[3]; // 56
		unsigned int* surfaceVisData[3]; // 80
		unsigned int* unknownData01[3]; // 104
		unsigned int* unknownData02[3]; // 128
		unsigned int* lodData; // 152
		unsigned int* tessellationCutoffVisData[3]; // 160
		unsigned int* sortedSurfIndex; // 184
		GfxStaticModelInst* smodelInsts; // 192
		GfxSurface* surfaces; // 200
		GfxSurfaceBounds* surfacesBounds; // 208
		GfxStaticModelDrawInst* smodelDrawInsts; // 216
		GfxDrawSurf* surfaceMaterials; // 224
		unsigned int* surfaceCastsSunShadow; // 232
		unsigned int sunShadowOptCount; // 240
		unsigned int sunSurfVisDataCount; // 244
		unsigned int* surfaceCastsSunShadowOpt; // 248
		char** constantBuffersLit; // 256
		char** constantBuffersAmbient; // 264
		volatile int usageCount; // 272
	};

	struct GfxWorldDpvsDynamic
	{
		unsigned int dynEntClientWordCount[2];
		unsigned int dynEntClientCount[2];
		unsigned int* dynEntCellBits[2];
		unsigned char* dynEntVisData[2][3];
	};

	struct GfxHeroOnlyLight
	{
		unsigned char type;
		unsigned char unused[3];
		float color[3];
		float dir[3];
		float up[3];
		float origin[3];
		float radius;
		float cosHalfFovOuter;
		float cosHalfFovInner;
		int exponent;
	};

	typedef void* umbraTomePtr_t;

	enum FogTypes : std::int8_t
	{
		FOG_NORMAL = 0x1,
		FOG_DFOG = 0x2,
	};

	struct GfxWorld
	{
		const char* name; // 0
		const char* baseName; // 8
		unsigned int bspVersion; // 16
		int planeCount; // 20
		int nodeCount; // 24
		unsigned int surfaceCount; // 28
		int skyCount; // 32
		GfxSky* skies; // 40
		unsigned int lastSunPrimaryLightIndex; // 48
		unsigned int primaryLightCount; // 52
		unsigned int primaryLightEnvCount; // 56
		unsigned int sortKeyLitDecal; // 60
		unsigned int sortKeyEffectDecal; // 64
		unsigned int sortKeyTopDecal; // 68
		unsigned int sortKeyEffectAuto; // 72
		unsigned int sortKeyDistortion; // 76
		GfxWorldDpvsPlanes dpvsPlanes; // 80
		GfxCellTreeCount* aabbTreeCounts; // 112
		GfxCellTree* aabbTrees; // 120
		GfxCell* cells; // 128
		GfxWorldDraw draw; // 136
		GfxLightGrid lightGrid; // 312
		int modelCount; // 1880
		GfxBrushModel* models; // 1888
		Bounds bounds; // 1896
		unsigned int checksum; // 1920
		int materialMemoryCount; // 1924
		MaterialMemory* materialMemory; // 1928
		sunflare_t sun; // 1936
		float outdoorLookupMatrix[4][4]; // 2160
		GfxImage* outdoorImage; // 2176
		unsigned int* cellCasterBits; // 2120
		unsigned int* cellHasSunLitSurfsBits; // 2128
		GfxSceneDynModel* sceneDynModel; // 2136
		GfxSceneDynBrush* sceneDynBrush; // 2144
		unsigned int* primaryLightEntityShadowVis; // 2152
		unsigned int* primaryLightDynEntShadowVis[2]; // 2160
		unsigned short* nonSunPrimaryLightForModelDynEnt; // 2176
		GfxShadowGeometry* shadowGeom; // 2184
		GfxShadowGeometry* shadowGeomOptimized; // 2192
		GfxLightRegion* lightRegion; // 2200
		GfxWorldDpvsStatic dpvs; // 2208
		GfxWorldDpvsDynamic dpvsDyn; // 2488
		unsigned int mapVtxChecksum; // 2512
		unsigned int heroOnlyLightCount; // 2520
		GfxHeroOnlyLight* heroOnlyLights; // 2520
		unsigned char fogTypesAllowed; // 2528
		unsigned int umbraTomeSize; // 2588
		char* umbraTomeData; // 2592
		umbraTomePtr_t umbraTomePtr; // 2600
	};

	enum CSurfaceFlags : std::uint32_t
	{
		SURF_FLAG_DEFAULT = 0x0,
		SURF_FLAG_BARK = 0x100000,
		SURF_FLAG_BRICK = 0x200000,
		SURF_FLAG_CARPET = 0x300000,
		SURF_FLAG_CLOTH = 0x400000,
		SURF_FLAG_CONCRETE = 0x500000,
		SURF_FLAG_DIRT = 0x600000,
		SURF_FLAG_FLESH = 0x700000,
		SURF_FLAG_FOLIAGE = 0x800000,
		SURF_FLAG_GLASS = 0x900000,
		SURF_FLAG_GRASS = 0xA00000,
		SURF_FLAG_GRAVEL = 0xB00000,
		SURF_FLAG_ICE = 0xC00000,
		SURF_FLAG_METAL = 0xD00000,
		SURF_FLAG_METAL_GRATE = 0xE00000,
		SURF_FLAG_MUD = 0xF00000,
		SURF_FLAG_PAPER = 0x1000000,
		SURF_FLAG_PLASTER = 0x1100000,
		SURF_FLAG_ROCK = 0x1200000,
		SURF_FLAG_SAND = 0x1300000,
		SURF_FLAG_SNOW = 0x1400000,
		SURF_FLAG_WATER = 0x1500000,
		SURF_FLAG_WOOD = 0x1600000,
		SURF_FLAG_ASPHALT = 0x1700000,
		SURF_FLAG_CERAMIC = 0x1800000,
		SURF_FLAG_PLASTIC = 0x1900000,
		SURF_FLAG_RUBBER = 0x1A00000,
		SURF_FLAG_FRUIT = 0x1B00000,
		SURF_FLAG_PAINTEDMETAL = 0x1C00000,
		SURF_FLAG_RIOTSHIELD = 0x1D00000,
		SURF_FLAG_SLUSH = 0x1E00000,
		SURF_FLAG_CUSHION = 0x400000,
		SURF_FLAG_OPAQUEGLASS = 0x900000,
		SURF_FLAG_CLIPMISSILE = 0x0,
		SURF_FLAG_AI_NOSIGHT = 0x0,
		SURF_FLAG_CLIPSHOT = 0x0,
		SURF_FLAG_PLAYERCLIP = 0x0,
		SURF_FLAG_MONSTERCLIP = 0x0,
		SURF_FLAG_AICLIPALLOWDEATH = 0x0,
		SURF_FLAG_VEHICLECLIP = 0x0,
		SURF_FLAG_ITEMCLIP = 0x0,
		SURF_FLAG_NODROP = 0x0,
		SURF_FLAG_NONSOLID = 0x4000,
		SURF_FLAG_DETAIL = 0x0,
		SURF_FLAG_STRUCTURAL = 0x0,
		SURF_FLAG_PORTAL = 0x80000000,
		SURF_FLAG_CANSHOOTCLIP = 0x0,
		SURF_FLAG_ORIGIN = 0x0,
		SURF_FLAG_SKY = 0x4,
		SURF_FLAG_NOCASTSHADOW = 0x40000,
		SURF_FLAG_PHYSICSGEOM = 0x0,
		SURF_FLAG_LIGHTPORTAL = 0x0,
		SURF_FLAG_OUTDOORBOUNDS = 0x0,
		SURF_FLAG_SLICK = 0x2,
		SURF_FLAG_NOIMPACT = 0x10,
		SURF_FLAG_NOMARKS = 0x20,
		SURF_FLAG_NOPENETRATE = 0x100,
		SURF_FLAG_LADDER = 0x8,
		SURF_FLAG_NODAMAGE = 0x1,
		SURF_FLAG_MANTLEON = 0x2000000,
		SURF_FLAG_MANTLEOVER = 0x4000000,
		SURF_FLAG_STAIRS = 0x200,
		SURF_FLAG_SOFT = 0x1000,
		SURF_FLAG_NOSTEPS = 0x2000,
		SURF_FLAG_NODRAW = 0x80,
		SURF_FLAG_NOLIGHTMAP = 0x400,
		SURF_FLAG_NODLIGHT = 0x20000,
	};

	struct ClipMaterial
	{
		const char* name;
		int surfaceFlags;
		int contents;
	};

	struct cLeafBrushNodeLeaf_t
	{
		unsigned short* brushes;
	};

	struct cLeafBrushNodeChildren_t
	{
		float dist;
		float range;
		unsigned short childOffset[2];
	};

	union cLeafBrushNodeData_t
	{
		cLeafBrushNodeLeaf_t leaf;
		cLeafBrushNodeChildren_t children;
	};

	struct cLeafBrushNode_s
	{
		unsigned char axis;
		short leafBrushCount;
		int contents;
		cLeafBrushNodeData_t data;
	};

	struct ClipInfo
	{
		int planeCount;
		cplane_s* planes;
		unsigned int numMaterials;
		ClipMaterial* materials;
		unsigned int numBrushSides;
		cbrushside_t* brushsides;
		unsigned int numBrushEdges;
		cbrushedge_t* brushEdges;
		unsigned int leafbrushNodesCount;
		cLeafBrushNode_s* leafbrushNodes;
		unsigned int numLeafBrushes;
		unsigned short* leafbrushes;
		unsigned short numBrushes;
		cbrush_t* brushes;
		Bounds* brushBounds;
		int* brushContents;
	};

	struct cStaticModel_s
	{
		XModel* xmodel;
		float origin[3];
		float invScaledAxis[3][3];
		Bounds absBounds;
	};

	struct cNode_t
	{
		cplane_s* plane;
		short children[2];
	};

	struct cLeaf_t
	{
		unsigned short firstCollAabbIndex;
		unsigned short collAabbCount;
		int brushContents;
		int terrainContents;
		Bounds bounds;
		int leafBrushNode;
	};

	struct CollisionBorder
	{
		float distEq[3];
		float zBase;
		float zSlope;
		float start;
		float length;
	};

	struct CollisionPartition
	{
		unsigned char triCount;
		unsigned char borderCount;
		unsigned char firstVertSegment;
		int firstTri;
		CollisionBorder* borders;
	};

	union CollisionAabbTreeIndex
	{
		int firstChildIndex;
		int partitionIndex;
	};

	struct CollisionAabbTree
	{
		float midPoint[3];
		unsigned short materialIndex;
		unsigned short childCount;
		float halfSize[3];
		CollisionAabbTreeIndex u;
	};

	struct cmodel_t
	{
		Bounds bounds;
		float radius;
		ClipInfo* info;
		cLeaf_t leaf;
	};

	struct Stage
	{
		const char* name;
		float origin[3];
		unsigned short triggerIndex;
		unsigned char sunPrimaryLightIndex;
	};

	struct SModelAabbNode
	{
		Bounds bounds;
		unsigned short firstChild;
		unsigned short childCount;
	};

	enum DynEntityType : int
	{
		DYNENT_TYPE_INVALID = 0x0,
		DYNENT_TYPE_CLUTTER = 0x1,
		DYNENT_TYPE_DESTRUCT = 0x2,
		DYNENT_TYPE_HINGE = 0x3,
		DYNENT_TYPE_SCRIPTABLEINST = 0x4,
		DYNENT_TYPE_SCRIPTABLEPHYSICS = 0x5,
		DYNENT_TYPE_LINKED = 0x6,
		DYNENT_TYPE_LINKED_NOSHADOW = 0x7,
		DYNENT_TYPE_COUNT = 0x8,
	};

	struct GfxPlacement
	{
		float quat[4];
		float origin[3];
	};

	struct DynEntityHingeDef
	{
		float axisOrigin[3];
		float axisDir[3];
		bool isLimited;
		float angleMin;
		float angleMax;
		float momentOfInertia;
		float friction;
	};

	struct DynEntityLinkToDef
	{
		int anchorIndex;
		float originOffset[3];
		float angleOffset[3];
	};

	struct DynEntityDef
	{
		DynEntityType type;
		GfxPlacement pose;
		XModel* baseModel; //const XModel* baseModel;
		unsigned short brushModel;
		unsigned short physicsBrushModel;
		unsigned short scriptableIndex;
		unsigned short health;
		FxEffectDef* destroyFx; //const FxEffectDef* destroyFx;
		PhysPreset* physPreset;
		DynEntityHingeDef* hinge;
		DynEntityLinkToDef* linkTo;
		PhysMass mass;
		int contents;
	};

	struct DynEntityPose
	{
		GfxPlacement pose;
		float radius;
	};

	struct Hinge
	{
		float angle;
		float quat[4];
		float angularVel;
		float torqueAccum;
		bool active;
		float autoDisableTimeLeft;
		DynEntityHingeDef* def; //const DynEntityHingeDef* def;
		PhysPreset* physPreset; //const PhysPreset* physPreset;
		float centerOfMassRelToAxisOriginAtAngleZero[3];
	};

	struct DynEntityClient
	{
		__int64 physObjId;
		unsigned short flags;
		unsigned short lightingHandle;
		unsigned short health;
		Hinge* hinge;
		XModel* activeModel; //const XModel* activeModel;
		int contents;
	};

	struct DynEntityColl
	{
		unsigned short sector;
		unsigned short nextEntInSector;
		float linkMins[2];
		float linkMaxs[2];
	};

	enum ScriptableEventType : int
	{
		SCRIPTABLE_EVENT_MODEL = 0x0,
		SCRIPTABLE_EVENT_FX = 0x1,
		SCRIPTABLE_EVENT_SOUND = 0x2,
		SCRIPTABLE_EVENT_ANIMATION = 0x3,
		SCRIPTABLE_EVENT_EXPLODE = 0x4,
		SCRIPTABLE_EVENT_HEALTHDRAIN = 0x5,
		SCRIPTABLE_EVENT_PHYSICSLAUNCH = 0x6,
		SCRIPTABLE_EVENT_LIGHTSETTINGS = 0x7,
		SCRIPTABLE_EVENT_SUNLIGHTSETTINGS = 0x8,
		SCRIPTABLE_EVENT_SHAKE = 0x9,
		SCRIPTABLE_EVENT_STATECHANGE = 0xA,
		SCRIPTABLE_EVENT_COUNT = 0xB,
	};

	struct ScriptableEventStateChangeDef
	{
		unsigned char targetIndex;
		unsigned char delayStreamIndex;
		unsigned short delayMin;
		unsigned short delayMax;
	};

	struct ScriptableEventModelDef
	{
		XModel* model;
	};

	struct ScriptableEventFxDef
	{
		FxEffectDef* handle; //const FxEffectDef* handle;
		scr_string_t tagName;
		unsigned short loopTime;
		unsigned char loopTimeStreamIndex;
		bool tagUseAngles;
	};

	struct ScriptableEventSoundDef
	{
		snd_alias_list_t* alias;
		bool looping;
	};

	struct ScriptableEventAnimationDef
	{
		const char* animName;
		bool override;
		bool stateful;
		unsigned char animEntryIndex;
		unsigned char animPlaybackStreamIndex;
		unsigned short timeOffsetMin;
		unsigned short timeOffsetMax;
		unsigned short playbackRateMin;
		unsigned short playbackRateMax;
		unsigned short blendTime;
	};

	struct ScriptableEventExplodeDef
	{
		unsigned short forceMin;
		unsigned short forceMax;
		unsigned short radius;
		unsigned short damageMin;
		unsigned short damageMax;
		bool aiAvoid;
	};

	struct ScriptableEventHealthDef
	{
		unsigned short amount;
		unsigned short interval;
		unsigned short badPlaceRadius;
		unsigned char streamIndex;
	};

	struct ScriptableEventPhysicsDef
	{
		XModel* model;
		unsigned char launchDirX;
		unsigned char launchDirY;
		unsigned char launchDirZ;
		unsigned short explForceScale;
		unsigned short bulletForceScale;
	};

	struct ScriptableEventLightSettingsDef
	{
		unsigned char color[4];
		unsigned char lightIndexConstIndex;
		unsigned char transStateStreamIndex;
		unsigned char useColor;
		unsigned char useStateTransitionTime;
		unsigned short intensityScaleMin;
		unsigned short intensityScaleMax;
		unsigned short radiusScaleMin;
		unsigned short radiusScaleMax;
		const char* noteworthy;
		unsigned short transitionTimeMin;
		unsigned short transitionTimeMax;
	};

	struct ScriptableEventSunlightSettingsDef
	{
		unsigned char color[4];
		unsigned char transStateStreamIndex;
		unsigned char flags;
		unsigned short intensityScaleMin;
		unsigned short intensityScaleMax;
		unsigned short pitchMin;
		unsigned short pitchMax;
		unsigned short headingMin;
		unsigned short headingMax;
		unsigned short transitionTimeMin;
		unsigned short transitionTimeMax;
	};

	struct ScriptableEventShakeDef
	{
		const char* rumbleName;
		unsigned short duration;
		unsigned short durationFadeUp;
		unsigned short durationFadeDown;
		unsigned short radius;
		unsigned short exponent;
		unsigned short scaleEarthquake;
		unsigned char scalePitch;
		unsigned char scaleYaw;
		unsigned char scaleRoll;
		unsigned char frequencyPitch;
		unsigned char frequencyYaw;
		unsigned char frequencyRoll;
		unsigned char flags;
	};

	union ScriptableEventDataUnion
	{
		ScriptableEventStateChangeDef stateChange;
		ScriptableEventModelDef setModel;
		ScriptableEventFxDef playFx;
		ScriptableEventSoundDef playSound;
		ScriptableEventAnimationDef playAnim;
		ScriptableEventExplodeDef doExplosion;
		ScriptableEventHealthDef healthDrain;
		ScriptableEventPhysicsDef physicsLaunch;
		ScriptableEventLightSettingsDef lightSettings;
		ScriptableEventSunlightSettingsDef sunlightSettings;
		ScriptableEventShakeDef shake;
	};

	struct ScriptableEventDef
	{
		ScriptableEventType type;
		ScriptableEventDataUnion data;
	};

	struct ScriptableStateDef
	{
		scr_string_t name;
		scr_string_t tagName;
		ScriptableEventDef* onEnterEvents;
		unsigned char onEnterEventCount;
		unsigned char damageFlags;
		unsigned char damageParentTransferRate;
		unsigned char damageParentReceiveRate;
		unsigned short maxHealth;
	};

	struct ScriptablePartDef
	{
		ScriptableStateDef* states;
		scr_string_t name;
		unsigned char stateCount;
		unsigned char flags;
		unsigned char eventStreamTimeRemainIndex;
		unsigned char eventStreamNextChangeTimeIndex;
	};

	enum ScriptableNotetrackType : int
	{
		SCRIPTABLE_NT_FX = 0x0,
		SCRIPTABLE_NT_SOUND = 0x1,
		SCRIPTABLE_NT_COUNT = 0x2,
	};

	struct ScriptableNotetrackFxDef
	{
		FxEffectDef* handle; //const FxEffectDef* handle;
		scr_string_t tagName;
		bool useAngles;
	};

	struct ScriptableNotetrackSoundDef
	{
		snd_alias_list_t* alias;
	};

	union ScriptableNotetrackDataUnion
	{
		ScriptableNotetrackFxDef playFx;
		ScriptableNotetrackSoundDef playSound;
	};

	struct ScriptableNotetrackDef
	{
		scr_string_t name;
		ScriptableNotetrackType type;
		ScriptableNotetrackDataUnion data;
	};

	enum ScriptableType : int
	{
		SCRIPTABLE_TYPE_GENERAL = 0x0,
		SCRIPTABLE_TYPE_CHARACTER = 0x1,
		SCRIPTABLE_TYPE_COUNT = 0x2,
	};

	struct ScriptableDef
	{
		const char* name;
		XModel* baseModel;
		const char* baseCollisionBrush;
		const char* destroyedCollisionBrush;
		ScriptablePartDef* parts;
		ScriptableNotetrackDef* notetracks;
		ScriptableType type;
		unsigned char flags;
		unsigned char partCount;
		unsigned char serverInstancePartCount;
		unsigned char serverControlledPartCount;
		unsigned char notetrackCount;
		unsigned char eventStreamSize;
		unsigned char eventConstantsSize;
	};

	struct ScriptableInstancePartState
	{
		unsigned short curHealth;
		unsigned char lastExecutedStateIndex;
		unsigned char stateIndex;
	};

	struct ScriptableInstance
	{
		ScriptableDef* def;
		unsigned char* eventConstantsBuf;
		float origin[3];
		float angles[3];
		scr_string_t targetname;
		unsigned short preBrushModel;
		unsigned short postBrushModel;
		unsigned char flags;
		XModel* currentModel;
		ScriptableInstancePartState* partStates;
		unsigned char* eventStreamBuf;
		unsigned int currentPartBits[8];
		unsigned int damageOwnerEntHandle;
		unsigned short updateNextInstance;
		unsigned short linkedObject;
	};

	struct ScriptableAnimationEntry
	{
		const char* animName;
		unsigned __int64 runtimeBuf;
	};

	struct ScriptableMapEnts
	{
		unsigned int instanceStateSize;
		unsigned int instanceCount;
		unsigned int reservedInstanceCount;
		ScriptableInstance* instances;
		unsigned int animEntryCount;
		ScriptableAnimationEntry* animEntries;
		unsigned int replicatedInstanceCount;
	};

	struct clipMap_t // alignas(128)
	{
		const char* name;
		int isInUse;
		ClipInfo info;
		ClipInfo* pInfo;
		unsigned int numStaticModels;
		cStaticModel_s* staticModelList;
		unsigned int numNodes;
		cNode_t* nodes;
		unsigned int numLeafs;
		cLeaf_t* leafs;
		unsigned int vertCount;
		vec3_t* verts; //float(*verts)[3];
		int triCount;
		unsigned short* triIndices;
		unsigned char* triEdgeIsWalkable;
		int borderCount;
		CollisionBorder* borders;
		int partitionCount;
		CollisionPartition* partitions;
		int aabbTreeCount;
		CollisionAabbTree* aabbTrees;
		unsigned int numSubModels;
		cmodel_t* cmodels;
		MapEnts* mapEnts;
		Stage* stages;
		unsigned char stageCount;
		MapTriggers stageTrigger;
		unsigned short smodelNodeCount;
		SModelAabbNode* smodelNodes;
		unsigned short dynEntCount[2];
		DynEntityDef* dynEntDefList[2];
		DynEntityPose* dynEntPoseList[2];
		DynEntityClient* dynEntClientList[2];
		DynEntityColl* dynEntCollList[2];
		unsigned int dynEntAnchorCount;
		scr_string_t* dynEntAnchorNames;
		ScriptableMapEnts scriptableMapEnts;
		unsigned int checksum;
		char __pad[108]; // alignment padding
	};

	struct Glyph
	{
		unsigned short letter;
		char x0;
		char y0;
		unsigned char dx;
		unsigned char pixelWidth;
		unsigned char pixelHeight;
		float s0;
		float t0;
		float s1;
		float t1;
	};

	struct Font_s
	{
		union
		{
			const char* fontName;
			const char* name;
		};
		int pixelHeight;
		int glyphCount;
		Material* material;
		Material* glowMaterial;
		Glyph* glyphs;
	};

	struct LocalizeEntry
	{
		const char* value;
		const char* name;
	};

	enum FxElemType : std::uint8_t
	{
		FX_ELEM_TYPE_SPRITE_BILLBOARD = 0,
		FX_ELEM_TYPE_SPRITE_ORIENTED = 1,
		FX_ELEM_TYPE_TAIL = 2,
		FX_ELEM_TYPE_TRAIL = 3,
		FX_ELEM_TYPE_FLARE = 4,
		FX_ELEM_TYPE_PARTICLE_SIM_ANIMATION = 5,
		FX_ELEM_TYPE_APEX_TURBULENCE = 6,
		FX_ELEM_TYPE_NVIDIA_HAIR = 7,
		FX_ELEM_TYPE_CLOUD = 8,
		FX_ELEM_TYPE_SPARK_CLOUD = 9,
		FX_ELEM_TYPE_SPARK_FOUNTAIN = 10,
		FX_ELEM_TYPE_MODEL = 11,
		FX_ELEM_TYPE_OMNI_LIGHT = 12,
		FX_ELEM_TYPE_SPOT_LIGHT = 13,
		FX_ELEM_TYPE_SOUND = 14,
		FX_ELEM_TYPE_DECAL = 15,
		FX_ELEM_TYPE_RUNNER = 16,
		FX_ELEM_TYPE_VECTORFIELD = 17,
	};

	enum FxElemLitType : std::uint8_t
	{
		FX_ELEM_LIT_TYPE_NONE = 0x0,
		FX_ELEM_LIT_TYPE_LIGHTGRID_SPAWN_SINGLE = 0x1,
		FX_ELEM_LIT_TYPE_LIGHTGRID_FRAME_SINGLE = 0x2,
		FX_ELEM_LIT_TYPE_LIGHTGRID_FRAME_SPRITE = 0x3,
		FX_ELEM_LIT_TYPE_LIGHTGRID_FRAME_VERTEX = 0x4,
		FX_ELEM_LIT_TYPE_COUNT = 0x5,
	};

	enum FxElemDefFlags : std::uint32_t
	{
		FX_ELEM_SPAWN_RELATIVE_TO_EFFECT = 0x2,
		FX_ELEM_SPAWN_FRUSTUM_CULL = 0x4,
		FX_ELEM_RUNNER_USES_RAND_ROT = 0x8,
		FX_ELEM_SPAWN_OFFSET_NONE = 0x0,
		FX_ELEM_SPAWN_OFFSET_SPHERE = 0x10,
		FX_ELEM_SPAWN_OFFSET_CYLINDER = 0x20,
		FX_ELEM_SPAWN_OFFSET_MASK = 0x30,
		FX_ELEM_RUN_RELATIVE_TO_WORLD = 0x0,
		FX_ELEM_RUN_RELATIVE_TO_SPAWN = 0x40,
		FX_ELEM_RUN_RELATIVE_TO_EFFECT = 0x80,
		FX_ELEM_RUN_RELATIVE_TO_OFFSET = 0xC0,
		FX_ELEM_RUN_RELATIVE_TO_CAMERA = 0x100,
		FX_ELEM_RUN_MASK = 0x1C0,
		FX_ELEM_DIE_ON_TOUCH = 0x200,
		FX_ELEM_DRAW_PAST_FOG = 0x400,
		FX_ELEM_DRAW_WITH_VIEWMODEL = 0x800,
		FX_ELEM_BLOCK_SIGHT = 0x1000,
		FX_ELEM_DRAW_IN_THERMAL_VIEW_ONLY = 0x2000,
		FX_ELEM_TRAIL_ORIENT_BY_VELOCITY = 0x4000,
		FX_ELEM_EMIT_BOLT = 0x80000000,
		FX_ELEM_EMIT_ORIENT_BY_ELEM = 0x8000,
		FX_ELEM_USE_OCCLUSION_QUERY = 0x10000,
		FX_ELEM_NODRAW_IN_THERMAL_VIEW = 0x20000,
		FX_ELEM_THERMAL_MASK = 0x22000,
		FX_ELEM_SPAWN_IMPACT_FX_WITH_SURFACE_NAME = 0x40000,
		FX_ELEM_RECEIVE_DYNAMIC_LIGHT = 0x80000,
		FX_ELEM_VOLUMETRIC_TRAIL = 0x100000,
		FX_ELEM_USE_COLLISION = 0x200000,
		FX_ELEM_USE_VECTORFIELDS = 0x400000,
		FX_ELEM_NO_SURFACE_HDR_SCALAR = 0x800000,
		FX_ELEM_HAS_VELOCITY_GRAPH_LOCAL = 0x1000000,
		FX_ELEM_HAS_VELOCITY_GRAPH_WORLD = 0x2000000,
		FX_ELEM_HAS_GRAVITY = 0x4000000,
		FX_ELEM_USE_MODEL_PHYSICS = 0x8000000,
		FX_ELEM_NONUNIFORM_SCALE = 0x10000000,
		FX_ELEM_CLOUD_SHAPE_CUBE = 0x0,
		FX_ELEM_CLOUD_SHAPE_SPHERE_LARGE = 0x20000000,
		FX_ELEM_CLOUD_SHAPE_SPHERE_MEDIUM = 0x40000000,
		FX_ELEM_CLOUD_SHAPE_SPHERE_SMALL = 0x60000000,
		FX_ELEM_CLOUD_SHAPE_MASK = 0x60000000,
		FX_ELEM_FOUNTAIN_DISABLE_COLLISION = 0x80000000,
	};

	enum FxElemDefExtraFlags : std::uint32_t
	{

	};

	struct FxFloatRange
	{
		float base;
		float amplitude;
	};

	struct FxSpawnDefLooping
	{
		int intervalMsec;
		int count;
	};

	struct FxIntRange
	{
		int base;
		int amplitude;
	};

	struct FxSpawnDefOneShot
	{
		FxIntRange count;
	};

	union FxSpawnDef
	{
		FxSpawnDefLooping looping;
		FxSpawnDefOneShot oneShot;
	};

	struct FxElemAtlas
	{
		unsigned char behavior;
		unsigned char index;
		unsigned char fps;
		unsigned char loopCount;
		unsigned char colIndexBits;
		unsigned char rowIndexBits;
		short entryCount;
	};

	struct FxEffectDef;
	union FxEffectDefRef
	{
		FxEffectDef* handle;
		const char* name;
	};

	struct FxElemVec3Range
	{
		float base[3];
		float amplitude[3];
	};

	struct FxElemVelStateInFrame
	{
		FxElemVec3Range velocity;
		FxElemVec3Range totalDelta;
	};

	struct FxElemVelStateSample
	{
		FxElemVelStateInFrame local;
		FxElemVelStateInFrame world;
	};

	struct FxElemVisualState
	{
		float color[4];
		float unlitHDRScale;
		float rotationDelta;
		float rotationTotal;
		float size[2];
		float scale;
	};

	struct FxElemVisStateSample
	{
		FxElemVisualState base;
		FxElemVisualState amplitude;
	};

	struct FxParticleSimAnimationHeader
	{
		float playbackRate;
		float duration;
		unsigned int frameCount;
		float minX;
		float minY;
		float minZ;
		float boundsXDelta;
		float boundsYDelta;
		float boundsZDelta;
		float maxWidth;
		float maxHeight;
		unsigned int colorTableSize;
		unsigned int particleDataCount;
		bool evalVisStatePerParticle;
		bool sortParticlesAtRuntime;
	};

	struct FxParticleSimAnimationParticleData
	{
		unsigned short xNormalizedPos;
		unsigned short yNormalizedPos;
		unsigned short zNormalizedPos;
		unsigned short xNormalizedWidth;
		unsigned short yNormalizedHeight;
		unsigned short orientation;
		unsigned short lifetime;
		unsigned short particleID;
		unsigned short xNormalizedPosNextFrame;
		unsigned short yNormalizedPosNextFrame;
		unsigned short zNormalizedPosNextFrame;
		unsigned short xNormalizedWidthNextFrame;
		unsigned short yNormalizedHeightNextFrame;
		short orientationDelta;
		unsigned short colorTableIndex;
		unsigned short nextColorTableIndex;
	};

	struct FxParticleSimAnimationFrame
	{
		unsigned int particleDataOffset;
		unsigned int numActiveParticles;
	};

	struct FxParticleSimAnimation
	{
		const char* name;
		Material* material;
		FxParticleSimAnimationHeader header;
		FxParticleSimAnimationParticleData* particleData;
		FxParticleSimAnimationFrame* frames;
		GfxColorFloat* colorTable;
	};

	union FxElemVisuals
	{
		const void* anonymous;
		Material* material;
		XModel* model;
		FxEffectDefRef effectDef;
		const char* soundName;
		const char* vectorFieldName;
		GfxLightDef* lightDef;
		FxParticleSimAnimation* particleSimAnimation;
	};

	struct FxElemMarkVisuals
	{
		Material* materials[3];
	};

	union FxElemDefVisuals
	{
		FxElemMarkVisuals* markArray;
		FxElemVisuals* array;
		FxElemVisuals instance;
	};

	struct FxTrailVertex
	{
		float pos[2];
		float normal[2];
		float texCoord[2];
	};

	struct FxTrailDef
	{
		int scrollTimeMsec;
		int repeatDist;
		float invSplitDist;
		float invSplitArcDist;
		float invSplitTime;
		int vertCount;
		FxTrailVertex* verts;
		int indCount;
		unsigned short* inds;
	};

	struct FxSparkFountainDef
	{
		float gravity;
		float bounceFrac;
		float bounceRand;
		float sparkSpacing;
		float sparkLength;
		int sparkCount;
		float loopTime;
		float velMin;
		float velMax;
		float velConeFrac;
		float restSpeed;
		float boostTime;
		float boostFactor;
	};

	struct FxSpotLightDef
	{
		float fovInnerFraction;
		float startRadius;
		float endRadius;
		float brightness;
		float maxLength;
		int exponent;
	};

	struct FxFlareDef
	{
		float position;
		int angularRotCount;
		int flags;
		FxFloatRange depthScaleRange;
		FxFloatRange depthScaleValue;
		FxFloatRange radialRot;
		FxFloatRange radialScaleX;
		FxFloatRange radialScaleY;
		float dir[3];
		int intensityXIntervalCount;
		int intensityYIntervalCount;
		int srcCosIntensityIntervalCount;
		int srcCosScaleIntervalCount;
		float* intensityX;
		float* intensityY;
		float* srcCosIntensity;
		float* srcCosScale;
	};

	union FxElemExtendedDefPtr
	{
		FxTrailDef* trailDef;
		FxSparkFountainDef* sparkFountainDef;
		FxSpotLightDef* spotLightDef;
		FxFlareDef* flareDef;
		char* unknownDef;
	};

	struct FxElemDef
	{
		FxElemDefFlags flags;
		int flags2;
		FxSpawnDef spawn;
		FxFloatRange spawnRange;
		FxFloatRange fadeInRange;
		FxFloatRange fadeOutRange;
		float spawnFrustumCullRadius;
		FxIntRange spawnDelayMsec;
		FxIntRange lifeSpanMsec;
		FxFloatRange spawnOrigin[3];
		FxFloatRange spawnOffsetRadius;
		FxFloatRange spawnOffsetHeight;
		FxFloatRange spawnAngles[3];
		FxFloatRange angularVelocity[3];
		FxFloatRange initialRotation;
		FxFloatRange gravity;
		FxFloatRange reflectionFactor;
		FxElemAtlas atlas;
		FxElemType elemType;
		FxElemLitType elemLitType;
		unsigned char visualCount;
		unsigned char velIntervalCount;
		unsigned char visStateIntervalCount;
		FxElemVelStateSample* velSamples;
		FxElemVisStateSample* visSamples;
		FxElemDefVisuals visuals;
		Bounds collBounds;
		FxEffectDefRef effectOnImpact;
		FxEffectDefRef effectOnDeath;
		FxEffectDefRef effectEmitted;
		FxFloatRange emitDist;
		FxFloatRange emitDistVariance;
		FxElemExtendedDefPtr extended;
		unsigned char sortOrder;
		unsigned char lightingFrac;
		unsigned char useItemClip;
		unsigned char fadeInfo;
		int randomSeed;
		float litMaxColorChangePerSec;
		float unlitHDRScalar;
		float litHDRScalar;
		float litUnlitBlendFactor;
	};

	struct FxEffectDef
	{
		const char* name;
		int flags;
		int totalSize;
		int msecLoopingLife;
		int elemDefCountLooping;
		int elemDefCountOneShot;
		int elemDefCountEmission;
		float elemMaxRadius;
		float occlusionQueryDepthBias;
		int occlusionQueryFadeIn;
		int occlusionQueryFadeOut;
		FxFloatRange occlusionQueryScaleRange;
		FxElemDef* elemDefs;
	};

	enum weaponIconRatioType_t : std::int32_t
	{
		WEAPON_ICON_RATIO_1TO1 = 0x0,
		WEAPON_ICON_RATIO_2TO1 = 0x1,
		WEAPON_ICON_RATIO_4TO1 = 0x2,
		WEAPON_ICON_RATIO_COUNT = 0x3,
	};

	enum ammoCounterClipType_t : std::int32_t
	{
		AMMO_COUNTER_CLIP_NONE = 0x0,
		AMMO_COUNTER_CLIP_MAGAZINE = 0x1,
		AMMO_COUNTER_CLIP_SHORTMAGAZINE = 0x2,
		AMMO_COUNTER_CLIP_SHOTGUN = 0x3,
		AMMO_COUNTER_CLIP_ROCKET = 0x4,
		AMMO_COUNTER_CLIP_BELTFED = 0x5,
		AMMO_COUNTER_CLIP_ALTWEAPON = 0x6,
		AMMO_COUNTER_CLIP_COUNT = 0x7,
	};

	enum ImpactType : std::int32_t
	{
		IMPACT_TYPE_NONE = 0x0,
		IMPACT_TYPE_BULLET_SMALL = 0x1,
		IMPACT_TYPE_BULLET_LARGE = 0x2,
		IMPACT_TYPE_BULLET_AP = 0x3,
		IMPACT_TYPE_BULLET_EXPLODE = 0x4,
		IMPACT_TYPE_SHOTGUN = 0x5,
		IMPACT_TYPE_SHOTGUN_EXPLODE = 0x6,
		IMPACT_TYPE_GRENADE_BOUNCE = 0x7,
		IMPACT_TYPE_GRENADE_EXPLODE = 0x8,
		IMPACT_TYPE_ROCKET_EXPLODE = 0x9,
		IMPACT_TYPE_PROJECTILE_DUD = 0xA,
		IMPACT_TYPE_COUNT = 0xB,
	};

	enum weapType_t : std::int32_t
	{
		WEAPTYPE_NONE = 0x0,
		WEAPTYPE_BULLET = 0x1,
		WEAPTYPE_GRENADE = 0x2,
		WEAPTYPE_PROJECTILE = 0x3,
		WEAPTYPE_RIOTSHIELD = 0x4,
		WEAPTYPE_NUM = 0x5,
	};

	enum weapClass_t : std::int32_t
	{
		WEAPCLASS_RIFLE = 0x0,
		WEAPCLASS_SNIPER = 0x1,
		WEAPCLASS_MG = 0x2,
		WEAPCLASS_SMG = 0x3,
		WEAPCLASS_SPREAD = 0x4,
		WEAPCLASS_PISTOL = 0x5,
		WEAPCLASS_GRENADE = 0x6,
		WEAPCLASS_ROCKETLAUNCHER = 0x7,
		WEAPCLASS_TURRET = 0x8,
		WEAPCLASS_THROWINGKNIFE = 0x9,
		WEAPCLASS_NON_PLAYER = 0xA,
		WEAPCLASS_ITEM = 0xB,
		WEAPCLASS_NUM = 0xC,
	};

	enum PenetrateType : std::int32_t
	{
		PENETRATE_TYPE_NONE = 0x0,
		PENETRATE_TYPE_SMALL = 0x1,
		PENETRATE_TYPE_MEDIUM = 0x2,
		PENETRATE_TYPE_LARGE = 0x3,
		PENETRATE_TYPE_COUNT = 0x4,
	};

	enum weapInventoryType_t : std::int32_t
	{
		WEAPINVENTORY_PRIMARY = 0x0,
		WEAPINVENTORY_OFFHAND = 0x1,
		WEAPINVENTORY_ITEM = 0x2,
		WEAPINVENTORY_ALTMODE = 0x3,
		WEAPINVENTORY_EXCLUSIVE = 0x4,
		WEAPINVENTORY_SCAVENGER = 0x5,
		WEAPINVENTORYCOUNT = 0x6,
	};

	enum weapFireType_t : std::int32_t
	{
		WEAPON_FIRETYPE_FULLAUTO = 0x0,
		WEAPON_FIRETYPE_SINGLESHOT = 0x1,
		WEAPON_FIRETYPE_BURSTFIRE2 = 0x2,
		WEAPON_FIRETYPE_BURSTFIRE3 = 0x3,
		WEAPON_FIRETYPE_BURSTFIRE4 = 0x4,
		WEAPON_FIRETYPE_DOUBLEBARREL = 0x5,
		WEAPON_FIRETYPECOUNT = 0x6,
		WEAPON_FIRETYPE_BURSTFIRE_FIRST = 0x2,
		WEAPON_FIRETYPE_BURSTFIRE_LAST = 0x4,
	};

	enum OffhandClass : std::int32_t
	{
		OFFHAND_CLASS_NONE = 0x0,
		OFFHAND_CLASS_FRAG_GRENADE = 0x1,
		OFFHAND_CLASS_SMOKE_GRENADE = 0x2,
		OFFHAND_CLASS_FLASH_GRENADE = 0x3,
		OFFHAND_CLASS_THROWINGKNIFE = 0x4,
		OFFHAND_CLASS_OTHER = 0x5,
		OFFHAND_CLASS_COUNT = 0x6,
	};

	enum weapStance_t : std::int32_t
	{
		WEAPSTANCE_STAND = 0x0,
		WEAPSTANCE_DUCK = 0x1,
		WEAPSTANCE_PRONE = 0x2,
		WEAPSTANCE_NUM = 0x3,
	};

	enum activeReticleType_t : std::int32_t
	{
		VEH_ACTIVE_RETICLE_NONE = 0x0,
		VEH_ACTIVE_RETICLE_PIP_ON_A_STICK = 0x1,
		VEH_ACTIVE_RETICLE_BOUNCING_DIAMOND = 0x2,
		VEH_ACTIVE_RETICLE_COUNT = 0x3,
	};

	enum weapOverlayReticle_t : std::int32_t
	{
		WEAPOVERLAYRETICLE_NONE = 0x0,
		WEAPOVERLAYRETICLE_CROSSHAIR = 0x1,
		WEAPOVERLAYRETICLE_NUM = 0x2,
	};

	enum WeapOverlayInteface_t : std::int32_t
	{
		WEAPOVERLAYINTERFACE_NONE = 0x0,
		WEAPOVERLAYINTERFACE_JAVELIN = 0x1,
		WEAPOVERLAYINTERFACE_TURRETSCOPE = 0x2,
		WEAPOVERLAYINTERFACECOUNT = 0x3,
	};

	enum weapProjExposion_t : std::int32_t
	{
		WEAPPROJEXP_GRENADE = 0x0,
		WEAPPROJEXP_ROCKET = 0x1,
		WEAPPROJEXP_FLASHBANG = 0x2,
		WEAPPROJEXP_NONE = 0x3,
		WEAPPROJEXP_DUD = 0x4,
		WEAPPROJEXP_SMOKE = 0x5,
		WEAPPROJEXP_HEAVY = 0x6,
		WEAPPROJEXP_NUM = 0x7,
	};

	enum WeapStickinessType : std::int32_t
	{
		WEAPSTICKINESS_NONE = 0x0,
		WEAPSTICKINESS_ALL = 0x1,
		WEAPSTICKINESS_ALL_ORIENT = 0x2,
		WEAPSTICKINESS_GROUND = 0x3,
		WEAPSTICKINESS_GROUND_WITH_YAW = 0x4,
		WEAPSTICKINESS_KNIFE = 0x5,
		WEAPSTICKINESS_COUNT = 0x6,
	};

	enum guidedMissileType_t : std::int32_t
	{
		MISSILE_GUIDANCE_NONE = 0x0,
		MISSILE_GUIDANCE_SIDEWINDER = 0x1,
		MISSILE_GUIDANCE_HELLFIRE = 0x2,
		MISSILE_GUIDANCE_JAVELIN = 0x3,
		MISSILE_GUIDANCE_COUNT = 0x4,
	};

	struct StateTimers
	{
		int iFireDelay;
		int iMeleeDelay;
		int meleeChargeDelay;
		int iDetonateDelay;
		int iRechamberTime;
		int rechamberTimeOneHanded;
		int iRechamberBoltTime;
		int iHoldFireTime;
		int iHoldPrimeTime;
		int iDetonateTime;
		int iMeleeTime;
		int meleeChargeTime;
		int iReloadTime;
		int reloadShowRocketTime;
		int iReloadEmptyTime;
		int iReloadAddTime;
		int iReloadEmptyAddTime;
		int iReloadStartTime;
		int iReloadStartAddTime;
		int iReloadEndTime;
		int iDropTime;
		int iRaiseTime;
		int iAltDropTime;
		int quickDropTime;
		int quickRaiseTime;
		int iBreachRaiseTime;
		int iEmptyRaiseTime;
		int iEmptyDropTime;
		int sprintInTime;
		int sprintLoopTime;
		int sprintOutTime;
		int stunnedTimeBegin;
		int stunnedTimeLoop;
		int stunnedTimeEnd;
		int nightVisionWearTime;
		int nightVisionWearTimeFadeOutEnd;
		int nightVisionWearTimePowerUp;
		int nightVisionRemoveTime;
		int nightVisionRemoveTimePowerDown;
		int nightVisionRemoveTimeFadeInStart;
		int fuseTime;
		int aiFuseTime;
		int primeTime;
		bool bHoldFullPrime;
		int blastFrontTime;
		int blastRightTime;
		int blastBackTime;
		int blastLeftTime;
		int slideInTime;
		int slideLoopTime;
		int slideOutTime;
	};

	struct ADSOverlay
	{
		Material* shader;
		Material* shaderLowRes;
		Material* shaderEMP;
		Material* shaderEMPLowRes;
		weapOverlayReticle_t reticle;
		float width;
		float height;
		float widthSplitscreen;
		float heightSplitscreen;
	};

	struct TracerDef
	{
		const char* name;
		Material* material;
		unsigned int drawInterval;
		float speed;
		float beamLength;
		float beamWidth;
		float screwRadius;
		float screwDist;
		float colors[5][4];
	};

	struct AddonMapEnts
	{
		const char* name;
		char* entityString;
		int numEntityChars;
		MapTriggers trigger;
		ClipInfo* info;
		unsigned int numSubModels;
		cmodel_t* cmodels;
		GfxBrushModel* models;
	};

	enum weapAltModels_t : int
	{
		WEAP_ALT_MODEL0 = 0x0,
		WEAP_ALT_MODEL1 = 0x1,
		WEAP_ALT_MODEL2 = 0x2,
		WEAP_ALT_MODEL3 = 0x3,
		WEAP_ALT_MODEL4 = 0x4,
		WEAP_ALT_MODEL5 = 0x5,
		WEAP_ALT_MODEL6 = 0x6,
		WEAP_ALT_MODEL7 = 0x7,
		WEAP_ALT_MODEL8 = 0x8,
		WEAP_ALT_MODEL9 = 0x9,
		WEAP_ALT_MODEL10 = 0xA,
		WEAP_ALT_MODEL11 = 0xB,
		WEAP_ALT_MODEL12 = 0xC,
		WEAP_ALT_MODEL13 = 0xD,
		WEAP_ALT_MODEL14 = 0xE,
		WEAP_ALT_MODEL15 = 0xF,
		WEAP_ALT_MODEL16 = 0x10,
		WEAP_ALT_MODEL17 = 0x11,
		WEAP_ALT_MODEL18 = 0x12,
		WEAP_ALT_MODEL19 = 0x13,
		WEAP_ALT_MODEL20 = 0x14,
		WEAP_ALT_MODEL21 = 0x15,
		WEAP_ALT_MODEL22 = 0x16,
		WEAP_ALT_MODEL23 = 0x17,
		WEAP_ALT_MODEL24 = 0x18,
		WEAP_ALT_MODEL25 = 0x19,
		WEAP_ALT_MODEL26 = 0x1A,
		WEAP_ALT_MODEL27 = 0x1B,
		WEAP_ALT_MODEL28 = 0x1C,
		WEAP_ALT_MODEL29 = 0x1D,
		WEAP_ALT_MODEL30 = 0x1E,
		WEAP_ALT_MODEL31 = 0x1F,
		WEAP_ALT_MODEL32 = 0x20,
		WEAP_ALT_MODEL33 = 0x21,
		WEAP_ALT_MODEL34 = 0x22,
		WEAP_ALT_MODEL35 = 0x23,
		WEAP_ALT_MODEL36 = 0x24,
		WEAP_ALT_MODEL37 = 0x25,
		WEAP_ALT_MODEL38 = 0x26,
		WEAP_ALT_MODEL39 = 0x27,
		WEAP_ALT_MODEL40 = 0x28,
		WEAP_ALT_MODEL41 = 0x29,
		WEAP_ALT_MODEL42 = 0x2A,
		WEAP_ALT_MODEL43 = 0x2B,
		WEAP_ALT_MODEL44 = 0x2C,
		WEAP_ALT_MODEL45 = 0x2D,
		WEAP_ALT_MODEL46 = 0x2E,
		WEAP_ALT_MODEL47 = 0x2F,
		WEAP_ALT_MODEL48 = 0x30,
		WEAP_ALT_MODEL49 = 0x31,
		WEAP_ALT_MODEL50 = 0x32,
		WEAP_ALT_MODEL51 = 0x33,
		WEAP_ALT_MODEL52 = 0x34,
		WEAP_ALT_MODEL53 = 0x35,
		WEAP_ALT_MODEL54 = 0x36,
		WEAP_ALT_MODEL55 = 0x37,
		WEAP_ALT_MODEL56 = 0x38,
		WEAP_ALT_MODEL57 = 0x39,
		WEAP_ALT_MODEL58 = 0x3A,
		WEAP_ALT_MODEL59 = 0x3B,
		WEAP_ALT_MODEL60 = 0x3C,
		WEAP_ALT_MODEL61 = 0x3D,
		WEAP_ALT_MODEL62 = 0x3E,
		WEAP_ALT_MODEL63 = 0x3F,
		NUM_WEAP_ALTMODELS = 0x40,
	};

	struct WeaponDef
	{
		const char* szOverlayName;
		XModel** gunXModel;
		XModel* handXModel;
		XModel* camoWorldModel;
		XModel* camoViewModel;
		Material* camoWorldModelMaterialOverride;
		Material* camoViewModelMaterialOverride;
		Material** camoMaterialTarget;
		XAnimParts** szXAnimsRightHanded;
		XAnimParts** szXAnimsLeftHanded;
		const char* szModeName;
		scr_string_t* notetrackSoundMapKeys;
		scr_string_t* notetrackSoundMapValues;
		scr_string_t* notetrackRumbleMapKeys;
		scr_string_t* notetrackRumbleMapValues;
		scr_string_t* notetrackFXMapKeys;
		FxEffectDef** notetrackFXMapValues; // const FxEffectDef**
		scr_string_t* notetrackFXMapTagValues;
		int playerAnimType;
		weapType_t weapType;
		weapClass_t weapClass;
		PenetrateType penetrateType;
		weapInventoryType_t inventoryType;
		weapFireType_t fireType;
		float burstFireCooldown;
		OffhandClass offhandClass;
		weapStance_t stance;
		unsigned char rattleSoundType;
		const FxEffectDef* viewFlashEffect;
		const FxEffectDef* worldFlashEffect;
		const FxEffectDef* viewFlashADSEffect;
		snd_alias_list_t* pickupSound;
		snd_alias_list_t* pickupSoundPlayer;
		snd_alias_list_t* ammoPickupSound;
		snd_alias_list_t* ammoPickupSoundPlayer;
		snd_alias_list_t* projectileSound;
		snd_alias_list_t* pullbackSound;
		snd_alias_list_t* pullbackSoundPlayer;
		snd_alias_list_t* fireSound;
		snd_alias_list_t* fireSoundPlayer;
		snd_alias_list_t* fireSoundPlayerAkimbo;
		snd_alias_list_t* fireLoopSound;
		snd_alias_list_t* fireLoopSoundPlayer;
		snd_alias_list_t* fireStopSound;
		snd_alias_list_t* fireStopSoundPlayer;
		snd_alias_list_t* fireLastSound;
		snd_alias_list_t* fireLastSoundPlayer;
		snd_alias_list_t* emptyFireSound;
		snd_alias_list_t* emptyFireSoundPlayer;
		snd_alias_list_t* meleeSwipeSound;
		snd_alias_list_t* meleeSwipeSoundPlayer;
		snd_alias_list_t* meleeHitSound;
		snd_alias_list_t* meleeMissSound;
		snd_alias_list_t* rechamberSound;
		snd_alias_list_t* rechamberSoundPlayer;
		snd_alias_list_t* reloadSound;
		snd_alias_list_t* reloadSoundPlayer;
		snd_alias_list_t* reloadEmptySound;
		snd_alias_list_t* reloadEmptySoundPlayer;
		snd_alias_list_t* reloadStartSound;
		snd_alias_list_t* reloadStartSoundPlayer;
		snd_alias_list_t* reloadEndSound;
		snd_alias_list_t* reloadEndSoundPlayer;
		snd_alias_list_t* detonateSound;
		snd_alias_list_t* detonateSoundPlayer;
		snd_alias_list_t* nightVisionWearSound;
		snd_alias_list_t* nightVisionWearSoundPlayer;
		snd_alias_list_t* nightVisionRemoveSound;
		snd_alias_list_t* nightVisionRemoveSoundPlayer;
		snd_alias_list_t* altSwitchSound;
		snd_alias_list_t* altSwitchSoundPlayer;
		snd_alias_list_t* raiseSound;
		snd_alias_list_t* raiseSoundPlayer;
		snd_alias_list_t* firstRaiseSound;
		snd_alias_list_t* firstRaiseSoundPlayer;
		snd_alias_list_t* putawaySound;
		snd_alias_list_t* putawaySoundPlayer;
		snd_alias_list_t* scanSound;
		snd_alias_list_t* changeVariableZoomSound;
		snd_alias_list_t** bounceSound;
		snd_alias_list_t** rollingSound;
		const FxEffectDef* viewShellEjectEffect;
		const FxEffectDef* worldShellEjectEffect;
		const FxEffectDef* viewLastShotEjectEffect;
		const FxEffectDef* worldLastShotEjectEffect;
		const FxEffectDef* viewMagEjectEffect;
		Material* reticleCenter;
		Material* reticleSide;
		int iReticleCenterSize;
		int iReticleSideSize;
		int iReticleMinOfs;
		activeReticleType_t activeReticleType;
		float vStandMove[3];
		float vStandRot[3];
		float strafeMove[3];
		float strafeRot[3];
		float vDuckedOfs[3];
		float vDuckedMove[3];
		float vDuckedRot[3];
		float vProneOfs[3];
		float vProneMove[3];
		float vProneRot[3];
		float fPosMoveRate;
		float fPosProneMoveRate;
		float fStandMoveMinSpeed;
		float fDuckedMoveMinSpeed;
		float fProneMoveMinSpeed;
		float fPosRotRate;
		float fPosProneRotRate;
		float fStandRotMinSpeed;
		float fDuckedRotMinSpeed;
		float fProneRotMinSpeed;
		XModel** worldModel;
		XModel* worldClipModel;
		XModel* rocketModel;
		XModel* knifeModel;
		XModel* worldKnifeModel;
		Material* hudIcon;
		weaponIconRatioType_t hudIconRatio;
		Material* pickupIcon;
		weaponIconRatioType_t pickupIconRatio;
		Material* ammoCounterIcon;
		weaponIconRatioType_t ammoCounterIconRatio;
		ammoCounterClipType_t ammoCounterClip;
		int iStartAmmo;
		const char* szAmmoName;
		int iAmmoIndex;
		const char* szClipName;
		int iClipIndex;
		int iMaxAmmo;
		int shotCount;
		const char* szSharedAmmoCapName;
		int iSharedAmmoCapIndex;
		int iSharedAmmoCap;
		int damage;
		int playerDamage;
		int iMeleeDamage;
		int iDamageType;
		StateTimers stateTimers;
		StateTimers akimboStateTimers;
		float autoAimRange;
		float aimAssistRange;
		float aimAssistRangeAds;
		float aimPadding;
		float enemyCrosshairRange;
		float moveSpeedScale;
		float adsMoveSpeedScale;
		float sprintDurationScale;
		float fAdsZoomInFrac;
		float fAdsZoomOutFrac;
		ADSOverlay overlay;
		WeapOverlayInteface_t overlayInterface;
		float fAdsBobFactor;
		float fAdsViewBobMult;
		float fHipSpreadStandMin;
		float fHipSpreadDuckedMin;
		float fHipSpreadProneMin;
		float hipSpreadStandMax;
		float hipSpreadDuckedMax;
		float hipSpreadProneMax;
		float fHipSpreadDecayRate;
		float fHipSpreadFireAdd;
		float fHipSpreadTurnAdd;
		float fHipSpreadMoveAdd;
		float fHipSpreadDuckedDecay;
		float fHipSpreadProneDecay;
		float fHipReticleSidePos;
		float fAdsIdleAmount;
		float fHipIdleAmount;
		float adsIdleSpeed;
		float hipIdleSpeed;
		float fIdleCrouchFactor;
		float fIdleProneFactor;
		float fGunMaxPitch;
		float fGunMaxYaw;
		float adsIdleLerpStartTime;
		float adsIdleLerpTime;
		float swayMaxAngleSteadyAim;
		float swayMaxAngle;
		float swayLerpSpeed;
		float swayPitchScale;
		float swayYawScale;
		float swayHorizScale;
		float swayVertScale;
		float swayShellShockScale;
		float adsSwayMaxAngle;
		float adsSwayLerpSpeed;
		float adsSwayPitchScale;
		float adsSwayYawScale;
		float adsSwayHorizScale;
		float adsSwayVertScale;
		float adsFireRateScale;
		float adsDamageRangeScale;
		float adsFireAnimFrac;
		PhysCollmap* physCollmap;
		float dualWieldViewModelOffset;
		float fScopeDriftDelay;
		float fScopeDriftLerpInTime;
		float fScopeDriftSteadyTime;
		float fScopeDriftLerpOutTime;
		float fScopeDriftSteadyFactor;
		float fScopeDriftUnsteadyFactor;
		weaponIconRatioType_t killIconRatio;
		int iReloadAmmoAdd;
		int iReloadStartAdd;
		int ammoDropStockMin;
		int ammoDropClipPercentMin;
		int ammoDropClipPercentMax;
		int iExplosionRadius;
		int iExplosionRadiusMin;
		int iExplosionInnerDamage;
		int iExplosionOuterDamage;
		float damageConeAngle;
		float bulletExplDmgMult;
		float bulletExplRadiusMult;
		int iProjectileSpeed;
		int iProjectileSpeedUp;
		int iProjectileSpeedForward;
		int iProjectileActivateDist;
		float projLifetime;
		float timeToAccelerate;
		float projectileCurvature;
		const char* projectileName;
		XModel* projectileModel;
		weapProjExposion_t projExplosion;
		const FxEffectDef* projExplosionEffect;
		const FxEffectDef* projDudEffect;
		snd_alias_list_t* projExplosionSound;
		snd_alias_list_t* projDudSound;
		WeapStickinessType stickiness;
		float lowAmmoWarningThreshold;
		float ricochetChance;
		bool riotShieldEnableDamage;
		int riotShieldHealth;
		float riotShieldDamageMult;
		float* parallelBounce;
		float* perpendicularBounce;
		const FxEffectDef* projTrailEffect;
		const FxEffectDef* projBeaconEffect;
		float vProjectileColor[3];
		guidedMissileType_t guidedMissileType;
		float maxSteeringAccel;
		int projIgnitionDelay;
		const FxEffectDef* projIgnitionEffect;
		snd_alias_list_t* projIgnitionSound;
		float fAdsAimPitch;
		float fAdsCrosshairInFrac;
		float fAdsCrosshairOutFrac;
		bool adsShouldShowCrosshair;
		int adsGunKickReducedKickBullets;
		float adsGunKickReducedKickPercent;
		float fAdsGunKickPitchMin;
		float fAdsGunKickPitchMax;
		float fAdsGunKickYawMin;
		float fAdsGunKickYawMax;
		float fAdsGunKickMagMin;
		float fAdsGunKickAccel;
		float fAdsGunKickSpeedMax;
		float fAdsGunKickSpeedDecay;
		float fAdsGunKickStaticDecay;
		float fAdsViewKickPitchMin;
		float fAdsViewKickPitchMax;
		float fAdsViewKickYawMin;
		float fAdsViewKickYawMax;
		float fAdsViewKickMagMin;
		float fAdsViewScatterMin;
		float fAdsViewScatterMax;
		float fAdsSpread;
		int hipGunKickReducedKickBullets;
		float hipGunKickReducedKickPercent;
		float fHipGunKickPitchMin;
		float fHipGunKickPitchMax;
		float fHipGunKickYawMin;
		float fHipGunKickYawMax;
		float fHipGunKickMagMin;
		float fHipGunKickAccel;
		float fHipGunKickSpeedMax;
		float fHipGunKickSpeedDecay;
		float fHipGunKickStaticDecay;
		float fHipViewKickPitchMin;
		float fHipViewKickPitchMax;
		float fHipViewKickYawMin;
		float fHipViewKickYawMax;
		float fHipViewKickMagMin;
		float fHipViewScatterMin;
		float fHipViewScatterMax;
		float fightDist;
		float maxDist;
		const char* accuracyGraphName[2];
		float(*originalAccuracyGraphKnots[2])[2];
		unsigned short originalAccuracyGraphKnotCount[2];
		int iPositionReloadTransTime;
		float leftArc;
		float rightArc;
		float topArc;
		float bottomArc;
		float accuracy;
		float aiSpread;
		float playerSpread;
		float minTurnSpeed[2];
		float maxTurnSpeed[2];
		float pitchConvergenceTime;
		float yawConvergenceTime;
		float suppressTime;
		float maxRange;
		float fAnimHorRotateInc;
		float fPlayerPositionDist;
		const char* szUseHintString;
		const char* dropHintString;
		unsigned int iUseHintStringIndex;
		unsigned int dropHintStringIndex;
		float horizViewJitter;
		float vertViewJitter;
		float scanSpeed;
		float scanAccel;
		int scanPauseTime;
		const char* szScript;
		float fOOPosAnimLength[2];
		int minDamage;
		int minPlayerDamage;
		float fMaxDamageRange;
		float fMinDamageRange;
		float destabilizationRateTime;
		float destabilizationCurvatureMax;
		int destabilizeDistance;
		float* locationDamageMultipliers;
		const char* fireRumble;
		const char* meleeImpactRumble;
		TracerDef* tracerType;
		bool turretADSEnabled;
		float turretADSTime;
		float turretFov;
		float turretFovADS;
		float turretScopeZoomRate;
		float turretScopeZoomMin;
		float turretScopeZoomMax;
		float turretOverheatUpRate;
		float turretOverheatDownRate;
		float turretOverheatPenalty;
		snd_alias_list_t* turretOverheatSound;
		const FxEffectDef* turretOverheatEffect;
		const char* turretBarrelSpinRumble;
		float turretBarrelSpinSpeed;
		float turretBarrelSpinUpTime;
		float turretBarrelSpinDownTime;
		snd_alias_list_t* turretBarrelSpinMaxSnd;
		snd_alias_list_t* turretBarrelSpinUpSnd[4];
		snd_alias_list_t* turretBarrelSpinDownSnd[4];
		snd_alias_list_t* missileConeSoundAlias;
		snd_alias_list_t* missileConeSoundAliasAtBase;
		float missileConeSoundRadiusAtTop;
		float missileConeSoundRadiusAtBase;
		float missileConeSoundHeight;
		float missileConeSoundOriginOffset;
		float missileConeSoundVolumescaleAtCore;
		float missileConeSoundVolumescaleAtEdge;
		float missileConeSoundVolumescaleCoreSize;
		float missileConeSoundPitchAtTop;
		float missileConeSoundPitchAtBottom;
		float missileConeSoundPitchTopSize;
		float missileConeSoundPitchBottomSize;
		float missileConeSoundCrossfadeTopSize;
		float missileConeSoundCrossfadeBottomSize;
		scr_string_t knifeAttachTagOverride;
		bool knifeAlwaysAttached;
		bool meleeOverrideValues;
		float aim_automelee_lerp;
		float aim_automelee_range;
		float aim_automelee_region_height;
		float aim_automelee_region_width;
		float player_meleeHeight;
		float player_meleeRange;
		float player_meleeWidth;
		bool sharedAmmo;
		bool lockonSupported;
		bool requireLockonToFire;
		bool isAirburstWeapon;
		bool bigExplosion;
		bool noAdsWhenMagEmpty;
		bool avoidDropCleanup;
		bool inheritsPerks;
		bool crosshairColorChange;
		bool bRifleBullet;
		bool armorPiercing;
		bool bBoltAction;
		bool aimDownSight;
		bool canHoldBreath;
		bool meleeOnly;
		bool canVariableZoom;
		bool bRechamberWhileAds;
		bool bBulletExplosiveDamage;
		bool bCookOffHold;
		bool reticleSpin45;
		bool bClipOnly;
		bool noAmmoPickup;
		bool adsFireOnly;
		bool cancelAutoHolsterWhenEmpty;
		bool disableSwitchToWhenEmpty;
		bool suppressAmmoReserveDisplay;
		bool laserSightDuringNightvision;
		bool markableViewmodel;
		bool noDualWield;
		bool flipKillIcon;
		bool bNoPartialReload;
		bool bSegmentedReload;
		bool bMultipleReload;
		bool blocksProne;
		bool silenced;
		bool isRollingGrenade;
		bool projExplosionEffectForceNormalUp;
		bool projExplosionEffectInheritParentDirection;
		bool bProjImpactExplode;
		bool bProjTrajectoryEvents;
		bool bProjWhizByEnabled;
		bool stickToPlayers;
		bool stickToVehicles;
		bool stickToTurrets;
		bool thrownSideways;
		bool hasDetonator;
		bool disableFiring;
		bool timedDetonation;
		bool rotate;
		bool holdButtonToThrow;
		bool freezeMovementWhenFiring;
		bool thermalScope;
		bool thermalToggle;
		bool outlineEnemies;
		bool altModeSameWeapon;
		bool turretBarrelSpinEnabled;
		bool missileConeSoundEnabled;
		bool missileConeSoundPitchshiftEnabled;
		bool missileConeSoundCrossfadeEnabled;
		bool offhandHoldIsCancelable;
		bool doNotAllowAttachmentsToOverrideSpread;
		bool useFastReloadAnims;
		bool useScopeDrift;
		bool alwaysShatterGlassOnImpact;
		bool oldWeapon;
		scr_string_t stowTag;
		XModel* stowOffsetModel;
	};

	enum AttachmentType : std::int32_t
	{
		ATTACHMENT_SCOPE = 0x0,
		ATTACHMENT_UNDERBARREL = 0x1,
		ATTACHMENT_OTHER = 0x2,
		ATTACHMENT_COUNT = 0x3,
	};

	struct AttAmmoGeneral
	{
		PenetrateType penetrateType;
		float penetrateMultiplier;
		ImpactType impactType;
		weapFireType_t fireType;
		TracerDef* tracerType;
		bool rifleBullet;
		bool armorPiercing;
	};

	struct AttSight
	{
		bool aimDownSight;
		bool adsFire;
		bool rechamberWhileAds;
		bool noAdsWhenMagEmpty;
		bool canHoldBreath;
		bool canVariableZoom;
		bool hideRailWithThisScope;
		bool useScopeDrift;
		bool useDualFOV;
	};

	struct AttReload
	{
		bool noPartialReload;
		bool segmentedReload;
	};

	struct AttAddOns
	{
		bool motionTracker;
		bool silenced;
		bool riotShield;
	};

	struct AttGeneral
	{
		bool boltAction;
		bool inheritsPerks;
		bool reticleSpin45;
		float enemyCrosshairRange;
		Material* reticleCenter;
		Material* reticleSide;
		int reticleCenterSize;
		int reticleSideSize;
		float moveSpeedScale;
		float adsMoveSpeedScale;
	};

	struct AttAimAssist
	{
		float autoAimRange;
		float aimAssistRange;
		float aimAssistRangeAds;
	};

	struct AttAmmunition
	{
		int maxAmmo;
		int startAmmo;
		int clipSize;
		int shotCount;
		int reloadAmmoAdd;
		int reloadStartAdd;
	};

	struct AttDamage
	{
		int damage;
		int minDamage;
		int meleeDamage;
		float maxDamageRange;
		float minDamageRange;
		int playerDamage;
		int minPlayerDamage;
	};

	struct AttLocationDamage
	{
		float locNone;
		float locHelmet;
		float locHead;
		float locNeck;
		float locTorsoUpper;
		float locTorsoLower;
		float locRightArmUpper;
		float locRightArmLower;
		float locRightHand;
		float locLeftArmUpper;
		float locLeftArmLower;
		float locLeftHand;
		float locRightLegUpper;
		float locRightLegLower;
		float locRightFoot;
		float locLeftLegUpper;
		float locLeftLegLower;
		float locLeftFoot;
		float locGun;
	};

	struct AttIdleSettings
	{
		float hipIdleAmount;
		float hipIdleSpeed;
		float idleCrouchFactor;
		float idleProneFactor;
		float adsIdleLerpStartTime;
		float adsIdleLerpTime;
	};

	struct AttADSSettings
	{
		float adsSpread;
		float adsAimPitch;
		float adsTransInTime;
		float adsTransOutTime;
		int adsReloadTransTime;
		float adsCrosshairInFrac;
		float adsCrosshairOutFrac;
		float adsZoomFov;
		float adsZoomInFrac;
		float adsZoomOutFrac;
		float adsFovLerpTime;
		float adsBobFactor;
		float adsViewBobMult;
		float adsFireRateScale;
		float adsDamageRangeScale;
		float adsFireAnimFrac;
	};

	struct AttScopeDriftSettings
	{
		float fScopeDriftDelay;
		float fScopeDriftLerpInTime;
		float fScopeDriftSteadyTime;
		float fScopeDriftLerpOutTime;
		float fScopeDriftSteadyFactor;
		float fScopeDriftUnsteadyFactor;
	};

	struct AttHipSpread
	{
		float hipSpreadStandMin;
		float hipSpreadDuckedMin;
		float hipSpreadProneMin;
		float hipSpreadMax;
		float hipSpreadDuckedMax;
		float hipSpreadProneMax;
		float hipSpreadFireAdd;
		float hipSpreadTurnAdd;
		float hipSpreadMoveAdd;
		float hipSpreadDecayRate;
		float hipSpreadDuckedDecay;
		float hipSpreadProneDecay;
	};

	struct AttGunKick
	{
		int hipGunKickReducedKickBullets;
		float hipGunKickReducedKickPercent;
		float hipGunKickPitchMin;
		float hipGunKickPitchMax;
		float hipGunKickYawMin;
		float hipGunKickYawMax;
		float hipGunKickMagMin;
		float hipGunKickAccel;
		float hipGunKickSpeedMax;
		float hipGunKickSpeedDecay;
		float hipGunKickStaticDecay;
		int adsGunKickReducedKickBullets;
		float adsGunKickReducedKickPercent;
		float adsGunKickPitchMin;
		float adsGunKickPitchMax;
		float adsGunKickYawMin;
		float adsGunKickYawMax;
		float adsGunKickMagMin;
		float adsGunKickAccel;
		float adsGunKickSpeedMax;
		float adsGunKickSpeedDecay;
		float adsGunKickStaticDecay;
	};

	struct AttViewKick
	{
		float hipViewKickPitchMin;
		float hipViewKickPitchMax;
		float hipViewKickYawMin;
		float hipViewKickYawMax;
		float hipViewKickMagMin;
		float hipViewKickCenterSpeed;
		float adsViewKickPitchMin;
		float adsViewKickPitchMax;
		float adsViewKickYawMin;
		float adsViewKickYawMax;
		float adsViewKickMagMin;
		float adsViewKickCenterSpeed;
	};

	struct AttADSOverlay
	{
		ADSOverlay overlay;
		bool hybridToggle;
		bool thermalScope;
		bool thermalToggle;
		bool outlineEnemies;
	};

	struct AttUI
	{
		Material* dpadIcon;
		Material* ammoCounterIcon;
		weaponIconRatioType_t dpadIconRatio;
		weaponIconRatioType_t ammoCounterIconRatio;
		ammoCounterClipType_t ammoCounterClip;
	};

	struct AttRumbles
	{
		const char* fireRumble;
		const char* meleeImpactRumble;
	};

	struct AttProjectile
	{
		int explosionRadius;
		int explosionInnerDamage;
		int explosionOuterDamage;
		float damageConeAngle;
		int projectileSpeed;
		int projectileSpeedUp;
		int projectileActivateDist;
		float projectileLifetime;
		const char* projectileName;
		XModel* projectileModel;
		weapProjExposion_t projExplosionType;
		FxEffectDef* projExplosionEffect;
		bool projExplosionEffectForceNormalUp;
		snd_alias_list_t* projExplosionSound;
		FxEffectDef* projDudEffect;
		snd_alias_list_t* projDudSound;
		bool projImpactExplode;
		float destabilizationRateTime;
		float destabilizationCurvatureMax;
		int destabilizeDistance;
		FxEffectDef* projTrailEffect;
		int projIgnitionDelay;
		FxEffectDef* projIgnitionEffect;
		snd_alias_list_t* projIgnitionSound;
	};

	struct WeaponAttachment
	{
		union
		{
			const char* szInternalName;
			const char* name;
		};
		const char* szDisplayName;
		AttachmentType type;
		weapType_t weaponType;
		weapClass_t weapClass;
		XModel** worldModels;
		XModel** viewModels;
		XModel** reticleViewModels;
		AttAmmoGeneral* ammogeneral;
		AttSight* sight;
		AttReload* reload;
		AttAddOns* addOns;
		AttGeneral* general;
		AttAimAssist* aimAssist;
		AttAmmunition* ammunition;
		AttDamage* damage;
		AttLocationDamage* locationDamage;
		AttIdleSettings* idleSettings;
		AttADSSettings* adsSettings;
		AttADSSettings* adsSettingsMain;
		AttScopeDriftSettings* scopeDriftSettings;
		AttScopeDriftSettings* scopeDriftSettingsMain;
		AttHipSpread* hipSpread;
		AttGunKick* gunKick;
		AttViewKick* viewKick;
		AttADSOverlay* adsOverlay;
		AttUI* ui;
		AttRumbles* rumbles;
		AttProjectile* projectile;
		float ammunitionScale;
		float damageScale;
		float damageScaleMin;
		float stateTimersScale;
		float fireTimersScale;
		float idleSettingsScale;
		float adsSettingsScale;
		float adsSettingsScaleMain;
		float hipSpreadScale;
		float gunKickScale;
		float viewKickScale;
		float viewCenterScale;
		int loadIndex;
		bool hideIronSightsWithThisAttachment;
		bool shareAmmoWithAlt;
	};

	struct AnimOverrideEntry
	{
		unsigned short attachment1;
		unsigned short attachment2;
		XAnimParts* overrideAnim;
		XAnimParts* altmodeAnim;
		unsigned int animTreeType;
		int animTime;
		int altTime;
	};

	struct SoundOverrideEntry
	{
		unsigned short attachment1;
		unsigned short attachment2;
		snd_alias_list_t* overrideSound;
		snd_alias_list_t* altmodeSound;
		unsigned int soundType;
	};

	struct FXOverrideEntry
	{
		unsigned short attachment1;
		unsigned short attachment2;
		const FxEffectDef* overrideFX;
		const FxEffectDef* altmodeFX;
		unsigned int fxType;
	};

	struct ReloadStateTimerEntry
	{
		int attachment;
		int reloadAddTime;
		int reloadEmptyAddTime;
		int reloadStartAddTime;
	};

	struct NoteTrackToSoundEntry
	{
		int attachment;
		scr_string_t* notetrackSoundMapKeys;
		scr_string_t* notetrackSoundMapValues;
	};

	enum weapAnimFiles_t : int
	{
		WEAP_ANIM_ROOT = 0x0,
		WEAP_ANIM_IDLE = 0x1,
		WEAP_ANIM_EMPTY_IDLE = 0x2,
		WEAP_ANIM_FIRE = 0x3,
		WEAP_ANIM_HOLD_FIRE = 0x4,
		WEAP_ANIM_LASTSHOT = 0x5,
		WEAP_ANIM_RECHAMBER = 0x6,
		WEAP_ANIM_GRENADE_PRIME = 0x7,
		WEAP_ANIM_GRENADE_PRIME_READY_TO_THROW = 0x8,
		WEAP_ANIM_MELEE_SWIPE = 0x9,
		WEAP_ANIM_MELEE_HIT = 0xA,
		WEAP_ANIM_MELEE_FATAL = 0xB,
		WEAP_ANIM_MELEE_MISS = 0xC,
		WEAP_ANIM_MELEE_VICTIM_CROUCHING_HIT = 0xD,
		WEAP_ANIM_MELEE_VICTIM_CROUCHING_FATAL = 0xE,
		WEAP_ANIM_MELEE_VICTIM_CROUCHING_MISS = 0xF,
		WEAP_ANIM_RELOAD = 0x10,
		WEAP_ANIM_RELOAD_EMPTY = 0x11,
		WEAP_ANIM_RELOAD_START = 0x12,
		WEAP_ANIM_RELOAD_END = 0x13,
		WEAP_ANIM_FAST_RELOAD = 0x14,
		WEAP_ANIM_FAST_RELOAD_EMPTY = 0x15,
		WEAP_ANIM_FAST_RELOAD_START = 0x16,
		WEAP_ANIM_FAST_RELOAD_END = 0x17,
		WEAP_ANIM_RAISE = 0x18,
		WEAP_ANIM_FIRST_RAISE = 0x19,
		WEAP_ANIM_BREACH_RAISE = 0x1A,
		WEAP_ANIM_DROP = 0x1B,
		WEAP_ANIM_ALT_RAISE = 0x1C,
		WEAP_ANIM_ALT_DROP = 0x1D,
		WEAP_ANIM_ALT_OVERRIDE = 0x1E,
		WEAP_ANIM_TOGGLE_OVERRIDE = 0x1F,
		WEAP_ANIM_SCOPE_TOGGLE_ON = 0x20,
		WEAP_ANIM_SCOPE_TOGGLE_OFF = 0x21,
		WEAP_ANIM_QUICK_RAISE = 0x22,
		WEAP_ANIM_QUICK_DROP = 0x23,
		WEAP_ANIM_EMPTY_RAISE = 0x24,
		WEAP_ANIM_EMPTY_DROP = 0x25,
		WEAP_ANIM_SPRINT_IN = 0x26,
		WEAP_ANIM_SPRINT_IN_CANCEL = 0x27,
		WEAP_ANIM_SPRINT_LOOP = 0x28,
		WEAP_ANIM_SPRINT_OUT = 0x29,
		WEAP_ANIM_STUNNED_START = 0x2A,
		WEAP_ANIM_STUNNED_LOOP = 0x2B,
		WEAP_ANIM_STUNNED_END = 0x2C,
		WEAP_ANIM_DETONATE = 0x2D,
		WEAP_ANIM_NIGHTVISION_WEAR = 0x2E,
		WEAP_ANIM_NIGHTVISION_REMOVE = 0x2F,
		WEAP_ANIM_ADS_FIRE = 0x30,
		WEAP_ANIM_ADS_LASTSHOT = 0x31,
		WEAP_ANIM_ADS_RECHAMBER = 0x32,
		WEAP_ANIM_BLAST_FRONT = 0x33,
		WEAP_ANIM_BLAST_RIGHT = 0x34,
		WEAP_ANIM_BLAST_BACK = 0x35,
		WEAP_ANIM_BLAST_LEFT = 0x36,
		WEAP_ANIM_SLIDE_IN = 0x37,
		WEAP_ANIM_SLIDE_LOOP = 0x38,
		WEAP_ANIM_SLIDE_OUT = 0x39,
		WEAP_ANIM_RECOIL_SETTLE = 0x3A,
		WEAP_ANIM_SWIM_LOOP = 0x3B,
		WEAP_ANIM_MANTLE_UP_64 = 0x3C,
		WEAP_ANIM_MANTLE_UP_56 = 0x3D,
		WEAP_ANIM_MANTLE_UP_48 = 0x3E,
		WEAP_ANIM_MANTLE_UP_40 = 0x3F,
		WEAP_ANIM_MANTLE_UP_32 = 0x40,
		WEAP_ANIM_MANTLE_UP_24 = 0x41,
		WEAP_ANIM_MANTLE_UP_16 = 0x42,
		WEAP_ANIM_MANTLE_OVER_64 = 0x43,
		WEAP_ANIM_MANTLE_OVER_56 = 0x44,
		WEAP_ANIM_MANTLE_OVER_48 = 0x45,
		WEAP_ANIM_MANTLE_OVER_40 = 0x46,
		WEAP_ANIM_MANTLE_OVER_32 = 0x47,
		WEAP_ANIM_MANTLE_OVER_24 = 0x48,
		WEAP_ANIM_MANTLE_OVER_16 = 0x49,
		WEAP_ANIM_RELOAD_MULTIPLE_1 = 0x4A,
		WEAP_ANIM_RELOAD_MULTIPLE_2 = 0x4B,
		WEAP_ANIM_RELOAD_MULTIPLE_3 = 0x4C,
		WEAP_ANIM_RELOAD_MULTIPLE_4 = 0x4D,
		WEAP_ANIM_RELOAD_MULTIPLE_5 = 0x4E,
		WEAP_ANIM_RELOAD_MULTIPLE_6 = 0x4F,
		WEAP_ANIM_RELOAD_MULTIPLE_7 = 0x50,
		WEAP_ANIM_RELOAD_MULTIPLE_8 = 0x51,
		WEAP_ANIM_RELOAD_MULTIPLE_FAST_1 = 0x52,
		WEAP_ANIM_RELOAD_MULTIPLE_FAST_2 = 0x53,
		WEAP_ANIM_RELOAD_MULTIPLE_FAST_3 = 0x54,
		WEAP_ANIM_RELOAD_MULTIPLE_FAST_4 = 0x55,
		WEAP_ANIM_RELOAD_MULTIPLE_FAST_5 = 0x56,
		WEAP_ANIM_RELOAD_MULTIPLE_FAST_6 = 0x57,
		WEAP_ANIM_RELOAD_MULTIPLE_FAST_7 = 0x58,
		WEAP_ANIM_RELOAD_MULTIPLE_FAST_8 = 0x59,
		WEAP_ANIM_ADS_UP = 0x5A,
		WEAP_ANIM_ADS_DOWN = 0x5B,
		WEAP_ANIM_RECOIL = 0x5C,
		WEAP_ALT_ANIM_ADJUST = 0x5D,
		WEAP_ANIM_ADDITIVE_ADS_ROOT = 0x5E,
		WEAP_ANIM_ADDITIVE_ADS_UP = 0x5F,
		WEAP_ANIM_ADDITIVE_DRAG_LEFT_ROOT = 0x60,
		WEAP_ANIM_ADDITIVE_DRAG_LEFT = 0x61,
		WEAP_ANIM_ADDITIVE_DRAG_RIGHT_ROOT = 0x62,
		WEAP_ANIM_ADDITIVE_DRAG_RIGHT = 0x63,
		WEAP_ANIM_ADDITIVE_DRAG_UP_ROOT = 0x64,
		WEAP_ANIM_ADDITIVE_DRAG_UP = 0x65,
		WEAP_ANIM_ADDITIVE_DRAG_DOWN_ROOT = 0x66,
		WEAP_ANIM_ADDITIVE_DRAG_DOWN = 0x67,
		WEAP_ANIM_ADDITIVE_SWIM_FORWARD_ROOT = 0x68,
		WEAP_ANIM_ADDITIVE_SWIM_FORWARD = 0x69,
		WEAP_ANIM_ADDITIVE_SWIM_BACKWARD_ROOT = 0x6A,
		WEAP_ANIM_ADDITIVE_SWIM_BACKWARD = 0x6B,
		WEAP_ANIM_ADDITIVE_JUMP_ROOT = 0x6C,
		WEAP_ANIM_ADDITIVE_JUMP = 0x6D,
		WEAP_ANIM_ADDITIVE_JUMP_LAND_ROOT = 0x6E,
		WEAP_ANIM_ADDITIVE_JUMP_LAND = 0x6F,
		WEAP_ANIM_ADDITIVE_WALK_ROOT = 0x70,
		WEAP_ANIM_ADDITIVE_WALK = 0x71,
		WEAP_ANIM_ADDITIVE_CRAWL_IN_ROOT = 0x72,
		WEAP_ANIM_ADDITIVE_CRAWL_IN = 0x73,
		WEAP_ANIM_ADDITIVE_CRAWL_LOOP_ROOT = 0x74,
		WEAP_ANIM_ADDITIVE_CRAWL_LOOP = 0x75,
		WEAP_ANIM_ADDITIVE_CRAWL_LOOP_LEFT_ROOT = 0x76,
		WEAP_ANIM_ADDITIVE_CRAWL_LOOP_LEFT = 0x77,
		WEAP_ANIM_ADDITIVE_CRAWL_LOOP_RIGHT_ROOT = 0x78,
		WEAP_ANIM_ADDITIVE_CRAWL_LOOP_RIGHT = 0x79,
		WEAP_ANIM_ADDITIVE_PRONE_DROP_ROOT = 0x7A,
		WEAP_ANIM_ADDITIVE_PRONE_DROP = 0x7B,
		NUM_WEAP_ANIMS = 0x7C,
		WEAP_ANIM_VIEWMODEL_START = 0x1,
		WEAP_ANIM_VIEWMODEL_END = 0x5A,
		WEAP_ANIM_ADDITIVE_START = 0x5E,
		WEAP_ANIM_ADDITIVE_END = 0x7C,
	};

	struct WeaponCompleteDef
	{
		union
		{
			const char* szInternalName;
			const char* name;
		};
		WeaponDef* weapDef;
		const char* szDisplayName;
		scr_string_t* hideTags;
		WeaponAttachment** scopes;
		WeaponAttachment** underBarrels;
		WeaponAttachment** others;
		XAnimParts** szXAnims; // XAnimParts* const*
		unsigned int numAnimOverrides;
		AnimOverrideEntry* animOverrides;
		unsigned int numSoundOverrides;
		SoundOverrideEntry* soundOverrides;
		unsigned int numFXOverrides;
		FXOverrideEntry* fxOverrides;
		unsigned int numReloadStateTimerOverrides;
		ReloadStateTimerEntry* reloadOverrides;
		unsigned int numNotetrackOverrides;
		NoteTrackToSoundEntry* notetrackOverrides;
		float fAdsZoomFov;
		int iAdsTransInTime;
		int iAdsTransOutTime;
		int iClipSize;
		ImpactType impactType;
		int iFireTime;
		int iFireTimeAkimbo;
		weaponIconRatioType_t dpadIconRatio;
		float penetrateMultiplier;
		float fAdsViewKickCenterSpeed;
		float fHipViewKickCenterSpeed;
		const char* szAltWeaponName;
		int altWeapon;
		int iAltRaiseTime;
		int iAltRaiseTimeAkimbo;
		Material* killIcon;
		Material* dpadIcon;
		int fireAnimLength;
		int fireAnimLengthAkimbo;
		int iFirstRaiseTime;
		int iFirstRaiseTimeAkimbo;
		int ammoDropStockMax;
		float adsDofStart;
		float adsDofEnd;
		unsigned short accuracyGraphKnotCount[2];
		float(*accuracyGraphKnots[2])[2];
		bool motionTracker;
		bool enhanced;
		bool dpadIconShowsAmmo;
		const char* szAdsrBaseSetting;
	};

	struct RawFile
	{
		const char* name;
		int compressedLen;
		int len;
		const char* buffer;
	};

	struct LuaFile
	{
		const char* name;
		int len;
		char strippingType;
		const char* buffer;
	};

	struct ScriptFile
	{
		const char* name;
		int compressedLen;
		int len;
		int bytecodeLen;
		const char* buffer;
		char* bytecode;
	};

	struct StringTableCell
	{
		const char* string;
		int hash;
	};

	struct StringTable
	{
		const char* name;
		int columnCount;
		int rowCount;
		StringTableCell* values;
	};

	struct StructuredDataEnumEntry
	{
		scr_string_t string;
		unsigned short index;
	};

	struct StructuredDataEnum
	{
		int entryCount;
		int reservedEntryCount;
		StructuredDataEnumEntry* entries;
	};

	enum StructuredDataTypeCategory
	{
		DATA_INT = 0x0,
		DATA_BYTE = 0x1,
		DATA_BOOL = 0x2,
		DATA_STRING = 0x3,
		DATA_ENUM = 0x4,
		DATA_STRUCT = 0x5,
		DATA_INDEXED_ARRAY = 0x6,
		DATA_ENUM_ARRAY = 0x7,
		DATA_FLOAT = 0x8,
		DATA_SHORT = 0x9,
		DATA_COUNT = 0xA,
	};

	union StructuredDataTypeUnion
	{
		unsigned int stringDataLength;
		int enumIndex;
		int structIndex;
		int indexedArrayIndex;
		int enumedArrayIndex;
		int index;
	};

	struct StructuredDataType
	{
		StructuredDataTypeCategory type;
		StructuredDataTypeUnion u;
	};

	enum StructuredDataValidationType
	{
		VALIDATION_NONE = 0x0,
		VALIDATION_CONSTANT = 0x1,
		VALIDATION_INCREASECLAMP = 0x2,
		VALIDATION_INCREASESTRICT = 0x3,
		VALIDATION_DELTACLAMP = 0x4,
		VALIDATION_DELTASTRICT = 0x5,
		VALIDATION_XP = 0x6,
		VALIDATION_COUNT = 0x7,
	};

	struct StructuredDataStructProperty
	{
		scr_string_t name;
		StructuredDataType type;
		unsigned int offset;
		StructuredDataValidationType validation;
	};

	struct StructuredDataStruct
	{
		int propertyCount;
		StructuredDataStructProperty* properties;
		int size;
		unsigned int bitOffset;
	};

	struct StructuredDataIndexedArray
	{
		int arraySize;
		StructuredDataType elementType;
		unsigned int elementSize;
	};

	struct StructuredDataEnumedArray
	{
		int enumIndex;
		StructuredDataType elementType;
		unsigned int elementSize;
	};

	struct StructuredDataDef
	{
		int version;
		unsigned int formatChecksum;
		int enumCount;
		StructuredDataEnum* enums;
		int structCount;
		StructuredDataStruct* structs;
		int indexedArrayCount;
		StructuredDataIndexedArray* indexedArrays;
		int enumedArrayCount;
		StructuredDataEnumedArray* enumedArrays;
		StructuredDataType rootType;
		unsigned int size;
	};

	struct StructuredDataDefSet
	{
		const char* name;
		unsigned int defCount;
		StructuredDataDef* defs;
	};

	enum NetConstStringType
	{
		NETCONSTSTRINGTYPE_XMODEL = 0x0,
		NETCONSTSTRINGTYPE_MATERIAL = 0x1,
		NETCONSTSTRINGTYPE_RUMBLE = 0x2,
		NETCONSTSTRINGTYPE_VEHICLES = 0x3,
		NETCONSTSTRINGTYPE_FX = 0x4,
		NETCONSTSTRINGTYPE_LOCSTRING = 0x5,
		NETCONSTSTRINGTYPE_SOUNDALIAS = 0x6,
		NETCONSTSTRINGTYPE_SOUNDALIAS_LOOPING = 0x7,
		NETCONSTSTRINGTYPE_SHOCK = 0x8,
		NETCONSTSTRINGTYPE_SCRIPTMENU = 0x9,
		NETCONSTSTRINGTYPE_CLIENT_TAGS = 0xA,
		NETCONSTSTRINGTYPE_HEADICON = 0xB,
		NETCONSTSTRINGTYPE_STATUSICON = 0xC,
		NETCONSTSTRINGTYPE_NAMEPLATE = 0xD,
		NETCONSTSTRINGTYPE_MINIMAPICON = 0xE,
		NETCONSTSTRINGTYPE_LOCSELMAT = 0xF,
		NETCONSTSTRINGTYPE_WEAPON = 0x10,
		NETCONSTSTRINGTYPE_HINTSTRING = 0x11,
		NETCONSTSTRINGTYPE_ANIM = 0x12,
		NETCONSTSTRINGTYPE_TAGS = 0x13,
		NETCONSTSTRINGTYPE_ANIMCLASS = 0x14,
		NETCONSTSTRINGTYPE_LUI = 0x15,
		NETCONSTSTRINGTYPE_ASSET_COUNT = 0x16,
		NETCONSTSTRINGTYPE_CODINFO_DVAR = 0x16,
		NETCONSTSTRINGTYPE_NETWORK_DVAR = 0x17,
		NETCONSTSTRINGTYPE_COUNT = 0x18,
		NETCONSTSTRINGTYPE_NONE = 0x18,
	};

	enum NetConstStringSource
	{
		NETCONSTSTRINGSOURCE_MAP = 0x0,
		NETCONSTSTRINGSOURCE_PRE_MAP = 0x1,
		NETCONSTSTRINGSOURCE_COMMON = 0x2,
		NETCONSTSTRINGSOURCE_COUNT = 0x3,
		NETCONSTSTRINGSOURCE_NONE = 0x3,
	};

	struct NetConstStrings
	{
		const char* name;
		NetConstStringType stringType;
		NetConstStringSource sourceType;
		unsigned int entryCount;
		const char** stringList;
	};

	enum nodeType : std::int32_t
	{
		NODE_ERROR = 0x0,
		NODE_PATHNODE = 0x1,
		NODE_COVER_STAND = 0x2,
		NODE_COVER_CROUCH = 0x3,
		NODE_COVER_CROUCH_WINDOW = 0x4,
		NODE_COVER_PRONE = 0x5,
		NODE_COVER_RIGHT = 0x6,
		NODE_COVER_LEFT = 0x7,
		NODE_COVER_MULTI = 0x8,
		NODE_AMBUSH = 0x9,
		NODE_EXPOSED = 0xA,
		NODE_CONCEALMENT_STAND = 0xB,
		NODE_CONCEALMENT_CROUCH = 0xC,
		NODE_CONCEALMENT_PRONE = 0xD,
		NODE_DOOR = 0xE,
		NODE_DOOR_INTERIOR = 0xF,
		NODE_SCRIPTED = 0x10,
		NODE_NEGOTIATION_BEGIN = 0x11,
		NODE_NEGOTIATION_END = 0x12,
		NODE_TURRET = 0x13,
		NODE_GUARD = 0x14,
		NODE_PATHNODE_3D = 0x15,
		NODE_COVER_UP_3D = 0x16,
		NODE_COVER_RIGHT_3D = 0x17,
		NODE_COVER_LEFT_3D = 0x18,
		NODE_EXPOSED_3D = 0x19,
		NODE_SCRIPTED_3D = 0x1A,
		NODE_NEGOTIATION_BEGIN_3D = 0x1B,
		NODE_NEGOTIATION_END_3D = 0x1C,
		NODE_JUMP = 0x1D,
		NODE_JUMP_ATTACK = 0x1E,
		NODE_NUMTYPES = 0x1F,
		NODE_DONTLINK = 0x1F,
	};

	struct pathnode_yaworient_t
	{
		float fLocalAngle;
		float localForward[2];
	};

	union $3936EE84564F75EDA6DCBAC77A545FC8
	{
		pathnode_yaworient_t yaw_orient;
		float angles[3];
	};

	enum PathNodeErrorCode : std::int32_t
	{
		PNERR_NONE = 0x0,
		PNERR_INSOLID = 0x1,
		PNERR_FLOATING = 0x2,
		PNERR_NOLINK = 0x3,
		PNERR_DUPLICATE = 0x4,
		PNERR_NOSTANCE = 0x5,
		PNERR_INVALIDDOOR = 0x6,
		PNERR_NOANGLES = 0x7,
		PNERR_BADPLACEMENT = 0x8,
		NUM_PATH_NODE_ERRORS = 0x9,
	};

	union $5F11B9753862CE791E23553F99FA1738
	{
		float minUseDistSq;
		PathNodeErrorCode error;
	};

	union PathNodeParentUnion
	{
		scr_string_t name;
		unsigned short index;
	};

	struct pathlink_s
	{
		float fDist;
		unsigned short nodeNum;
		unsigned char disconnectCount;
		unsigned char negotiationLink;
		unsigned char flags;
		unsigned char ubBadPlaceCount[3];
	};

	struct pathnode_constant_t
	{
		unsigned short type;
		unsigned int spawnflags;
		scr_string_t targetname;
		scr_string_t script_linkName;
		scr_string_t script_noteworthy;
		scr_string_t target;
		scr_string_t animscript;
		int animscriptfunc;
		float vLocalOrigin[3];
		$3936EE84564F75EDA6DCBAC77A545FC8 ___u9;
		PathNodeParentUnion parent;
		$5F11B9753862CE791E23553F99FA1738 ___u11;
		short wOverlapNode[2];
		unsigned short totalLinkCount;
		pathlink_s* Links;
	};

	struct SentientHandle
	{
		unsigned short number;
		unsigned short infoIndex;
	};

	struct pathnode_dynamic_t
	{
		SentientHandle pOwner;
		int iFreeTime;
		int iValidTime[3];
		short wLinkCount;
		short wOverlapCount;
		short turretEntNumber;
		unsigned char userCount;
		unsigned char hasBadPlaceLink;
		int spreadUsedTime[2];
		short flags;
		short dangerousCount;
		int recentUseProxTime;
	};

	union $73F238679C0419BE2C31C6559E8604FC
	{
		float nodeCost;
		int linkIndex;
	};

	struct pathnode_t;
	struct pathnode_transient_t
	{
		int iSearchFrame;
		pathnode_t* pNextOpen;
		pathnode_t* pPrevOpen;
		pathnode_t* pParent;
		float fCost;
		float fHeuristic;
		$73F238679C0419BE2C31C6559E8604FC ___u6;
	};

	struct pathnode_t
	{
		pathnode_constant_t constant;
		pathnode_dynamic_t dynamic;
		pathnode_transient_t transient;
	};

	struct pathnode_tree_nodes_t
	{
		int nodeCount;
		unsigned short* nodes;
	};

	struct pathnode_tree_t;
	union pathnode_tree_info_t
	{
		pathnode_tree_t* child[2];
		pathnode_tree_nodes_t s;
	};

	struct pathnode_tree_t
	{
		int axis;
		float dist;
		pathnode_tree_info_t u;
	};

	struct PathDynamicNodeGroup
	{
		unsigned short parentIndex;
		int nodeTreeCount;
		pathnode_tree_t* nodeTree;
	};

	struct PathData
	{
		const char* name;
		unsigned int nodeCount;
		pathnode_t* nodes;
		bool parentIndexResolved;
		unsigned short version;
		int visBytes;
		unsigned char* pathVis;
		int nodeTreeCount;
		pathnode_tree_t* nodeTree;
		int dynamicNodeGroupCount;
		PathDynamicNodeGroup* dynamicNodeGroups;
		int exposureBytes;
		unsigned char* pathExposure;
		int noPeekVisBytes;
		unsigned char* pathNoPeekVis;
		int zoneCount;
		int zonesBytes;
		unsigned char* pathZones;
		int dynStatesBytes;
		unsigned char* pathDynStates;
	};

	enum VehicleType : std::int32_t
	{
		VEH_WHEELS_4 = 0x0,
		VEH_TANK = 0x1,
		VEH_PLANE = 0x2,
		VEH_BOAT = 0x3,
		VEH_ARTILLERY = 0x4,
		VEH_HELICOPTER = 0x5,
		VEH_SNOWMOBILE = 0x6,
		VEH_SUBMARINE = 0x7,
		VEH_UGV = 0x8,
		VEH_TYPE_COUNT = 0x9,
	};

	enum VehicleAxleType : std::int32_t
	{
		VEH_AXLE_FRONT = 0x0,
		VEH_AXLE_REAR = 0x1,
		VEH_AXLE_ALL = 0x2,
		VEH_AXLE_COUNT = 0x3,
	};

	struct VehiclePhysDef
	{
		int physicsEnabled;
		const char* physPresetName;
		PhysPreset* physPreset;
		const char* accelGraphName;
		VehicleAxleType steeringAxle;
		VehicleAxleType powerAxle;
		VehicleAxleType brakingAxle;
		float topSpeed;
		float reverseSpeed;
		float maxVelocity;
		float maxPitch;
		float maxRoll;
		float suspensionTravelFront;
		float suspensionTravelRear;
		float suspensionStrengthFront;
		float suspensionDampingFront;
		float suspensionStrengthRear;
		float suspensionDampingRear;
		float frictionBraking;
		float frictionCoasting;
		float frictionTopSpeed;
		float frictionSide;
		float frictionSideRear;
		float velocityDependentSlip;
		float rollStability;
		float rollResistance;
		float pitchResistance;
		float yawResistance;
		float uprightStrengthPitch;
		float uprightStrengthRoll;
		float targetAirPitch;
		float airYawTorque;
		float airPitchTorque;
		float minimumMomentumForCollision;
		float collisionLaunchForceScale;
		float wreckedMassScale;
		float wreckedBodyFriction;
		float minimumJoltForNotify;
		float slipThresholdFront;
		float slipThresholdRear;
		float slipFricScaleFront;
		float slipFricScaleRear;
		float slipFricRateFront;
		float slipFricRateRear;
		float slipYawTorque;
	};

	enum VehCamZOffsetMode : std::int32_t
	{
		VEHCAM_ZMODE_WORLD = 0x0,
		VEHCAM_ZMODE_VEHICLE = 0x1,
		VEHCAM_ZMODE_VIEW = 0x2,
		VEHCAM_ZMODE_COUNT = 0x3,
	};

	enum VehicleTurretFireType : std::int32_t
	{
		VEH_TURRET_SINGLE_FIRE = 0x0,
		VEH_TURRET_DUAL_FIRE = 0x1,
		VEH_TURRET_ALT_FIRE = 0x2,
		VEH_TURRET_FIRE_TYPE_COUNT = 0x3,
	};

	struct VehicleDef
	{
		const char* name;
		VehicleType type;
		const char* useHintString;
		int health;
		int quadBarrel;
		int hitClientScriptables;
		float texScrollScale;
		float topSpeed;
		float accel;
		float rotRate;
		float rotAccel;
		float maxBodyPitch;
		float maxBodyRoll;
		float fakeBodyAccelPitch;
		float fakeBodyAccelRoll;
		float fakeBodyVelPitch;
		float fakeBodyVelRoll;
		float fakeBodySideVelPitch;
		float fakeBodyPitchStrength;
		float fakeBodyRollStrength;
		float fakeBodyPitchDampening;
		float fakeBodyRollDampening;
		float fakeBodyBoatRockingAmplitude;
		float fakeBodyBoatRockingPeriod;
		float fakeBodyBoatRockingRotationPeriod;
		float fakeBodyBoatRockingFadeoutSpeed;
		float boatBouncingMinForce;
		float boatBouncingMaxForce;
		float boatBouncingRate;
		float boatBouncingFadeinSpeed;
		float boatBouncingFadeoutSteeringAngle;
		float collisionDamage;
		float collisionSpeed;
		float killcamOffset[3];
		int playerProtected;
		int bulletDamage;
		int armorPiercingDamage;
		int grenadeDamage;
		int projectileDamage;
		int projectileSplashDamage;
		int heavyExplosiveDamage;
		VehiclePhysDef vehPhysDef;
		float boostDuration;
		float boostRechargeTime;
		float boostAcceleration;
		float suspensionTravel;
		float maxSteeringAngle;
		float steeringLerp;
		float minSteeringScale;
		float minSteeringSpeed;
		int disableWheelsTurning;
		int vehHelicopterIsASplinePlane;
		int vehHelicopterLockAltitude;
		int vehHelicopterOffsetFromMesh;
		float vehHelicopterAltitudeOffset;
		float vehHelicopterPitchOffset;
		float vehHelicopterBoundsRadius;
		float vehHelicopterMaxSpeed;
		float vehHelicopterMaxSpeedVertical;
		float vehHelicopterMaxAccel;
		float vehHelicopterMaxAccelVertical;
		float vehHelicopterDecelerationFwd;
		float vehHelicopterDecelerationSide;
		float vehHelicopterDecelerationUp;
		float vehHelicopterMaxYawRate;
		float vehHelicopterMaxYawAccel;
		float vehHelicopterTiltFromVelocity;
		float vehHelicopterTiltFromControllerAxes;
		float vehHelicopterTiltFromAcceleration;
		float vehHelicopterTiltFromDeceleration;
		float vehHelicopterTiltFromFwdAndYaw_VelAtMaxTilt;
		float vehHelicopterTiltFromFwdAndYaw;
		float vehHelicopterTiltMomentum;
		float vehHelicopterTiltSpeed;
		float vehHelicopterMaxPitch;
		float vehHelicopterMaxRoll;
		float vehHelicopterHoverSpeedThreshold;
		float vehHelicopterJitterJerkyness;
		float vehHelicopterLookaheadTime;
		int vehHelicopterSoftCollisions;
		int vehHelicopterUseGroundFX;
		FxEffectDef* vehHelicopterGroundFx;
		FxEffectDef* vehHelicopterGroundWaterFx;
		float vehHelicopterGroundFxDefaultRepeatRate;
		float vehHelicopterGroundFxSlowestRepeatRate;
		float vehHelicopterGroundFxFastestRepeatRate;
		float vehHelicopterGroundFxMinGroundDist;
		float vehHelicopterGroundFxMaxGroundDist;
		float vehSplinePlaneCorridorMaxXVel;
		float vehSplinePlaneCorridorMaxZVel;
		float vehSplinePlaneCorridorMaxXAccel;
		float vehSplinePlaneCorridorMaxZAccel;
		float vehSplinePlaneTangentLookAtRate;
		float vehSplinePlaneMaxPitchSpeed;
		float vehSplinePlaneMaxYawSpeed;
		float vehSplinePlaneMaxRollSpeed;
		float vehSplinePlanePitchSpeedRate;
		float vehSplinePlaneYawSpeedRate;
		float vehSplinePlaneRollSpeedRateUp;
		float vehSplinePlaneRollSpeedRateDown;
		float vehSplinePlaneMaxPitchAccel;
		float vehSplinePlaneMaxYawAccel;
		float vehSplinePlaneMaxRollAccel;
		float vehSplinePlaneYawToRollFactor;
		float vehSplinePlaneRollToYawFactor;
		float vehSplinePlaneRollToYawFactorBlend;
		float vehSplinePlaneMaxPitch;
		float vehSplinePlaneMaxRoll;
		float vehSplinePlaneMaxPitchFromRoll;
		float vehSplinePlaneMaxRollYawOffset;
		float vehSplinePlaneRollYawOffsetThreshold;
		float vehSplinePlaneMaxTiltRoll;
		float vehSplinePlaneMaxTiltPitch;
		float vehSplinePlaneTiltRollRate;
		float vehSplinePlaneTiltPitchRate;
		int camLookEnabled;
		int camRelativeControl;
		int camRemoteDrive;
		float camLerp;
		float camHeight;
		float camRadius;
		float camPitchInfluence;
		float camYawInfluence;
		float camRollInfluence;
		float camFovIncrease;
		float camFovOffset;
		float camFovSpeed;
		float camReturnSpeed;
		float camReturnLerp;
		float camVehicleAnglePitchRate;
		float camVehicleAngleYawRate;
		float camVehicleAngleRollRate;
		int vehCam_UseGDT;
		float vehCam_anglesPitch;
		float vehCam_anglesYaw;
		float vehCam_anglesRoll;
		float vehCam_offsetX;
		float vehCam_offsetY;
		float vehCam_offsetZ;
		float vehCam_radius;
		float vehCam_speedInfluence;
		float vehCam_pitchTurnRate;
		float vehCam_pitchClamp;
		float vehCam_yawTurnRate;
		float vehCam_yawClamp;
		VehCamZOffsetMode vehCam_zOffsetMode;
		float vehCam_anglesPitch3P;
		float vehCam_anglesYaw3P;
		float vehCam_anglesRoll3P;
		float vehCam_offsetX3P;
		float vehCam_offsetY3P;
		float vehCam_offsetZ3P;
		float vehCam_radius3P;
		float vehCam_speedInfluence3P;
		float vehCam_pitchTurnRate3P;
		float vehCam_pitchClamp3P;
		float vehCam_yawTurnRate3P;
		float vehCam_yawClamp3P;
		VehCamZOffsetMode vehCam_zOffsetMode3P;
		const char* turretWeaponName;
		WeaponCompleteDef* turretWeapon;
		float turretHorizSpanLeft;
		float turretHorizSpanRight;
		float turretVertSpanUp;
		float turretVertSpanDown;
		float turretHorizResistLeft;
		float turretHorizResistRight;
		float turretVertResistUp;
		float turretVertResistDown;
		float turretRotRate;
		VehicleTurretFireType turretFireType;
		snd_alias_list_t* turretSpinSnd;
		snd_alias_list_t* turretStopSnd;
		int trophyEnabled;
		float trophyRadius;
		float trophyInactiveRadius;
		int trophyAmmoCount;
		float trophyReloadTime;
		scr_string_t trophyTags[4];
		const FxEffectDef* trophyExplodeFx;
		const FxEffectDef* trophyFlashFx;
		Material* compassFriendlyIcon;
		Material* compassEnemyIcon;
		Material* compassFriendlyAltIcon;
		Material* compassEnemyAltIcon;
		int compassIconWidth;
		int compassIconHeight;
		snd_alias_list_t* idleLowSnd;
		snd_alias_list_t* idleHighSnd;
		snd_alias_list_t* engineLowSnd;
		snd_alias_list_t* engineHighSnd;
		float engineSndSpeed;
		scr_string_t audioOriginTag;
		snd_alias_list_t* idleLowSndAlt;
		snd_alias_list_t* idleHighSndAlt;
		snd_alias_list_t* engineLowSndAlt;
		snd_alias_list_t* engineHighSndAlt;
		float engineSndSpeedAlt;
		scr_string_t audioOriginTagAlt;
		snd_alias_list_t* turretSpinSndAlt;
		snd_alias_list_t* turretStopSndAlt;
		snd_alias_list_t* engineStartUpSnd;
		int engineStartUpLength;
		snd_alias_list_t* engineShutdownSnd;
		snd_alias_list_t* engineIdleSnd;
		snd_alias_list_t* engineSustainSnd;
		snd_alias_list_t* engineRampUpSnd;
		int engineRampUpLength;
		snd_alias_list_t* engineRampDownSnd;
		int engineRampDownLength;
		snd_alias_list_t* suspensionSoftSnd;
		float suspensionSoftCompression;
		snd_alias_list_t* suspensionHardSnd;
		float suspensionHardCompression;
		snd_alias_list_t* collisionSnd;
		float collisionBlendSpeed;
		snd_alias_list_t* speedSnd;
		float speedSndBlendSpeed;
		const char* surfaceSndPrefix;
		snd_alias_list_t* surfaceSnds[31];
		float surfaceSndBlendSpeed;
		float slideVolume;
		float slideBlendSpeed;
		float inAirPitch;
		const char* soundTriggerOverrideZone;
		bool soundTriggerOverrideReverb;
		bool soundTriggerOverrideMix;
		bool soundTriggerOverrideFilter;
		bool soundTriggerOverrideOcclusion;
		bool soundTriggerOverrideAmbient;
		bool soundTriggerOverrideAmbientEvents;
		bool soundTriggerOverrideADSR;
	};

	union XAssetHeader
	{
		void* data;
		PhysPreset* physPreset;
		PhysCollmap* physCollmap;
		XAnimParts* parts;
		XModelSurfs* modelSurfs;
		XModel* model;
		Material* material;
		ComputeShader* computeShader;
		MaterialVertexShader* vertexShader;
		MaterialHullShader* hullShader;
		MaterialDomainShader* domainShader;
		MaterialPixelShader* pixelShader;
		MaterialVertexDeclaration* vertexDecl;
		MaterialTechniqueSet* techniqueSet;
		GfxImage* image;
		snd_alias_list_t* sound;
		SndCurve* sndCurve;
		SndCurve* lpfCurve;
		SndCurve* reverbCurve;
		LoadedSound* loadSnd;
		clipMap_t* clipMap;
		ComWorld* comWorld;
		GlassWorld* glassWorld;
		PathData* pathData;
		//VehicleTrack* vehicleTrack;
		MapEnts* mapEnts;
		FxWorld* fxWorld;
		GfxWorld* gfxWorld;
		GfxLightDef* lightDef;
		Font_s* font;
		//MenuList* menuList;
		//menuDef_t* menu;
		//AnimationClass* animClass;
		LocalizeEntry* localize;
		WeaponAttachment* attachment;
		WeaponCompleteDef* weapon;
		//SndDriverGlobals* sndDriverGlobals;
		FxEffectDef* fx;
		//FxImpactTable* impactFx;
		//SurfaceFxTable* surfaceFx;
		RawFile* rawfile;
		ScriptFile* scriptfile;
		StringTable* stringTable;
		//LeaderboardDef* leaderboardDef;
		StructuredDataDefSet* structuredDataDefSet;
		TracerDef* tracerDef;
		VehicleDef* vehDef;
		AddonMapEnts* addonMapEnts;
		NetConstStrings* netConstStrings;
		//ReverbPreset* reverbPreset;
		LuaFile* luaFile;
		ScriptableDef* scriptable;
		//Colorization* colorization;
		//ColorizationSet* colorizationSet;
		//ToneMapping* toneMapping;
		//EquipmentSoundTable* equipSndTable;
		//VectorField* vectorField;
		DopplerPreset* dopplerPreset;
		FxParticleSimAnimation* particleSimAnimation;
	};

	struct XAsset
	{
		XAssetType type;
		XAssetHeader header;
	};

	struct XAssetEntry
	{
		XAsset asset;
		unsigned char zoneIndex;
		volatile char inuseMask;
		unsigned int nextHash;
		unsigned int nextOverride;
		unsigned int nextPoolEntry;
	};

	struct ScriptStringList
	{
		int count;
		const char** strings;
	};

	union GfxZoneTableEntry
	{
		char* dataPtr;
		void* voidPtr;
		ID3D11Buffer* buffer;
		ID3D11DepthStencilState* depthStencilState;
		ID3D11BlendState* blendState;
	};

	typedef std::uint32_t GfxBlendStateBits[1];

	struct XGfxGlobals
	{
		unsigned int depthStencilStateCount; // 0
		unsigned int blendStateCount; // 4
		std::uint64_t* depthStencilStateBits; // 8
		GfxBlendStateBits* blendStateBits; // 16
		GfxZoneTableEntry* depthStencilStates; // 24
		GfxZoneTableEntry* blendStates; // 32
		unsigned int perPrimConstantBufferCount; // 40
		unsigned int perObjConstantBufferCount; // 44
		unsigned int stableConstantBufferCount; // 48
		unsigned int* perPrimConstantBufferSizes; // 56
		unsigned int* perObjConstantBufferSizes; // 64
		unsigned int* stableConstantBufferSizes; // 72
		GfxZoneTableEntry* perPrimConstantBuffers; // 80
		GfxZoneTableEntry* perObjConstantBuffers; // 88
		GfxZoneTableEntry* stableConstantBuffers; // 96
	};

	struct XGlobals
	{
		XGfxGlobals* gfxGlobals;
	};

	struct XAssetList
	{
		ScriptStringList stringList;
		int assetCount;
		XAsset* assets;
		XGlobals* globals;
	};

	struct XFile
	{
		unsigned __int64 size;
		unsigned __int64 externalSize;
		unsigned __int64 blockSize[7];
	};

	struct XBlock
	{
		unsigned char* data;
		unsigned __int64 size;
	};

	struct XZoneMemory_
	{
		XBlock blocks[7];
	};

	enum DBAllocFlags : std::int32_t
	{
		DB_ZONE_NONE = 0x0,
		DB_ZONE_COMMON = 0x1,
		DB_ZONE_UI = 0x2,
		DB_ZONE_GAME = 0x4,
		DB_ZONE_LOAD = 0x8,
		DB_ZONE_DEV = 0x10,
		DB_ZONE_BASEMAP = 0x20,
		DB_ZONE_TRANSIENT_POOL = 0x40,
		DB_ZONE_TRANSIENT_MASK = 0x40,
		DB_ZONE_CUSTOM = 0x80 // added for custom zone loading
	};

	struct XZoneInfo
	{
		const char* name;
		int allocFlags;
		int freeFlags;
	};

	struct XZoneInfoInternal
	{
		char name[64];
		int flags;
		int isBaseMap;
	};

	struct DBFile
	{
		void* handle;
		unsigned __int64 memoryBufferSize;
		char* memoryBuffer;
		char name[64];
	};

	enum DBSyncMode : std::int32_t
	{
		DB_LOAD_ASYNC = 0x0,
		DB_LOAD_SYNC = 0x1,
		DB_LOAD_ASYNC_WAIT_ALLOC = 0x2,
		DB_LOAD_ASYNC_FORCE_FREE = 0x3,
		DB_LOAD_ASYNC_NO_SYNC_THREADS = 0x4,
		DB_LOAD_SYNC_SKIP_ALWAYS_LOADED = 0x5,
	};

	enum DB_CompressorType : std::int32_t
	{
		DB_COMPRESSOR_INVALID = 0xFFFF,
		DB_COMPRESSOR_ZLIB = 0x0,
		DB_COMPRESSOR_LZX = 0x1,
		DB_COMPRESSOR_PASSTHROUGH = 0x2,
	};
}